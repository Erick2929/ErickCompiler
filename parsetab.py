
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BOOL COLON COMMA DECREMENT DIVIDE ELSE EQUAL FALSE FLOAT FOR GREATER GREATER_EQUAL IDENTIFIER IF INCREMENT INT LESS LESS_EQUAL LOGICAL_AND LOGICAL_NOT LOGICAL_OR L_BRACE L_BRACKET L_PAREN MAIN MINUS MODULO NOT NOT_EQUAL OR PLUS PROGRAM RETURN R_BRACE R_BRACKET R_PAREN SEMICOLON STRING TIMES TRUE WHILE WRITE WRITELNprogram : PROGRAM MAIN L_BRACE expressions R_BRACEexpressions : expressions expressionexpressions : expression\n    expression : var_declaration SEMICOLON\n               | write SEMICOLON\n               | writeln SEMICOLON\n               | empty\n    write : WRITE L_PAREN statement R_PARENwriteln : WRITELN L_PAREN statement R_PARENstatement : IDENTIFIER\n    statement : statement PLUS statement\n              | statement MINUS statement\n              | statement TIMES statement\n              | statement DIVIDE statement\n              | INT\n              | FLOAT\n              | BOOL\n              | STRING\n    \n    statement : L_PAREN statement R_PAREN\n              | L_PAREN conditional R_PAREN\n    \n    conditional : conditional EQUAL conditional\n                | conditional NOT_EQUAL conditional\n                | conditional GREATER conditional\n                | conditional LESS conditional\n                | conditional GREATER_EQUAL conditional\n                | conditional LESS_EQUAL conditional\n                | conditional AND conditional\n                | conditional OR conditional\n                | TRUE\n                | FALSE\n                | statement\n    var_declaration : data_type declarations\n    data_type : INT\n               | FLOAT\n               | BOOL\n               | STRING\n    \n    declarations : IDENTIFIER COMMA declarations\n                 | IDENTIFIER\n    \n    empty :\n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,18,],[0,-1,]),'MAIN':([2,],[3,]),'L_BRACE':([3,],[4,]),'WRITE':([4,5,6,10,19,20,21,22,],[12,12,-3,-7,-2,-4,-5,-6,]),'WRITELN':([4,5,6,10,19,20,21,22,],[13,13,-3,-7,-2,-4,-5,-6,]),'R_BRACE':([4,5,6,10,19,20,21,22,],[-39,18,-3,-7,-2,-4,-5,-6,]),'INT':([4,5,6,10,19,20,21,22,25,26,28,42,43,44,45,49,50,51,52,53,54,55,56,],[14,14,-3,-7,-2,-4,-5,-6,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'FLOAT':([4,5,6,10,19,20,21,22,25,26,28,42,43,44,45,49,50,51,52,53,54,55,56,],[15,15,-3,-7,-2,-4,-5,-6,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'BOOL':([4,5,6,10,19,20,21,22,25,26,28,42,43,44,45,49,50,51,52,53,54,55,56,],[16,16,-3,-7,-2,-4,-5,-6,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'STRING':([4,5,6,10,19,20,21,22,25,26,28,42,43,44,45,49,50,51,52,53,54,55,56,],[17,17,-3,-7,-2,-4,-5,-6,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'SEMICOLON':([7,8,9,23,24,36,41,46,],[20,21,22,-32,-38,-37,-8,-9,]),'IDENTIFIER':([11,14,15,16,17,25,26,27,28,42,43,44,45,49,50,51,52,53,54,55,56,],[24,-33,-34,-35,-36,30,30,24,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'L_PAREN':([12,13,25,26,28,42,43,44,45,49,50,51,52,53,54,55,56,],[25,26,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'COMMA':([24,],[27,]),'TRUE':([28,49,50,51,52,53,54,55,56,],[39,39,39,39,39,39,39,39,39,]),'FALSE':([28,49,50,51,52,53,54,55,56,],[40,40,40,40,40,40,40,40,40,]),'R_PAREN':([29,30,31,32,33,34,35,37,38,39,40,47,48,57,58,59,60,61,62,63,64,65,66,67,68,69,],[41,-10,-15,-16,-17,-18,46,47,48,-29,-30,-19,-20,-11,-12,-13,-14,-21,-31,-22,-23,-24,-25,-26,-27,-28,]),'PLUS':([29,30,31,32,33,34,35,37,47,48,57,58,59,60,62,],[42,-10,-15,-16,-17,-18,42,42,-19,-20,42,42,42,42,42,]),'MINUS':([29,30,31,32,33,34,35,37,47,48,57,58,59,60,62,],[43,-10,-15,-16,-17,-18,43,43,-19,-20,43,43,43,43,43,]),'TIMES':([29,30,31,32,33,34,35,37,47,48,57,58,59,60,62,],[44,-10,-15,-16,-17,-18,44,44,-19,-20,44,44,44,44,44,]),'DIVIDE':([29,30,31,32,33,34,35,37,47,48,57,58,59,60,62,],[45,-10,-15,-16,-17,-18,45,45,-19,-20,45,45,45,45,45,]),'EQUAL':([30,31,32,33,34,37,38,39,40,47,48,57,58,59,60,61,62,63,64,65,66,67,68,69,],[-10,-15,-16,-17,-18,-31,49,-29,-30,-19,-20,-11,-12,-13,-14,49,-31,49,49,49,49,49,49,49,]),'NOT_EQUAL':([30,31,32,33,34,37,38,39,40,47,48,57,58,59,60,61,62,63,64,65,66,67,68,69,],[-10,-15,-16,-17,-18,-31,50,-29,-30,-19,-20,-11,-12,-13,-14,50,-31,50,50,50,50,50,50,50,]),'GREATER':([30,31,32,33,34,37,38,39,40,47,48,57,58,59,60,61,62,63,64,65,66,67,68,69,],[-10,-15,-16,-17,-18,-31,51,-29,-30,-19,-20,-11,-12,-13,-14,51,-31,51,51,51,51,51,51,51,]),'LESS':([30,31,32,33,34,37,38,39,40,47,48,57,58,59,60,61,62,63,64,65,66,67,68,69,],[-10,-15,-16,-17,-18,-31,52,-29,-30,-19,-20,-11,-12,-13,-14,52,-31,52,52,52,52,52,52,52,]),'GREATER_EQUAL':([30,31,32,33,34,37,38,39,40,47,48,57,58,59,60,61,62,63,64,65,66,67,68,69,],[-10,-15,-16,-17,-18,-31,53,-29,-30,-19,-20,-11,-12,-13,-14,53,-31,53,53,53,53,53,53,53,]),'LESS_EQUAL':([30,31,32,33,34,37,38,39,40,47,48,57,58,59,60,61,62,63,64,65,66,67,68,69,],[-10,-15,-16,-17,-18,-31,54,-29,-30,-19,-20,-11,-12,-13,-14,54,-31,54,54,54,54,54,54,54,]),'AND':([30,31,32,33,34,37,38,39,40,47,48,57,58,59,60,61,62,63,64,65,66,67,68,69,],[-10,-15,-16,-17,-18,-31,55,-29,-30,-19,-20,-11,-12,-13,-14,55,-31,55,55,55,55,55,55,55,]),'OR':([30,31,32,33,34,37,38,39,40,47,48,57,58,59,60,61,62,63,64,65,66,67,68,69,],[-10,-15,-16,-17,-18,-31,56,-29,-30,-19,-20,-11,-12,-13,-14,56,-31,56,56,56,56,56,56,56,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'expressions':([4,],[5,]),'expression':([4,5,],[6,19,]),'var_declaration':([4,5,],[7,7,]),'write':([4,5,],[8,8,]),'writeln':([4,5,],[9,9,]),'empty':([4,5,],[10,10,]),'data_type':([4,5,],[11,11,]),'declarations':([11,27,],[23,36,]),'statement':([25,26,28,42,43,44,45,49,50,51,52,53,54,55,56,],[29,35,37,57,58,59,60,62,62,62,62,62,62,62,62,]),'conditional':([28,49,50,51,52,53,54,55,56,],[38,61,63,64,65,66,67,68,69,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM MAIN L_BRACE expressions R_BRACE','program',5,'p_init','yacc.py',12),
  ('expressions -> expressions expression','expressions',2,'p_expressions','yacc.py',21),
  ('expressions -> expression','expressions',1,'p_expressions_expression','yacc.py',27),
  ('expression -> var_declaration SEMICOLON','expression',2,'p_expression','yacc.py',33),
  ('expression -> write SEMICOLON','expression',2,'p_expression','yacc.py',34),
  ('expression -> writeln SEMICOLON','expression',2,'p_expression','yacc.py',35),
  ('expression -> empty','expression',1,'p_expression','yacc.py',36),
  ('write -> WRITE L_PAREN statement R_PAREN','write',4,'p_write','yacc.py',45),
  ('writeln -> WRITELN L_PAREN statement R_PAREN','writeln',4,'p_writeln','yacc.py',50),
  ('statement -> IDENTIFIER','statement',1,'p_statement_variable','yacc.py',58),
  ('statement -> statement PLUS statement','statement',3,'p_statement','yacc.py',64),
  ('statement -> statement MINUS statement','statement',3,'p_statement','yacc.py',65),
  ('statement -> statement TIMES statement','statement',3,'p_statement','yacc.py',66),
  ('statement -> statement DIVIDE statement','statement',3,'p_statement','yacc.py',67),
  ('statement -> INT','statement',1,'p_statement','yacc.py',68),
  ('statement -> FLOAT','statement',1,'p_statement','yacc.py',69),
  ('statement -> BOOL','statement',1,'p_statement','yacc.py',70),
  ('statement -> STRING','statement',1,'p_statement','yacc.py',71),
  ('statement -> L_PAREN statement R_PAREN','statement',3,'p_statement_parenthesis','yacc.py',81),
  ('statement -> L_PAREN conditional R_PAREN','statement',3,'p_statement_parenthesis','yacc.py',82),
  ('conditional -> conditional EQUAL conditional','conditional',3,'p_conditional','yacc.py',90),
  ('conditional -> conditional NOT_EQUAL conditional','conditional',3,'p_conditional','yacc.py',91),
  ('conditional -> conditional GREATER conditional','conditional',3,'p_conditional','yacc.py',92),
  ('conditional -> conditional LESS conditional','conditional',3,'p_conditional','yacc.py',93),
  ('conditional -> conditional GREATER_EQUAL conditional','conditional',3,'p_conditional','yacc.py',94),
  ('conditional -> conditional LESS_EQUAL conditional','conditional',3,'p_conditional','yacc.py',95),
  ('conditional -> conditional AND conditional','conditional',3,'p_conditional','yacc.py',96),
  ('conditional -> conditional OR conditional','conditional',3,'p_conditional','yacc.py',97),
  ('conditional -> TRUE','conditional',1,'p_conditional','yacc.py',98),
  ('conditional -> FALSE','conditional',1,'p_conditional','yacc.py',99),
  ('conditional -> statement','conditional',1,'p_conditional','yacc.py',100),
  ('var_declaration -> data_type declarations','var_declaration',2,'p_variable_declaration','yacc.py',112),
  ('data_type -> INT','data_type',1,'p_data_type','yacc.py',118),
  ('data_type -> FLOAT','data_type',1,'p_data_type','yacc.py',119),
  ('data_type -> BOOL','data_type',1,'p_data_type','yacc.py',120),
  ('data_type -> STRING','data_type',1,'p_data_type','yacc.py',121),
  ('declarations -> IDENTIFIER COMMA declarations','declarations',3,'p_declarations','yacc.py',128),
  ('declarations -> IDENTIFIER','declarations',1,'p_declarations','yacc.py',129),
  ('empty -> <empty>','empty',0,'p_empty','yacc.py',153),
]
