
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEANDORnonassocL_PARENR_PARENAND ASSIGN BOOL COLON COMMA DECREMENT DIVIDE ELSE EQUAL FALSE FLOAT FOR GREATER GREATER_EQUAL IDENTIFIER IF INCREMENT INT LESS LESS_EQUAL LOGICAL_AND LOGICAL_NOT LOGICAL_OR L_BRACE L_BRACKET L_PAREN MAIN MINUS MODULO NOT NOT_EQUAL OR PLUS PROGRAM RETURN R_BRACE R_BRACKET R_PAREN SEMICOLON STRING TIMES TRUE WHILE WRITE WRITELNprogram : PROGRAM MAIN L_BRACE expressions R_BRACEexpressions : expressions expressionexpressions : expression\n    expression : var_declaration SEMICOLON\n               | write SEMICOLON\n               | writeln SEMICOLON\n               | statement SEMICOLON\n               | if_else_statement\n               | for_loop\n               | while_loop\n               | empty\n    write : WRITE L_PAREN statement R_PARENwriteln : WRITELN L_PAREN statement R_PARENstatement : IDENTIFIER\n    statement : statement PLUS statement\n              | statement MINUS statement\n              | statement TIMES statement\n              | statement DIVIDE statement\n              | INT\n              | FLOAT\n              | BOOL\n              | STRING\n    \n    statement : L_PAREN statement R_PAREN\n              | L_PAREN conditional R_PAREN\n    statement : IDENTIFIER INCREMENTstatement : IDENTIFIER DECREMENT\n    conditional : conditional EQUAL conditional\n                | conditional NOT_EQUAL conditional\n                | conditional GREATER conditional\n                | conditional LESS conditional\n                | conditional GREATER_EQUAL conditional\n                | conditional LESS_EQUAL conditional\n                | conditional AND conditional\n                | conditional OR conditional\n                | TRUE\n                | FALSE\n                | statement\n    for_loop : FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACEwhile_loop : WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE\n    if_else_statement : IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE\n                      | IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE\n    var_declaration : data_type declarations\n    data_type : INT\n               | FLOAT\n               | BOOL\n               | STRING\n    \n    declarations : IDENTIFIER COMMA declarations\n                 | IDENTIFIER\n    var_declaration : IDENTIFIER ASSIGN statement\n    empty :\n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,27,],[0,-1,]),'MAIN':([2,],[3,]),'L_BRACE':([3,94,96,106,107,],[4,97,99,108,109,]),'IDENTIFIER':([4,5,6,11,12,13,14,15,18,20,21,22,23,28,29,30,31,32,33,34,35,36,39,42,52,53,54,55,60,65,66,67,68,69,70,71,72,78,79,80,81,95,97,99,100,101,102,103,105,108,109,110,111,112,113,],[16,16,-3,-8,-9,-10,-11,38,45,-43,-44,-45,-46,-2,-4,-5,-6,-7,45,45,45,45,45,45,45,45,77,45,38,45,45,45,45,45,45,45,45,-43,-44,-45,-46,45,16,16,16,45,16,-41,-39,16,16,16,16,-40,-38,]),'WRITE':([4,5,6,11,12,13,14,28,29,30,31,32,97,99,100,102,103,105,108,109,110,111,112,113,],[17,17,-3,-8,-9,-10,-11,-2,-4,-5,-6,-7,17,17,17,17,-41,-39,17,17,17,17,-40,-38,]),'WRITELN':([4,5,6,11,12,13,14,28,29,30,31,32,97,99,100,102,103,105,108,109,110,111,112,113,],[19,19,-3,-8,-9,-10,-11,-2,-4,-5,-6,-7,19,19,19,19,-41,-39,19,19,19,19,-40,-38,]),'INT':([4,5,6,11,12,13,14,18,28,29,30,31,32,33,34,35,36,39,42,52,53,54,55,65,66,67,68,69,70,71,72,95,97,99,100,101,102,103,105,108,109,110,111,112,113,],[20,20,-3,-8,-9,-10,-11,46,-2,-4,-5,-6,-7,46,46,46,46,46,46,46,46,78,46,46,46,46,46,46,46,46,46,46,20,20,20,46,20,-41,-39,20,20,20,20,-40,-38,]),'FLOAT':([4,5,6,11,12,13,14,18,28,29,30,31,32,33,34,35,36,39,42,52,53,54,55,65,66,67,68,69,70,71,72,95,97,99,100,101,102,103,105,108,109,110,111,112,113,],[21,21,-3,-8,-9,-10,-11,47,-2,-4,-5,-6,-7,47,47,47,47,47,47,47,47,79,47,47,47,47,47,47,47,47,47,47,21,21,21,47,21,-41,-39,21,21,21,21,-40,-38,]),'BOOL':([4,5,6,11,12,13,14,18,28,29,30,31,32,33,34,35,36,39,42,52,53,54,55,65,66,67,68,69,70,71,72,95,97,99,100,101,102,103,105,108,109,110,111,112,113,],[22,22,-3,-8,-9,-10,-11,48,-2,-4,-5,-6,-7,48,48,48,48,48,48,48,48,80,48,48,48,48,48,48,48,48,48,48,22,22,22,48,22,-41,-39,22,22,22,22,-40,-38,]),'STRING':([4,5,6,11,12,13,14,18,28,29,30,31,32,33,34,35,36,39,42,52,53,54,55,65,66,67,68,69,70,71,72,95,97,99,100,101,102,103,105,108,109,110,111,112,113,],[23,23,-3,-8,-9,-10,-11,49,-2,-4,-5,-6,-7,49,49,49,49,49,49,49,49,81,49,49,49,49,49,49,49,49,49,49,23,23,23,49,23,-41,-39,23,23,23,23,-40,-38,]),'L_PAREN':([4,5,6,11,12,13,14,17,18,19,24,25,26,28,29,30,31,32,33,34,35,36,39,42,52,53,55,65,66,67,68,69,70,71,72,95,97,99,100,101,102,103,105,108,109,110,111,112,113,],[18,18,-3,-8,-9,-10,-11,42,18,52,53,54,55,-2,-4,-5,-6,-7,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-41,-39,18,18,18,18,-40,-38,]),'IF':([4,5,6,11,12,13,14,28,29,30,31,32,97,99,100,102,103,105,108,109,110,111,112,113,],[24,24,-3,-8,-9,-10,-11,-2,-4,-5,-6,-7,24,24,24,24,-41,-39,24,24,24,24,-40,-38,]),'FOR':([4,5,6,11,12,13,14,28,29,30,31,32,97,99,100,102,103,105,108,109,110,111,112,113,],[25,25,-3,-8,-9,-10,-11,-2,-4,-5,-6,-7,25,25,25,25,-41,-39,25,25,25,25,-40,-38,]),'WHILE':([4,5,6,11,12,13,14,28,29,30,31,32,97,99,100,102,103,105,108,109,110,111,112,113,],[26,26,-3,-8,-9,-10,-11,-2,-4,-5,-6,-7,26,26,26,26,-41,-39,26,26,26,26,-40,-38,]),'R_BRACE':([4,5,6,11,12,13,14,28,29,30,31,32,97,99,100,102,103,105,108,109,110,111,112,113,],[-50,27,-3,-8,-9,-10,-11,-2,-4,-5,-6,-7,-50,-50,103,105,-41,-39,-50,-50,112,113,-40,-38,]),'SEMICOLON':([7,8,9,10,16,20,21,22,23,37,38,40,41,45,46,47,48,49,50,51,56,57,58,59,61,63,64,75,76,83,84,85,86,87,88,89,90,91,92,93,98,],[29,30,31,32,-14,-19,-20,-21,-22,-42,-48,-25,-26,-14,-19,-20,-21,-22,-35,-36,-15,-16,-17,-18,-49,-23,-24,-37,95,-47,-12,-27,-28,-29,-30,-31,-32,-33,-34,-13,101,]),'PLUS':([10,16,20,21,22,23,40,41,43,45,46,47,48,49,56,57,58,59,61,62,63,64,73,75,104,],[33,-14,-19,-20,-21,-22,-25,-26,33,-14,-19,-20,-21,-22,-15,-16,-17,-18,33,33,-23,-24,33,33,33,]),'MINUS':([10,16,20,21,22,23,40,41,43,45,46,47,48,49,56,57,58,59,61,62,63,64,73,75,104,],[34,-14,-19,-20,-21,-22,-25,-26,34,-14,-19,-20,-21,-22,-15,-16,-17,-18,34,34,-23,-24,34,34,34,]),'TIMES':([10,16,20,21,22,23,40,41,43,45,46,47,48,49,56,57,58,59,61,62,63,64,73,75,104,],[35,-14,-19,-20,-21,-22,-25,-26,35,-14,-19,-20,-21,-22,35,35,-17,-18,35,35,-23,-24,35,35,35,]),'DIVIDE':([10,16,20,21,22,23,40,41,43,45,46,47,48,49,56,57,58,59,61,62,63,64,73,75,104,],[36,-14,-19,-20,-21,-22,-25,-26,36,-14,-19,-20,-21,-22,36,36,-17,-18,36,36,-23,-24,36,36,36,]),'ASSIGN':([16,77,],[39,39,]),'INCREMENT':([16,45,],[40,40,]),'DECREMENT':([16,45,],[41,41,]),'TRUE':([18,53,55,65,66,67,68,69,70,71,72,95,],[50,50,50,50,50,50,50,50,50,50,50,50,]),'FALSE':([18,53,55,65,66,67,68,69,70,71,72,95,],[51,51,51,51,51,51,51,51,51,51,51,51,]),'COMMA':([38,],[60,]),'R_PAREN':([40,41,43,44,45,46,47,48,49,50,51,56,57,58,59,62,63,64,73,74,75,82,85,86,87,88,89,90,91,92,104,],[-25,-26,63,64,-14,-19,-20,-21,-22,-35,-36,-15,-16,-17,-18,84,-23,-24,93,94,-37,96,-27,-28,-29,-30,-31,-32,-33,-34,107,]),'EQUAL':([40,41,43,44,45,46,47,48,49,50,51,56,57,58,59,63,64,74,75,82,85,86,87,88,89,90,91,92,98,],[-25,-26,-37,65,-14,-19,-20,-21,-22,-35,-36,-15,-16,-17,-18,-23,-24,65,-37,65,65,65,65,65,65,65,-33,-34,65,]),'NOT_EQUAL':([40,41,43,44,45,46,47,48,49,50,51,56,57,58,59,63,64,74,75,82,85,86,87,88,89,90,91,92,98,],[-25,-26,-37,66,-14,-19,-20,-21,-22,-35,-36,-15,-16,-17,-18,-23,-24,66,-37,66,66,66,66,66,66,66,-33,-34,66,]),'GREATER':([40,41,43,44,45,46,47,48,49,50,51,56,57,58,59,63,64,74,75,82,85,86,87,88,89,90,91,92,98,],[-25,-26,-37,67,-14,-19,-20,-21,-22,-35,-36,-15,-16,-17,-18,-23,-24,67,-37,67,67,67,67,67,67,67,-33,-34,67,]),'LESS':([40,41,43,44,45,46,47,48,49,50,51,56,57,58,59,63,64,74,75,82,85,86,87,88,89,90,91,92,98,],[-25,-26,-37,68,-14,-19,-20,-21,-22,-35,-36,-15,-16,-17,-18,-23,-24,68,-37,68,68,68,68,68,68,68,-33,-34,68,]),'GREATER_EQUAL':([40,41,43,44,45,46,47,48,49,50,51,56,57,58,59,63,64,74,75,82,85,86,87,88,89,90,91,92,98,],[-25,-26,-37,69,-14,-19,-20,-21,-22,-35,-36,-15,-16,-17,-18,-23,-24,69,-37,69,69,69,69,69,69,69,-33,-34,69,]),'LESS_EQUAL':([40,41,43,44,45,46,47,48,49,50,51,56,57,58,59,63,64,74,75,82,85,86,87,88,89,90,91,92,98,],[-25,-26,-37,70,-14,-19,-20,-21,-22,-35,-36,-15,-16,-17,-18,-23,-24,70,-37,70,70,70,70,70,70,70,-33,-34,70,]),'AND':([40,41,43,44,45,46,47,48,49,50,51,56,57,58,59,63,64,74,75,82,85,86,87,88,89,90,91,92,98,],[-25,-26,-37,71,-14,-19,-20,-21,-22,-35,-36,-15,-16,-17,-18,-23,-24,71,-37,71,71,71,71,71,71,71,-33,-34,71,]),'OR':([40,41,43,44,45,46,47,48,49,50,51,56,57,58,59,63,64,74,75,82,85,86,87,88,89,90,91,92,98,],[-25,-26,-37,72,-14,-19,-20,-21,-22,-35,-36,-15,-16,-17,-18,-23,-24,72,-37,72,72,72,72,72,72,72,-33,-34,72,]),'ELSE':([103,],[106,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'expressions':([4,97,99,108,109,],[5,100,102,110,111,]),'expression':([4,5,97,99,100,102,108,109,110,111,],[6,28,6,6,28,28,6,6,28,28,]),'var_declaration':([4,5,54,97,99,100,102,108,109,110,111,],[7,7,76,7,7,7,7,7,7,7,7,]),'write':([4,5,97,99,100,102,108,109,110,111,],[8,8,8,8,8,8,8,8,8,8,]),'writeln':([4,5,97,99,100,102,108,109,110,111,],[9,9,9,9,9,9,9,9,9,9,]),'statement':([4,5,18,33,34,35,36,39,42,52,53,55,65,66,67,68,69,70,71,72,95,97,99,100,101,102,108,109,110,111,],[10,10,43,56,57,58,59,61,62,73,75,75,75,75,75,75,75,75,75,75,75,10,10,10,104,10,10,10,10,10,]),'if_else_statement':([4,5,97,99,100,102,108,109,110,111,],[11,11,11,11,11,11,11,11,11,11,]),'for_loop':([4,5,97,99,100,102,108,109,110,111,],[12,12,12,12,12,12,12,12,12,12,]),'while_loop':([4,5,97,99,100,102,108,109,110,111,],[13,13,13,13,13,13,13,13,13,13,]),'empty':([4,5,97,99,100,102,108,109,110,111,],[14,14,14,14,14,14,14,14,14,14,]),'data_type':([4,5,54,97,99,100,102,108,109,110,111,],[15,15,15,15,15,15,15,15,15,15,15,]),'declarations':([15,60,],[37,83,]),'conditional':([18,53,55,65,66,67,68,69,70,71,72,95,],[44,74,82,85,86,87,88,89,90,91,92,98,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM MAIN L_BRACE expressions R_BRACE','program',5,'p_init','yacc.py',19),
  ('expressions -> expressions expression','expressions',2,'p_expressions','yacc.py',28),
  ('expressions -> expression','expressions',1,'p_expressions_expression','yacc.py',34),
  ('expression -> var_declaration SEMICOLON','expression',2,'p_expression','yacc.py',40),
  ('expression -> write SEMICOLON','expression',2,'p_expression','yacc.py',41),
  ('expression -> writeln SEMICOLON','expression',2,'p_expression','yacc.py',42),
  ('expression -> statement SEMICOLON','expression',2,'p_expression','yacc.py',43),
  ('expression -> if_else_statement','expression',1,'p_expression','yacc.py',44),
  ('expression -> for_loop','expression',1,'p_expression','yacc.py',45),
  ('expression -> while_loop','expression',1,'p_expression','yacc.py',46),
  ('expression -> empty','expression',1,'p_expression','yacc.py',47),
  ('write -> WRITE L_PAREN statement R_PAREN','write',4,'p_write','yacc.py',56),
  ('writeln -> WRITELN L_PAREN statement R_PAREN','writeln',4,'p_writeln','yacc.py',61),
  ('statement -> IDENTIFIER','statement',1,'p_statement_variable','yacc.py',69),
  ('statement -> statement PLUS statement','statement',3,'p_statement','yacc.py',75),
  ('statement -> statement MINUS statement','statement',3,'p_statement','yacc.py',76),
  ('statement -> statement TIMES statement','statement',3,'p_statement','yacc.py',77),
  ('statement -> statement DIVIDE statement','statement',3,'p_statement','yacc.py',78),
  ('statement -> INT','statement',1,'p_statement','yacc.py',79),
  ('statement -> FLOAT','statement',1,'p_statement','yacc.py',80),
  ('statement -> BOOL','statement',1,'p_statement','yacc.py',81),
  ('statement -> STRING','statement',1,'p_statement','yacc.py',82),
  ('statement -> L_PAREN statement R_PAREN','statement',3,'p_statement_parenthesis','yacc.py',92),
  ('statement -> L_PAREN conditional R_PAREN','statement',3,'p_statement_parenthesis','yacc.py',93),
  ('statement -> IDENTIFIER INCREMENT','statement',2,'p_statement_increment','yacc.py',100),
  ('statement -> IDENTIFIER DECREMENT','statement',2,'p_statement_decrement','yacc.py',106),
  ('conditional -> conditional EQUAL conditional','conditional',3,'p_conditional','yacc.py',113),
  ('conditional -> conditional NOT_EQUAL conditional','conditional',3,'p_conditional','yacc.py',114),
  ('conditional -> conditional GREATER conditional','conditional',3,'p_conditional','yacc.py',115),
  ('conditional -> conditional LESS conditional','conditional',3,'p_conditional','yacc.py',116),
  ('conditional -> conditional GREATER_EQUAL conditional','conditional',3,'p_conditional','yacc.py',117),
  ('conditional -> conditional LESS_EQUAL conditional','conditional',3,'p_conditional','yacc.py',118),
  ('conditional -> conditional AND conditional','conditional',3,'p_conditional','yacc.py',119),
  ('conditional -> conditional OR conditional','conditional',3,'p_conditional','yacc.py',120),
  ('conditional -> TRUE','conditional',1,'p_conditional','yacc.py',121),
  ('conditional -> FALSE','conditional',1,'p_conditional','yacc.py',122),
  ('conditional -> statement','conditional',1,'p_conditional','yacc.py',123),
  ('for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE','for_loop',11,'p_for_loop','yacc.py',135),
  ('while_loop -> WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE','while_loop',7,'p_while_loop','yacc.py',144),
  ('if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE','if_else_statement',11,'p_if_else_statement','yacc.py',153),
  ('if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE','if_else_statement',7,'p_if_else_statement','yacc.py',154),
  ('var_declaration -> data_type declarations','var_declaration',2,'p_variable_declaration','yacc.py',166),
  ('data_type -> INT','data_type',1,'p_data_type','yacc.py',172),
  ('data_type -> FLOAT','data_type',1,'p_data_type','yacc.py',173),
  ('data_type -> BOOL','data_type',1,'p_data_type','yacc.py',174),
  ('data_type -> STRING','data_type',1,'p_data_type','yacc.py',175),
  ('declarations -> IDENTIFIER COMMA declarations','declarations',3,'p_declarations','yacc.py',182),
  ('declarations -> IDENTIFIER','declarations',1,'p_declarations','yacc.py',183),
  ('var_declaration -> IDENTIFIER ASSIGN statement','var_declaration',3,'p_assignment','yacc.py',194),
  ('empty -> <empty>','empty',0,'p_empty','yacc.py',201),
]
