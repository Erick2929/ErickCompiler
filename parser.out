Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON
    ELSE
    IF
    LOGICAL_AND
    LOGICAL_NOT
    LOGICAL_OR
    L_BRACKET
    MODULO
    NOT
    RETURN
    R_BRACKET
    WHILE

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM MAIN L_BRACE expressions R_BRACE
Rule 2     expressions -> expressions expression
Rule 3     expressions -> expression
Rule 4     expression -> var_declaration SEMICOLON
Rule 5     expression -> write SEMICOLON
Rule 6     expression -> writeln SEMICOLON
Rule 7     expression -> for_loop
Rule 8     expression -> empty
Rule 9     write -> WRITE L_PAREN statement R_PAREN
Rule 10    writeln -> WRITELN L_PAREN statement R_PAREN
Rule 11    statement -> IDENTIFIER
Rule 12    statement -> statement PLUS statement
Rule 13    statement -> statement MINUS statement
Rule 14    statement -> statement TIMES statement
Rule 15    statement -> statement DIVIDE statement
Rule 16    statement -> INT
Rule 17    statement -> FLOAT
Rule 18    statement -> BOOL
Rule 19    statement -> STRING
Rule 20    statement -> L_PAREN statement R_PAREN
Rule 21    statement -> L_PAREN conditional R_PAREN
Rule 22    statement -> IDENTIFIER INCREMENT
Rule 23    statement -> IDENTIFIER DECREMENT
Rule 24    conditional -> conditional EQUAL conditional
Rule 25    conditional -> conditional NOT_EQUAL conditional
Rule 26    conditional -> conditional GREATER conditional
Rule 27    conditional -> conditional LESS conditional
Rule 28    conditional -> conditional GREATER_EQUAL conditional
Rule 29    conditional -> conditional LESS_EQUAL conditional
Rule 30    conditional -> conditional AND conditional
Rule 31    conditional -> conditional OR conditional
Rule 32    conditional -> TRUE
Rule 33    conditional -> FALSE
Rule 34    conditional -> statement
Rule 35    for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE
Rule 36    var_declaration -> data_type declarations
Rule 37    data_type -> INT
Rule 38    data_type -> FLOAT
Rule 39    data_type -> BOOL
Rule 40    data_type -> STRING
Rule 41    declarations -> IDENTIFIER COMMA declarations
Rule 42    declarations -> IDENTIFIER
Rule 43    var_declaration -> IDENTIFIER ASSIGN statement
Rule 44    empty -> <empty>

Terminals, with rules where they appear

AND                  : 30
ASSIGN               : 43
BOOL                 : 18 39
COLON                : 
COMMA                : 41
DECREMENT            : 23
DIVIDE               : 15
ELSE                 : 
EQUAL                : 24
FALSE                : 33
FLOAT                : 17 38
FOR                  : 35
GREATER              : 26
GREATER_EQUAL        : 28
IDENTIFIER           : 11 22 23 41 42 43
IF                   : 
INCREMENT            : 22
INT                  : 16 37
LESS                 : 27
LESS_EQUAL           : 29
LOGICAL_AND          : 
LOGICAL_NOT          : 
LOGICAL_OR           : 
L_BRACE              : 1 35
L_BRACKET            : 
L_PAREN              : 9 10 20 21 35
MAIN                 : 1
MINUS                : 13
MODULO               : 
NOT                  : 
NOT_EQUAL            : 25
OR                   : 31
PLUS                 : 12
PROGRAM              : 1
RETURN               : 
R_BRACE              : 1 35
R_BRACKET            : 
R_PAREN              : 9 10 20 21 35
SEMICOLON            : 4 5 6 35 35
STRING               : 19 40
TIMES                : 14
TRUE                 : 32
WHILE                : 
WRITE                : 9
WRITELN              : 10
error                : 

Nonterminals, with rules where they appear

conditional          : 21 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 35
data_type            : 36
declarations         : 36 41
empty                : 8
expression           : 2 3
expressions          : 1 2 35
for_loop             : 7
program              : 0
statement            : 9 10 12 12 13 13 14 14 15 15 20 34 35 43
var_declaration      : 4 35
write                : 5
writeln              : 6

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM MAIN L_BRACE expressions R_BRACE

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . MAIN L_BRACE expressions R_BRACE

    MAIN            shift and go to state 3


state 3

    (1) program -> PROGRAM MAIN . L_BRACE expressions R_BRACE

    L_BRACE         shift and go to state 4


state 4

    (1) program -> PROGRAM MAIN L_BRACE . expressions R_BRACE
    (2) expressions -> . expressions expression
    (3) expressions -> . expression
    (4) expression -> . var_declaration SEMICOLON
    (5) expression -> . write SEMICOLON
    (6) expression -> . writeln SEMICOLON
    (7) expression -> . for_loop
    (8) expression -> . empty
    (36) var_declaration -> . data_type declarations
    (43) var_declaration -> . IDENTIFIER ASSIGN statement
    (9) write -> . WRITE L_PAREN statement R_PAREN
    (10) writeln -> . WRITELN L_PAREN statement R_PAREN
    (35) for_loop -> . FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE
    (44) empty -> .
    (37) data_type -> . INT
    (38) data_type -> . FLOAT
    (39) data_type -> . BOOL
    (40) data_type -> . STRING

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    IDENTIFIER      shift and go to state 13
    WRITE           shift and go to state 14
    WRITELN         shift and go to state 15
    FOR             shift and go to state 16
    R_BRACE         reduce using rule 44 (empty -> .)
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    BOOL            shift and go to state 19
    STRING          shift and go to state 20

  ! IDENTIFIER      [ reduce using rule 44 (empty -> .) ]
  ! WRITE           [ reduce using rule 44 (empty -> .) ]
  ! WRITELN         [ reduce using rule 44 (empty -> .) ]
  ! FOR             [ reduce using rule 44 (empty -> .) ]
  ! INT             [ reduce using rule 44 (empty -> .) ]
  ! FLOAT           [ reduce using rule 44 (empty -> .) ]
  ! BOOL            [ reduce using rule 44 (empty -> .) ]
  ! STRING          [ reduce using rule 44 (empty -> .) ]

    expressions                    shift and go to state 5
    expression                     shift and go to state 6
    var_declaration                shift and go to state 7
    write                          shift and go to state 8
    writeln                        shift and go to state 9
    for_loop                       shift and go to state 10
    empty                          shift and go to state 11
    data_type                      shift and go to state 12

state 5

    (1) program -> PROGRAM MAIN L_BRACE expressions . R_BRACE
    (2) expressions -> expressions . expression
    (4) expression -> . var_declaration SEMICOLON
    (5) expression -> . write SEMICOLON
    (6) expression -> . writeln SEMICOLON
    (7) expression -> . for_loop
    (8) expression -> . empty
    (36) var_declaration -> . data_type declarations
    (43) var_declaration -> . IDENTIFIER ASSIGN statement
    (9) write -> . WRITE L_PAREN statement R_PAREN
    (10) writeln -> . WRITELN L_PAREN statement R_PAREN
    (35) for_loop -> . FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE
    (44) empty -> .
    (37) data_type -> . INT
    (38) data_type -> . FLOAT
    (39) data_type -> . BOOL
    (40) data_type -> . STRING

  ! shift/reduce conflict for R_BRACE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    R_BRACE         shift and go to state 21
    IDENTIFIER      shift and go to state 13
    WRITE           shift and go to state 14
    WRITELN         shift and go to state 15
    FOR             shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    BOOL            shift and go to state 19
    STRING          shift and go to state 20

  ! R_BRACE         [ reduce using rule 44 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 44 (empty -> .) ]
  ! WRITE           [ reduce using rule 44 (empty -> .) ]
  ! WRITELN         [ reduce using rule 44 (empty -> .) ]
  ! FOR             [ reduce using rule 44 (empty -> .) ]
  ! INT             [ reduce using rule 44 (empty -> .) ]
  ! FLOAT           [ reduce using rule 44 (empty -> .) ]
  ! BOOL            [ reduce using rule 44 (empty -> .) ]
  ! STRING          [ reduce using rule 44 (empty -> .) ]

    expression                     shift and go to state 22
    var_declaration                shift and go to state 7
    write                          shift and go to state 8
    writeln                        shift and go to state 9
    for_loop                       shift and go to state 10
    empty                          shift and go to state 11
    data_type                      shift and go to state 12

state 6

    (3) expressions -> expression .

    R_BRACE         reduce using rule 3 (expressions -> expression .)
    IDENTIFIER      reduce using rule 3 (expressions -> expression .)
    WRITE           reduce using rule 3 (expressions -> expression .)
    WRITELN         reduce using rule 3 (expressions -> expression .)
    FOR             reduce using rule 3 (expressions -> expression .)
    INT             reduce using rule 3 (expressions -> expression .)
    FLOAT           reduce using rule 3 (expressions -> expression .)
    BOOL            reduce using rule 3 (expressions -> expression .)
    STRING          reduce using rule 3 (expressions -> expression .)


state 7

    (4) expression -> var_declaration . SEMICOLON

    SEMICOLON       shift and go to state 23


state 8

    (5) expression -> write . SEMICOLON

    SEMICOLON       shift and go to state 24


state 9

    (6) expression -> writeln . SEMICOLON

    SEMICOLON       shift and go to state 25


state 10

    (7) expression -> for_loop .

    R_BRACE         reduce using rule 7 (expression -> for_loop .)
    IDENTIFIER      reduce using rule 7 (expression -> for_loop .)
    WRITE           reduce using rule 7 (expression -> for_loop .)
    WRITELN         reduce using rule 7 (expression -> for_loop .)
    FOR             reduce using rule 7 (expression -> for_loop .)
    INT             reduce using rule 7 (expression -> for_loop .)
    FLOAT           reduce using rule 7 (expression -> for_loop .)
    BOOL            reduce using rule 7 (expression -> for_loop .)
    STRING          reduce using rule 7 (expression -> for_loop .)


state 11

    (8) expression -> empty .

    R_BRACE         reduce using rule 8 (expression -> empty .)
    IDENTIFIER      reduce using rule 8 (expression -> empty .)
    WRITE           reduce using rule 8 (expression -> empty .)
    WRITELN         reduce using rule 8 (expression -> empty .)
    FOR             reduce using rule 8 (expression -> empty .)
    INT             reduce using rule 8 (expression -> empty .)
    FLOAT           reduce using rule 8 (expression -> empty .)
    BOOL            reduce using rule 8 (expression -> empty .)
    STRING          reduce using rule 8 (expression -> empty .)


state 12

    (36) var_declaration -> data_type . declarations
    (41) declarations -> . IDENTIFIER COMMA declarations
    (42) declarations -> . IDENTIFIER

    IDENTIFIER      shift and go to state 27

    declarations                   shift and go to state 26

state 13

    (43) var_declaration -> IDENTIFIER . ASSIGN statement

    ASSIGN          shift and go to state 28


state 14

    (9) write -> WRITE . L_PAREN statement R_PAREN

    L_PAREN         shift and go to state 29


state 15

    (10) writeln -> WRITELN . L_PAREN statement R_PAREN

    L_PAREN         shift and go to state 30


state 16

    (35) for_loop -> FOR . L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE

    L_PAREN         shift and go to state 31


state 17

    (37) data_type -> INT .

    IDENTIFIER      reduce using rule 37 (data_type -> INT .)


state 18

    (38) data_type -> FLOAT .

    IDENTIFIER      reduce using rule 38 (data_type -> FLOAT .)


state 19

    (39) data_type -> BOOL .

    IDENTIFIER      reduce using rule 39 (data_type -> BOOL .)


state 20

    (40) data_type -> STRING .

    IDENTIFIER      reduce using rule 40 (data_type -> STRING .)


state 21

    (1) program -> PROGRAM MAIN L_BRACE expressions R_BRACE .

    $end            reduce using rule 1 (program -> PROGRAM MAIN L_BRACE expressions R_BRACE .)


state 22

    (2) expressions -> expressions expression .

    R_BRACE         reduce using rule 2 (expressions -> expressions expression .)
    IDENTIFIER      reduce using rule 2 (expressions -> expressions expression .)
    WRITE           reduce using rule 2 (expressions -> expressions expression .)
    WRITELN         reduce using rule 2 (expressions -> expressions expression .)
    FOR             reduce using rule 2 (expressions -> expressions expression .)
    INT             reduce using rule 2 (expressions -> expressions expression .)
    FLOAT           reduce using rule 2 (expressions -> expressions expression .)
    BOOL            reduce using rule 2 (expressions -> expressions expression .)
    STRING          reduce using rule 2 (expressions -> expressions expression .)


state 23

    (4) expression -> var_declaration SEMICOLON .

    R_BRACE         reduce using rule 4 (expression -> var_declaration SEMICOLON .)
    IDENTIFIER      reduce using rule 4 (expression -> var_declaration SEMICOLON .)
    WRITE           reduce using rule 4 (expression -> var_declaration SEMICOLON .)
    WRITELN         reduce using rule 4 (expression -> var_declaration SEMICOLON .)
    FOR             reduce using rule 4 (expression -> var_declaration SEMICOLON .)
    INT             reduce using rule 4 (expression -> var_declaration SEMICOLON .)
    FLOAT           reduce using rule 4 (expression -> var_declaration SEMICOLON .)
    BOOL            reduce using rule 4 (expression -> var_declaration SEMICOLON .)
    STRING          reduce using rule 4 (expression -> var_declaration SEMICOLON .)


state 24

    (5) expression -> write SEMICOLON .

    R_BRACE         reduce using rule 5 (expression -> write SEMICOLON .)
    IDENTIFIER      reduce using rule 5 (expression -> write SEMICOLON .)
    WRITE           reduce using rule 5 (expression -> write SEMICOLON .)
    WRITELN         reduce using rule 5 (expression -> write SEMICOLON .)
    FOR             reduce using rule 5 (expression -> write SEMICOLON .)
    INT             reduce using rule 5 (expression -> write SEMICOLON .)
    FLOAT           reduce using rule 5 (expression -> write SEMICOLON .)
    BOOL            reduce using rule 5 (expression -> write SEMICOLON .)
    STRING          reduce using rule 5 (expression -> write SEMICOLON .)


state 25

    (6) expression -> writeln SEMICOLON .

    R_BRACE         reduce using rule 6 (expression -> writeln SEMICOLON .)
    IDENTIFIER      reduce using rule 6 (expression -> writeln SEMICOLON .)
    WRITE           reduce using rule 6 (expression -> writeln SEMICOLON .)
    WRITELN         reduce using rule 6 (expression -> writeln SEMICOLON .)
    FOR             reduce using rule 6 (expression -> writeln SEMICOLON .)
    INT             reduce using rule 6 (expression -> writeln SEMICOLON .)
    FLOAT           reduce using rule 6 (expression -> writeln SEMICOLON .)
    BOOL            reduce using rule 6 (expression -> writeln SEMICOLON .)
    STRING          reduce using rule 6 (expression -> writeln SEMICOLON .)


state 26

    (36) var_declaration -> data_type declarations .

    SEMICOLON       reduce using rule 36 (var_declaration -> data_type declarations .)


state 27

    (41) declarations -> IDENTIFIER . COMMA declarations
    (42) declarations -> IDENTIFIER .

    COMMA           shift and go to state 32
    SEMICOLON       reduce using rule 42 (declarations -> IDENTIFIER .)


state 28

    (43) var_declaration -> IDENTIFIER ASSIGN . statement
    (11) statement -> . IDENTIFIER
    (12) statement -> . statement PLUS statement
    (13) statement -> . statement MINUS statement
    (14) statement -> . statement TIMES statement
    (15) statement -> . statement DIVIDE statement
    (16) statement -> . INT
    (17) statement -> . FLOAT
    (18) statement -> . BOOL
    (19) statement -> . STRING
    (20) statement -> . L_PAREN statement R_PAREN
    (21) statement -> . L_PAREN conditional R_PAREN
    (22) statement -> . IDENTIFIER INCREMENT
    (23) statement -> . IDENTIFIER DECREMENT

    IDENTIFIER      shift and go to state 33
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    L_PAREN         shift and go to state 39

    statement                      shift and go to state 34

state 29

    (9) write -> WRITE L_PAREN . statement R_PAREN
    (11) statement -> . IDENTIFIER
    (12) statement -> . statement PLUS statement
    (13) statement -> . statement MINUS statement
    (14) statement -> . statement TIMES statement
    (15) statement -> . statement DIVIDE statement
    (16) statement -> . INT
    (17) statement -> . FLOAT
    (18) statement -> . BOOL
    (19) statement -> . STRING
    (20) statement -> . L_PAREN statement R_PAREN
    (21) statement -> . L_PAREN conditional R_PAREN
    (22) statement -> . IDENTIFIER INCREMENT
    (23) statement -> . IDENTIFIER DECREMENT

    IDENTIFIER      shift and go to state 33
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    L_PAREN         shift and go to state 39

    statement                      shift and go to state 40

state 30

    (10) writeln -> WRITELN L_PAREN . statement R_PAREN
    (11) statement -> . IDENTIFIER
    (12) statement -> . statement PLUS statement
    (13) statement -> . statement MINUS statement
    (14) statement -> . statement TIMES statement
    (15) statement -> . statement DIVIDE statement
    (16) statement -> . INT
    (17) statement -> . FLOAT
    (18) statement -> . BOOL
    (19) statement -> . STRING
    (20) statement -> . L_PAREN statement R_PAREN
    (21) statement -> . L_PAREN conditional R_PAREN
    (22) statement -> . IDENTIFIER INCREMENT
    (23) statement -> . IDENTIFIER DECREMENT

    IDENTIFIER      shift and go to state 33
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    L_PAREN         shift and go to state 39

    statement                      shift and go to state 41

state 31

    (35) for_loop -> FOR L_PAREN . var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE
    (36) var_declaration -> . data_type declarations
    (43) var_declaration -> . IDENTIFIER ASSIGN statement
    (37) data_type -> . INT
    (38) data_type -> . FLOAT
    (39) data_type -> . BOOL
    (40) data_type -> . STRING

    IDENTIFIER      shift and go to state 13
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    BOOL            shift and go to state 19
    STRING          shift and go to state 20

    var_declaration                shift and go to state 42
    data_type                      shift and go to state 12

state 32

    (41) declarations -> IDENTIFIER COMMA . declarations
    (41) declarations -> . IDENTIFIER COMMA declarations
    (42) declarations -> . IDENTIFIER

    IDENTIFIER      shift and go to state 27

    declarations                   shift and go to state 43

state 33

    (11) statement -> IDENTIFIER .
    (22) statement -> IDENTIFIER . INCREMENT
    (23) statement -> IDENTIFIER . DECREMENT

    PLUS            reduce using rule 11 (statement -> IDENTIFIER .)
    MINUS           reduce using rule 11 (statement -> IDENTIFIER .)
    TIMES           reduce using rule 11 (statement -> IDENTIFIER .)
    DIVIDE          reduce using rule 11 (statement -> IDENTIFIER .)
    SEMICOLON       reduce using rule 11 (statement -> IDENTIFIER .)
    R_PAREN         reduce using rule 11 (statement -> IDENTIFIER .)
    EQUAL           reduce using rule 11 (statement -> IDENTIFIER .)
    NOT_EQUAL       reduce using rule 11 (statement -> IDENTIFIER .)
    GREATER         reduce using rule 11 (statement -> IDENTIFIER .)
    LESS            reduce using rule 11 (statement -> IDENTIFIER .)
    GREATER_EQUAL   reduce using rule 11 (statement -> IDENTIFIER .)
    LESS_EQUAL      reduce using rule 11 (statement -> IDENTIFIER .)
    AND             reduce using rule 11 (statement -> IDENTIFIER .)
    OR              reduce using rule 11 (statement -> IDENTIFIER .)
    INCREMENT       shift and go to state 44
    DECREMENT       shift and go to state 45


state 34

    (43) var_declaration -> IDENTIFIER ASSIGN statement .
    (12) statement -> statement . PLUS statement
    (13) statement -> statement . MINUS statement
    (14) statement -> statement . TIMES statement
    (15) statement -> statement . DIVIDE statement

    SEMICOLON       reduce using rule 43 (var_declaration -> IDENTIFIER ASSIGN statement .)
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49


state 35

    (16) statement -> INT .

    PLUS            reduce using rule 16 (statement -> INT .)
    MINUS           reduce using rule 16 (statement -> INT .)
    TIMES           reduce using rule 16 (statement -> INT .)
    DIVIDE          reduce using rule 16 (statement -> INT .)
    SEMICOLON       reduce using rule 16 (statement -> INT .)
    R_PAREN         reduce using rule 16 (statement -> INT .)
    EQUAL           reduce using rule 16 (statement -> INT .)
    NOT_EQUAL       reduce using rule 16 (statement -> INT .)
    GREATER         reduce using rule 16 (statement -> INT .)
    LESS            reduce using rule 16 (statement -> INT .)
    GREATER_EQUAL   reduce using rule 16 (statement -> INT .)
    LESS_EQUAL      reduce using rule 16 (statement -> INT .)
    AND             reduce using rule 16 (statement -> INT .)
    OR              reduce using rule 16 (statement -> INT .)


state 36

    (17) statement -> FLOAT .

    PLUS            reduce using rule 17 (statement -> FLOAT .)
    MINUS           reduce using rule 17 (statement -> FLOAT .)
    TIMES           reduce using rule 17 (statement -> FLOAT .)
    DIVIDE          reduce using rule 17 (statement -> FLOAT .)
    SEMICOLON       reduce using rule 17 (statement -> FLOAT .)
    R_PAREN         reduce using rule 17 (statement -> FLOAT .)
    EQUAL           reduce using rule 17 (statement -> FLOAT .)
    NOT_EQUAL       reduce using rule 17 (statement -> FLOAT .)
    GREATER         reduce using rule 17 (statement -> FLOAT .)
    LESS            reduce using rule 17 (statement -> FLOAT .)
    GREATER_EQUAL   reduce using rule 17 (statement -> FLOAT .)
    LESS_EQUAL      reduce using rule 17 (statement -> FLOAT .)
    AND             reduce using rule 17 (statement -> FLOAT .)
    OR              reduce using rule 17 (statement -> FLOAT .)


state 37

    (18) statement -> BOOL .

    PLUS            reduce using rule 18 (statement -> BOOL .)
    MINUS           reduce using rule 18 (statement -> BOOL .)
    TIMES           reduce using rule 18 (statement -> BOOL .)
    DIVIDE          reduce using rule 18 (statement -> BOOL .)
    SEMICOLON       reduce using rule 18 (statement -> BOOL .)
    R_PAREN         reduce using rule 18 (statement -> BOOL .)
    EQUAL           reduce using rule 18 (statement -> BOOL .)
    NOT_EQUAL       reduce using rule 18 (statement -> BOOL .)
    GREATER         reduce using rule 18 (statement -> BOOL .)
    LESS            reduce using rule 18 (statement -> BOOL .)
    GREATER_EQUAL   reduce using rule 18 (statement -> BOOL .)
    LESS_EQUAL      reduce using rule 18 (statement -> BOOL .)
    AND             reduce using rule 18 (statement -> BOOL .)
    OR              reduce using rule 18 (statement -> BOOL .)


state 38

    (19) statement -> STRING .

    PLUS            reduce using rule 19 (statement -> STRING .)
    MINUS           reduce using rule 19 (statement -> STRING .)
    TIMES           reduce using rule 19 (statement -> STRING .)
    DIVIDE          reduce using rule 19 (statement -> STRING .)
    SEMICOLON       reduce using rule 19 (statement -> STRING .)
    R_PAREN         reduce using rule 19 (statement -> STRING .)
    EQUAL           reduce using rule 19 (statement -> STRING .)
    NOT_EQUAL       reduce using rule 19 (statement -> STRING .)
    GREATER         reduce using rule 19 (statement -> STRING .)
    LESS            reduce using rule 19 (statement -> STRING .)
    GREATER_EQUAL   reduce using rule 19 (statement -> STRING .)
    LESS_EQUAL      reduce using rule 19 (statement -> STRING .)
    AND             reduce using rule 19 (statement -> STRING .)
    OR              reduce using rule 19 (statement -> STRING .)


state 39

    (20) statement -> L_PAREN . statement R_PAREN
    (21) statement -> L_PAREN . conditional R_PAREN
    (11) statement -> . IDENTIFIER
    (12) statement -> . statement PLUS statement
    (13) statement -> . statement MINUS statement
    (14) statement -> . statement TIMES statement
    (15) statement -> . statement DIVIDE statement
    (16) statement -> . INT
    (17) statement -> . FLOAT
    (18) statement -> . BOOL
    (19) statement -> . STRING
    (20) statement -> . L_PAREN statement R_PAREN
    (21) statement -> . L_PAREN conditional R_PAREN
    (22) statement -> . IDENTIFIER INCREMENT
    (23) statement -> . IDENTIFIER DECREMENT
    (24) conditional -> . conditional EQUAL conditional
    (25) conditional -> . conditional NOT_EQUAL conditional
    (26) conditional -> . conditional GREATER conditional
    (27) conditional -> . conditional LESS conditional
    (28) conditional -> . conditional GREATER_EQUAL conditional
    (29) conditional -> . conditional LESS_EQUAL conditional
    (30) conditional -> . conditional AND conditional
    (31) conditional -> . conditional OR conditional
    (32) conditional -> . TRUE
    (33) conditional -> . FALSE
    (34) conditional -> . statement

    IDENTIFIER      shift and go to state 33
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    L_PAREN         shift and go to state 39
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53

    statement                      shift and go to state 50
    conditional                    shift and go to state 51

state 40

    (9) write -> WRITE L_PAREN statement . R_PAREN
    (12) statement -> statement . PLUS statement
    (13) statement -> statement . MINUS statement
    (14) statement -> statement . TIMES statement
    (15) statement -> statement . DIVIDE statement

    R_PAREN         shift and go to state 54
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49


state 41

    (10) writeln -> WRITELN L_PAREN statement . R_PAREN
    (12) statement -> statement . PLUS statement
    (13) statement -> statement . MINUS statement
    (14) statement -> statement . TIMES statement
    (15) statement -> statement . DIVIDE statement

    R_PAREN         shift and go to state 55
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49


state 42

    (35) for_loop -> FOR L_PAREN var_declaration . SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE

    SEMICOLON       shift and go to state 56


state 43

    (41) declarations -> IDENTIFIER COMMA declarations .

    SEMICOLON       reduce using rule 41 (declarations -> IDENTIFIER COMMA declarations .)


state 44

    (22) statement -> IDENTIFIER INCREMENT .

    PLUS            reduce using rule 22 (statement -> IDENTIFIER INCREMENT .)
    MINUS           reduce using rule 22 (statement -> IDENTIFIER INCREMENT .)
    TIMES           reduce using rule 22 (statement -> IDENTIFIER INCREMENT .)
    DIVIDE          reduce using rule 22 (statement -> IDENTIFIER INCREMENT .)
    SEMICOLON       reduce using rule 22 (statement -> IDENTIFIER INCREMENT .)
    R_PAREN         reduce using rule 22 (statement -> IDENTIFIER INCREMENT .)
    EQUAL           reduce using rule 22 (statement -> IDENTIFIER INCREMENT .)
    NOT_EQUAL       reduce using rule 22 (statement -> IDENTIFIER INCREMENT .)
    GREATER         reduce using rule 22 (statement -> IDENTIFIER INCREMENT .)
    LESS            reduce using rule 22 (statement -> IDENTIFIER INCREMENT .)
    GREATER_EQUAL   reduce using rule 22 (statement -> IDENTIFIER INCREMENT .)
    LESS_EQUAL      reduce using rule 22 (statement -> IDENTIFIER INCREMENT .)
    AND             reduce using rule 22 (statement -> IDENTIFIER INCREMENT .)
    OR              reduce using rule 22 (statement -> IDENTIFIER INCREMENT .)


state 45

    (23) statement -> IDENTIFIER DECREMENT .

    PLUS            reduce using rule 23 (statement -> IDENTIFIER DECREMENT .)
    MINUS           reduce using rule 23 (statement -> IDENTIFIER DECREMENT .)
    TIMES           reduce using rule 23 (statement -> IDENTIFIER DECREMENT .)
    DIVIDE          reduce using rule 23 (statement -> IDENTIFIER DECREMENT .)
    SEMICOLON       reduce using rule 23 (statement -> IDENTIFIER DECREMENT .)
    R_PAREN         reduce using rule 23 (statement -> IDENTIFIER DECREMENT .)
    EQUAL           reduce using rule 23 (statement -> IDENTIFIER DECREMENT .)
    NOT_EQUAL       reduce using rule 23 (statement -> IDENTIFIER DECREMENT .)
    GREATER         reduce using rule 23 (statement -> IDENTIFIER DECREMENT .)
    LESS            reduce using rule 23 (statement -> IDENTIFIER DECREMENT .)
    GREATER_EQUAL   reduce using rule 23 (statement -> IDENTIFIER DECREMENT .)
    LESS_EQUAL      reduce using rule 23 (statement -> IDENTIFIER DECREMENT .)
    AND             reduce using rule 23 (statement -> IDENTIFIER DECREMENT .)
    OR              reduce using rule 23 (statement -> IDENTIFIER DECREMENT .)


state 46

    (12) statement -> statement PLUS . statement
    (11) statement -> . IDENTIFIER
    (12) statement -> . statement PLUS statement
    (13) statement -> . statement MINUS statement
    (14) statement -> . statement TIMES statement
    (15) statement -> . statement DIVIDE statement
    (16) statement -> . INT
    (17) statement -> . FLOAT
    (18) statement -> . BOOL
    (19) statement -> . STRING
    (20) statement -> . L_PAREN statement R_PAREN
    (21) statement -> . L_PAREN conditional R_PAREN
    (22) statement -> . IDENTIFIER INCREMENT
    (23) statement -> . IDENTIFIER DECREMENT

    IDENTIFIER      shift and go to state 33
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    L_PAREN         shift and go to state 39

    statement                      shift and go to state 57

state 47

    (13) statement -> statement MINUS . statement
    (11) statement -> . IDENTIFIER
    (12) statement -> . statement PLUS statement
    (13) statement -> . statement MINUS statement
    (14) statement -> . statement TIMES statement
    (15) statement -> . statement DIVIDE statement
    (16) statement -> . INT
    (17) statement -> . FLOAT
    (18) statement -> . BOOL
    (19) statement -> . STRING
    (20) statement -> . L_PAREN statement R_PAREN
    (21) statement -> . L_PAREN conditional R_PAREN
    (22) statement -> . IDENTIFIER INCREMENT
    (23) statement -> . IDENTIFIER DECREMENT

    IDENTIFIER      shift and go to state 33
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    L_PAREN         shift and go to state 39

    statement                      shift and go to state 58

state 48

    (14) statement -> statement TIMES . statement
    (11) statement -> . IDENTIFIER
    (12) statement -> . statement PLUS statement
    (13) statement -> . statement MINUS statement
    (14) statement -> . statement TIMES statement
    (15) statement -> . statement DIVIDE statement
    (16) statement -> . INT
    (17) statement -> . FLOAT
    (18) statement -> . BOOL
    (19) statement -> . STRING
    (20) statement -> . L_PAREN statement R_PAREN
    (21) statement -> . L_PAREN conditional R_PAREN
    (22) statement -> . IDENTIFIER INCREMENT
    (23) statement -> . IDENTIFIER DECREMENT

    IDENTIFIER      shift and go to state 33
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    L_PAREN         shift and go to state 39

    statement                      shift and go to state 59

state 49

    (15) statement -> statement DIVIDE . statement
    (11) statement -> . IDENTIFIER
    (12) statement -> . statement PLUS statement
    (13) statement -> . statement MINUS statement
    (14) statement -> . statement TIMES statement
    (15) statement -> . statement DIVIDE statement
    (16) statement -> . INT
    (17) statement -> . FLOAT
    (18) statement -> . BOOL
    (19) statement -> . STRING
    (20) statement -> . L_PAREN statement R_PAREN
    (21) statement -> . L_PAREN conditional R_PAREN
    (22) statement -> . IDENTIFIER INCREMENT
    (23) statement -> . IDENTIFIER DECREMENT

    IDENTIFIER      shift and go to state 33
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    L_PAREN         shift and go to state 39

    statement                      shift and go to state 60

state 50

    (20) statement -> L_PAREN statement . R_PAREN
    (12) statement -> statement . PLUS statement
    (13) statement -> statement . MINUS statement
    (14) statement -> statement . TIMES statement
    (15) statement -> statement . DIVIDE statement
    (34) conditional -> statement .

  ! shift/reduce conflict for R_PAREN resolved as shift
    R_PAREN         shift and go to state 61
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49
    EQUAL           reduce using rule 34 (conditional -> statement .)
    NOT_EQUAL       reduce using rule 34 (conditional -> statement .)
    GREATER         reduce using rule 34 (conditional -> statement .)
    LESS            reduce using rule 34 (conditional -> statement .)
    GREATER_EQUAL   reduce using rule 34 (conditional -> statement .)
    LESS_EQUAL      reduce using rule 34 (conditional -> statement .)
    AND             reduce using rule 34 (conditional -> statement .)
    OR              reduce using rule 34 (conditional -> statement .)

  ! R_PAREN         [ reduce using rule 34 (conditional -> statement .) ]


state 51

    (21) statement -> L_PAREN conditional . R_PAREN
    (24) conditional -> conditional . EQUAL conditional
    (25) conditional -> conditional . NOT_EQUAL conditional
    (26) conditional -> conditional . GREATER conditional
    (27) conditional -> conditional . LESS conditional
    (28) conditional -> conditional . GREATER_EQUAL conditional
    (29) conditional -> conditional . LESS_EQUAL conditional
    (30) conditional -> conditional . AND conditional
    (31) conditional -> conditional . OR conditional

    R_PAREN         shift and go to state 62
    EQUAL           shift and go to state 63
    NOT_EQUAL       shift and go to state 64
    GREATER         shift and go to state 65
    LESS            shift and go to state 66
    GREATER_EQUAL   shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    AND             shift and go to state 69
    OR              shift and go to state 70


state 52

    (32) conditional -> TRUE .

    R_PAREN         reduce using rule 32 (conditional -> TRUE .)
    EQUAL           reduce using rule 32 (conditional -> TRUE .)
    NOT_EQUAL       reduce using rule 32 (conditional -> TRUE .)
    GREATER         reduce using rule 32 (conditional -> TRUE .)
    LESS            reduce using rule 32 (conditional -> TRUE .)
    GREATER_EQUAL   reduce using rule 32 (conditional -> TRUE .)
    LESS_EQUAL      reduce using rule 32 (conditional -> TRUE .)
    AND             reduce using rule 32 (conditional -> TRUE .)
    OR              reduce using rule 32 (conditional -> TRUE .)
    SEMICOLON       reduce using rule 32 (conditional -> TRUE .)


state 53

    (33) conditional -> FALSE .

    R_PAREN         reduce using rule 33 (conditional -> FALSE .)
    EQUAL           reduce using rule 33 (conditional -> FALSE .)
    NOT_EQUAL       reduce using rule 33 (conditional -> FALSE .)
    GREATER         reduce using rule 33 (conditional -> FALSE .)
    LESS            reduce using rule 33 (conditional -> FALSE .)
    GREATER_EQUAL   reduce using rule 33 (conditional -> FALSE .)
    LESS_EQUAL      reduce using rule 33 (conditional -> FALSE .)
    AND             reduce using rule 33 (conditional -> FALSE .)
    OR              reduce using rule 33 (conditional -> FALSE .)
    SEMICOLON       reduce using rule 33 (conditional -> FALSE .)


state 54

    (9) write -> WRITE L_PAREN statement R_PAREN .

    SEMICOLON       reduce using rule 9 (write -> WRITE L_PAREN statement R_PAREN .)


state 55

    (10) writeln -> WRITELN L_PAREN statement R_PAREN .

    SEMICOLON       reduce using rule 10 (writeln -> WRITELN L_PAREN statement R_PAREN .)


state 56

    (35) for_loop -> FOR L_PAREN var_declaration SEMICOLON . conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE
    (24) conditional -> . conditional EQUAL conditional
    (25) conditional -> . conditional NOT_EQUAL conditional
    (26) conditional -> . conditional GREATER conditional
    (27) conditional -> . conditional LESS conditional
    (28) conditional -> . conditional GREATER_EQUAL conditional
    (29) conditional -> . conditional LESS_EQUAL conditional
    (30) conditional -> . conditional AND conditional
    (31) conditional -> . conditional OR conditional
    (32) conditional -> . TRUE
    (33) conditional -> . FALSE
    (34) conditional -> . statement
    (11) statement -> . IDENTIFIER
    (12) statement -> . statement PLUS statement
    (13) statement -> . statement MINUS statement
    (14) statement -> . statement TIMES statement
    (15) statement -> . statement DIVIDE statement
    (16) statement -> . INT
    (17) statement -> . FLOAT
    (18) statement -> . BOOL
    (19) statement -> . STRING
    (20) statement -> . L_PAREN statement R_PAREN
    (21) statement -> . L_PAREN conditional R_PAREN
    (22) statement -> . IDENTIFIER INCREMENT
    (23) statement -> . IDENTIFIER DECREMENT

    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    IDENTIFIER      shift and go to state 33
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    L_PAREN         shift and go to state 39

    conditional                    shift and go to state 71
    statement                      shift and go to state 72

state 57

    (12) statement -> statement PLUS statement .
    (12) statement -> statement . PLUS statement
    (13) statement -> statement . MINUS statement
    (14) statement -> statement . TIMES statement
    (15) statement -> statement . DIVIDE statement

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    SEMICOLON       reduce using rule 12 (statement -> statement PLUS statement .)
    R_PAREN         reduce using rule 12 (statement -> statement PLUS statement .)
    EQUAL           reduce using rule 12 (statement -> statement PLUS statement .)
    NOT_EQUAL       reduce using rule 12 (statement -> statement PLUS statement .)
    GREATER         reduce using rule 12 (statement -> statement PLUS statement .)
    LESS            reduce using rule 12 (statement -> statement PLUS statement .)
    GREATER_EQUAL   reduce using rule 12 (statement -> statement PLUS statement .)
    LESS_EQUAL      reduce using rule 12 (statement -> statement PLUS statement .)
    AND             reduce using rule 12 (statement -> statement PLUS statement .)
    OR              reduce using rule 12 (statement -> statement PLUS statement .)
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49

  ! PLUS            [ reduce using rule 12 (statement -> statement PLUS statement .) ]
  ! MINUS           [ reduce using rule 12 (statement -> statement PLUS statement .) ]
  ! TIMES           [ reduce using rule 12 (statement -> statement PLUS statement .) ]
  ! DIVIDE          [ reduce using rule 12 (statement -> statement PLUS statement .) ]


state 58

    (13) statement -> statement MINUS statement .
    (12) statement -> statement . PLUS statement
    (13) statement -> statement . MINUS statement
    (14) statement -> statement . TIMES statement
    (15) statement -> statement . DIVIDE statement

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    SEMICOLON       reduce using rule 13 (statement -> statement MINUS statement .)
    R_PAREN         reduce using rule 13 (statement -> statement MINUS statement .)
    EQUAL           reduce using rule 13 (statement -> statement MINUS statement .)
    NOT_EQUAL       reduce using rule 13 (statement -> statement MINUS statement .)
    GREATER         reduce using rule 13 (statement -> statement MINUS statement .)
    LESS            reduce using rule 13 (statement -> statement MINUS statement .)
    GREATER_EQUAL   reduce using rule 13 (statement -> statement MINUS statement .)
    LESS_EQUAL      reduce using rule 13 (statement -> statement MINUS statement .)
    AND             reduce using rule 13 (statement -> statement MINUS statement .)
    OR              reduce using rule 13 (statement -> statement MINUS statement .)
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49

  ! PLUS            [ reduce using rule 13 (statement -> statement MINUS statement .) ]
  ! MINUS           [ reduce using rule 13 (statement -> statement MINUS statement .) ]
  ! TIMES           [ reduce using rule 13 (statement -> statement MINUS statement .) ]
  ! DIVIDE          [ reduce using rule 13 (statement -> statement MINUS statement .) ]


state 59

    (14) statement -> statement TIMES statement .
    (12) statement -> statement . PLUS statement
    (13) statement -> statement . MINUS statement
    (14) statement -> statement . TIMES statement
    (15) statement -> statement . DIVIDE statement

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    SEMICOLON       reduce using rule 14 (statement -> statement TIMES statement .)
    R_PAREN         reduce using rule 14 (statement -> statement TIMES statement .)
    EQUAL           reduce using rule 14 (statement -> statement TIMES statement .)
    NOT_EQUAL       reduce using rule 14 (statement -> statement TIMES statement .)
    GREATER         reduce using rule 14 (statement -> statement TIMES statement .)
    LESS            reduce using rule 14 (statement -> statement TIMES statement .)
    GREATER_EQUAL   reduce using rule 14 (statement -> statement TIMES statement .)
    LESS_EQUAL      reduce using rule 14 (statement -> statement TIMES statement .)
    AND             reduce using rule 14 (statement -> statement TIMES statement .)
    OR              reduce using rule 14 (statement -> statement TIMES statement .)
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49

  ! PLUS            [ reduce using rule 14 (statement -> statement TIMES statement .) ]
  ! MINUS           [ reduce using rule 14 (statement -> statement TIMES statement .) ]
  ! TIMES           [ reduce using rule 14 (statement -> statement TIMES statement .) ]
  ! DIVIDE          [ reduce using rule 14 (statement -> statement TIMES statement .) ]


state 60

    (15) statement -> statement DIVIDE statement .
    (12) statement -> statement . PLUS statement
    (13) statement -> statement . MINUS statement
    (14) statement -> statement . TIMES statement
    (15) statement -> statement . DIVIDE statement

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    SEMICOLON       reduce using rule 15 (statement -> statement DIVIDE statement .)
    R_PAREN         reduce using rule 15 (statement -> statement DIVIDE statement .)
    EQUAL           reduce using rule 15 (statement -> statement DIVIDE statement .)
    NOT_EQUAL       reduce using rule 15 (statement -> statement DIVIDE statement .)
    GREATER         reduce using rule 15 (statement -> statement DIVIDE statement .)
    LESS            reduce using rule 15 (statement -> statement DIVIDE statement .)
    GREATER_EQUAL   reduce using rule 15 (statement -> statement DIVIDE statement .)
    LESS_EQUAL      reduce using rule 15 (statement -> statement DIVIDE statement .)
    AND             reduce using rule 15 (statement -> statement DIVIDE statement .)
    OR              reduce using rule 15 (statement -> statement DIVIDE statement .)
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49

  ! PLUS            [ reduce using rule 15 (statement -> statement DIVIDE statement .) ]
  ! MINUS           [ reduce using rule 15 (statement -> statement DIVIDE statement .) ]
  ! TIMES           [ reduce using rule 15 (statement -> statement DIVIDE statement .) ]
  ! DIVIDE          [ reduce using rule 15 (statement -> statement DIVIDE statement .) ]


state 61

    (20) statement -> L_PAREN statement R_PAREN .

    PLUS            reduce using rule 20 (statement -> L_PAREN statement R_PAREN .)
    MINUS           reduce using rule 20 (statement -> L_PAREN statement R_PAREN .)
    TIMES           reduce using rule 20 (statement -> L_PAREN statement R_PAREN .)
    DIVIDE          reduce using rule 20 (statement -> L_PAREN statement R_PAREN .)
    SEMICOLON       reduce using rule 20 (statement -> L_PAREN statement R_PAREN .)
    R_PAREN         reduce using rule 20 (statement -> L_PAREN statement R_PAREN .)
    EQUAL           reduce using rule 20 (statement -> L_PAREN statement R_PAREN .)
    NOT_EQUAL       reduce using rule 20 (statement -> L_PAREN statement R_PAREN .)
    GREATER         reduce using rule 20 (statement -> L_PAREN statement R_PAREN .)
    LESS            reduce using rule 20 (statement -> L_PAREN statement R_PAREN .)
    GREATER_EQUAL   reduce using rule 20 (statement -> L_PAREN statement R_PAREN .)
    LESS_EQUAL      reduce using rule 20 (statement -> L_PAREN statement R_PAREN .)
    AND             reduce using rule 20 (statement -> L_PAREN statement R_PAREN .)
    OR              reduce using rule 20 (statement -> L_PAREN statement R_PAREN .)


state 62

    (21) statement -> L_PAREN conditional R_PAREN .

    PLUS            reduce using rule 21 (statement -> L_PAREN conditional R_PAREN .)
    MINUS           reduce using rule 21 (statement -> L_PAREN conditional R_PAREN .)
    TIMES           reduce using rule 21 (statement -> L_PAREN conditional R_PAREN .)
    DIVIDE          reduce using rule 21 (statement -> L_PAREN conditional R_PAREN .)
    SEMICOLON       reduce using rule 21 (statement -> L_PAREN conditional R_PAREN .)
    R_PAREN         reduce using rule 21 (statement -> L_PAREN conditional R_PAREN .)
    EQUAL           reduce using rule 21 (statement -> L_PAREN conditional R_PAREN .)
    NOT_EQUAL       reduce using rule 21 (statement -> L_PAREN conditional R_PAREN .)
    GREATER         reduce using rule 21 (statement -> L_PAREN conditional R_PAREN .)
    LESS            reduce using rule 21 (statement -> L_PAREN conditional R_PAREN .)
    GREATER_EQUAL   reduce using rule 21 (statement -> L_PAREN conditional R_PAREN .)
    LESS_EQUAL      reduce using rule 21 (statement -> L_PAREN conditional R_PAREN .)
    AND             reduce using rule 21 (statement -> L_PAREN conditional R_PAREN .)
    OR              reduce using rule 21 (statement -> L_PAREN conditional R_PAREN .)


state 63

    (24) conditional -> conditional EQUAL . conditional
    (24) conditional -> . conditional EQUAL conditional
    (25) conditional -> . conditional NOT_EQUAL conditional
    (26) conditional -> . conditional GREATER conditional
    (27) conditional -> . conditional LESS conditional
    (28) conditional -> . conditional GREATER_EQUAL conditional
    (29) conditional -> . conditional LESS_EQUAL conditional
    (30) conditional -> . conditional AND conditional
    (31) conditional -> . conditional OR conditional
    (32) conditional -> . TRUE
    (33) conditional -> . FALSE
    (34) conditional -> . statement
    (11) statement -> . IDENTIFIER
    (12) statement -> . statement PLUS statement
    (13) statement -> . statement MINUS statement
    (14) statement -> . statement TIMES statement
    (15) statement -> . statement DIVIDE statement
    (16) statement -> . INT
    (17) statement -> . FLOAT
    (18) statement -> . BOOL
    (19) statement -> . STRING
    (20) statement -> . L_PAREN statement R_PAREN
    (21) statement -> . L_PAREN conditional R_PAREN
    (22) statement -> . IDENTIFIER INCREMENT
    (23) statement -> . IDENTIFIER DECREMENT

    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    IDENTIFIER      shift and go to state 33
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    L_PAREN         shift and go to state 39

    conditional                    shift and go to state 73
    statement                      shift and go to state 72

state 64

    (25) conditional -> conditional NOT_EQUAL . conditional
    (24) conditional -> . conditional EQUAL conditional
    (25) conditional -> . conditional NOT_EQUAL conditional
    (26) conditional -> . conditional GREATER conditional
    (27) conditional -> . conditional LESS conditional
    (28) conditional -> . conditional GREATER_EQUAL conditional
    (29) conditional -> . conditional LESS_EQUAL conditional
    (30) conditional -> . conditional AND conditional
    (31) conditional -> . conditional OR conditional
    (32) conditional -> . TRUE
    (33) conditional -> . FALSE
    (34) conditional -> . statement
    (11) statement -> . IDENTIFIER
    (12) statement -> . statement PLUS statement
    (13) statement -> . statement MINUS statement
    (14) statement -> . statement TIMES statement
    (15) statement -> . statement DIVIDE statement
    (16) statement -> . INT
    (17) statement -> . FLOAT
    (18) statement -> . BOOL
    (19) statement -> . STRING
    (20) statement -> . L_PAREN statement R_PAREN
    (21) statement -> . L_PAREN conditional R_PAREN
    (22) statement -> . IDENTIFIER INCREMENT
    (23) statement -> . IDENTIFIER DECREMENT

    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    IDENTIFIER      shift and go to state 33
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    L_PAREN         shift and go to state 39

    conditional                    shift and go to state 74
    statement                      shift and go to state 72

state 65

    (26) conditional -> conditional GREATER . conditional
    (24) conditional -> . conditional EQUAL conditional
    (25) conditional -> . conditional NOT_EQUAL conditional
    (26) conditional -> . conditional GREATER conditional
    (27) conditional -> . conditional LESS conditional
    (28) conditional -> . conditional GREATER_EQUAL conditional
    (29) conditional -> . conditional LESS_EQUAL conditional
    (30) conditional -> . conditional AND conditional
    (31) conditional -> . conditional OR conditional
    (32) conditional -> . TRUE
    (33) conditional -> . FALSE
    (34) conditional -> . statement
    (11) statement -> . IDENTIFIER
    (12) statement -> . statement PLUS statement
    (13) statement -> . statement MINUS statement
    (14) statement -> . statement TIMES statement
    (15) statement -> . statement DIVIDE statement
    (16) statement -> . INT
    (17) statement -> . FLOAT
    (18) statement -> . BOOL
    (19) statement -> . STRING
    (20) statement -> . L_PAREN statement R_PAREN
    (21) statement -> . L_PAREN conditional R_PAREN
    (22) statement -> . IDENTIFIER INCREMENT
    (23) statement -> . IDENTIFIER DECREMENT

    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    IDENTIFIER      shift and go to state 33
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    L_PAREN         shift and go to state 39

    conditional                    shift and go to state 75
    statement                      shift and go to state 72

state 66

    (27) conditional -> conditional LESS . conditional
    (24) conditional -> . conditional EQUAL conditional
    (25) conditional -> . conditional NOT_EQUAL conditional
    (26) conditional -> . conditional GREATER conditional
    (27) conditional -> . conditional LESS conditional
    (28) conditional -> . conditional GREATER_EQUAL conditional
    (29) conditional -> . conditional LESS_EQUAL conditional
    (30) conditional -> . conditional AND conditional
    (31) conditional -> . conditional OR conditional
    (32) conditional -> . TRUE
    (33) conditional -> . FALSE
    (34) conditional -> . statement
    (11) statement -> . IDENTIFIER
    (12) statement -> . statement PLUS statement
    (13) statement -> . statement MINUS statement
    (14) statement -> . statement TIMES statement
    (15) statement -> . statement DIVIDE statement
    (16) statement -> . INT
    (17) statement -> . FLOAT
    (18) statement -> . BOOL
    (19) statement -> . STRING
    (20) statement -> . L_PAREN statement R_PAREN
    (21) statement -> . L_PAREN conditional R_PAREN
    (22) statement -> . IDENTIFIER INCREMENT
    (23) statement -> . IDENTIFIER DECREMENT

    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    IDENTIFIER      shift and go to state 33
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    L_PAREN         shift and go to state 39

    conditional                    shift and go to state 76
    statement                      shift and go to state 72

state 67

    (28) conditional -> conditional GREATER_EQUAL . conditional
    (24) conditional -> . conditional EQUAL conditional
    (25) conditional -> . conditional NOT_EQUAL conditional
    (26) conditional -> . conditional GREATER conditional
    (27) conditional -> . conditional LESS conditional
    (28) conditional -> . conditional GREATER_EQUAL conditional
    (29) conditional -> . conditional LESS_EQUAL conditional
    (30) conditional -> . conditional AND conditional
    (31) conditional -> . conditional OR conditional
    (32) conditional -> . TRUE
    (33) conditional -> . FALSE
    (34) conditional -> . statement
    (11) statement -> . IDENTIFIER
    (12) statement -> . statement PLUS statement
    (13) statement -> . statement MINUS statement
    (14) statement -> . statement TIMES statement
    (15) statement -> . statement DIVIDE statement
    (16) statement -> . INT
    (17) statement -> . FLOAT
    (18) statement -> . BOOL
    (19) statement -> . STRING
    (20) statement -> . L_PAREN statement R_PAREN
    (21) statement -> . L_PAREN conditional R_PAREN
    (22) statement -> . IDENTIFIER INCREMENT
    (23) statement -> . IDENTIFIER DECREMENT

    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    IDENTIFIER      shift and go to state 33
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    L_PAREN         shift and go to state 39

    conditional                    shift and go to state 77
    statement                      shift and go to state 72

state 68

    (29) conditional -> conditional LESS_EQUAL . conditional
    (24) conditional -> . conditional EQUAL conditional
    (25) conditional -> . conditional NOT_EQUAL conditional
    (26) conditional -> . conditional GREATER conditional
    (27) conditional -> . conditional LESS conditional
    (28) conditional -> . conditional GREATER_EQUAL conditional
    (29) conditional -> . conditional LESS_EQUAL conditional
    (30) conditional -> . conditional AND conditional
    (31) conditional -> . conditional OR conditional
    (32) conditional -> . TRUE
    (33) conditional -> . FALSE
    (34) conditional -> . statement
    (11) statement -> . IDENTIFIER
    (12) statement -> . statement PLUS statement
    (13) statement -> . statement MINUS statement
    (14) statement -> . statement TIMES statement
    (15) statement -> . statement DIVIDE statement
    (16) statement -> . INT
    (17) statement -> . FLOAT
    (18) statement -> . BOOL
    (19) statement -> . STRING
    (20) statement -> . L_PAREN statement R_PAREN
    (21) statement -> . L_PAREN conditional R_PAREN
    (22) statement -> . IDENTIFIER INCREMENT
    (23) statement -> . IDENTIFIER DECREMENT

    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    IDENTIFIER      shift and go to state 33
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    L_PAREN         shift and go to state 39

    conditional                    shift and go to state 78
    statement                      shift and go to state 72

state 69

    (30) conditional -> conditional AND . conditional
    (24) conditional -> . conditional EQUAL conditional
    (25) conditional -> . conditional NOT_EQUAL conditional
    (26) conditional -> . conditional GREATER conditional
    (27) conditional -> . conditional LESS conditional
    (28) conditional -> . conditional GREATER_EQUAL conditional
    (29) conditional -> . conditional LESS_EQUAL conditional
    (30) conditional -> . conditional AND conditional
    (31) conditional -> . conditional OR conditional
    (32) conditional -> . TRUE
    (33) conditional -> . FALSE
    (34) conditional -> . statement
    (11) statement -> . IDENTIFIER
    (12) statement -> . statement PLUS statement
    (13) statement -> . statement MINUS statement
    (14) statement -> . statement TIMES statement
    (15) statement -> . statement DIVIDE statement
    (16) statement -> . INT
    (17) statement -> . FLOAT
    (18) statement -> . BOOL
    (19) statement -> . STRING
    (20) statement -> . L_PAREN statement R_PAREN
    (21) statement -> . L_PAREN conditional R_PAREN
    (22) statement -> . IDENTIFIER INCREMENT
    (23) statement -> . IDENTIFIER DECREMENT

    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    IDENTIFIER      shift and go to state 33
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    L_PAREN         shift and go to state 39

    conditional                    shift and go to state 79
    statement                      shift and go to state 72

state 70

    (31) conditional -> conditional OR . conditional
    (24) conditional -> . conditional EQUAL conditional
    (25) conditional -> . conditional NOT_EQUAL conditional
    (26) conditional -> . conditional GREATER conditional
    (27) conditional -> . conditional LESS conditional
    (28) conditional -> . conditional GREATER_EQUAL conditional
    (29) conditional -> . conditional LESS_EQUAL conditional
    (30) conditional -> . conditional AND conditional
    (31) conditional -> . conditional OR conditional
    (32) conditional -> . TRUE
    (33) conditional -> . FALSE
    (34) conditional -> . statement
    (11) statement -> . IDENTIFIER
    (12) statement -> . statement PLUS statement
    (13) statement -> . statement MINUS statement
    (14) statement -> . statement TIMES statement
    (15) statement -> . statement DIVIDE statement
    (16) statement -> . INT
    (17) statement -> . FLOAT
    (18) statement -> . BOOL
    (19) statement -> . STRING
    (20) statement -> . L_PAREN statement R_PAREN
    (21) statement -> . L_PAREN conditional R_PAREN
    (22) statement -> . IDENTIFIER INCREMENT
    (23) statement -> . IDENTIFIER DECREMENT

    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    IDENTIFIER      shift and go to state 33
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    L_PAREN         shift and go to state 39

    conditional                    shift and go to state 80
    statement                      shift and go to state 72

state 71

    (35) for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional . SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE
    (24) conditional -> conditional . EQUAL conditional
    (25) conditional -> conditional . NOT_EQUAL conditional
    (26) conditional -> conditional . GREATER conditional
    (27) conditional -> conditional . LESS conditional
    (28) conditional -> conditional . GREATER_EQUAL conditional
    (29) conditional -> conditional . LESS_EQUAL conditional
    (30) conditional -> conditional . AND conditional
    (31) conditional -> conditional . OR conditional

    SEMICOLON       shift and go to state 81
    EQUAL           shift and go to state 63
    NOT_EQUAL       shift and go to state 64
    GREATER         shift and go to state 65
    LESS            shift and go to state 66
    GREATER_EQUAL   shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    AND             shift and go to state 69
    OR              shift and go to state 70


state 72

    (34) conditional -> statement .
    (12) statement -> statement . PLUS statement
    (13) statement -> statement . MINUS statement
    (14) statement -> statement . TIMES statement
    (15) statement -> statement . DIVIDE statement

    SEMICOLON       reduce using rule 34 (conditional -> statement .)
    EQUAL           reduce using rule 34 (conditional -> statement .)
    NOT_EQUAL       reduce using rule 34 (conditional -> statement .)
    GREATER         reduce using rule 34 (conditional -> statement .)
    LESS            reduce using rule 34 (conditional -> statement .)
    GREATER_EQUAL   reduce using rule 34 (conditional -> statement .)
    LESS_EQUAL      reduce using rule 34 (conditional -> statement .)
    AND             reduce using rule 34 (conditional -> statement .)
    OR              reduce using rule 34 (conditional -> statement .)
    R_PAREN         reduce using rule 34 (conditional -> statement .)
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49


state 73

    (24) conditional -> conditional EQUAL conditional .
    (24) conditional -> conditional . EQUAL conditional
    (25) conditional -> conditional . NOT_EQUAL conditional
    (26) conditional -> conditional . GREATER conditional
    (27) conditional -> conditional . LESS conditional
    (28) conditional -> conditional . GREATER_EQUAL conditional
    (29) conditional -> conditional . LESS_EQUAL conditional
    (30) conditional -> conditional . AND conditional
    (31) conditional -> conditional . OR conditional

  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    R_PAREN         reduce using rule 24 (conditional -> conditional EQUAL conditional .)
    SEMICOLON       reduce using rule 24 (conditional -> conditional EQUAL conditional .)
    EQUAL           shift and go to state 63
    NOT_EQUAL       shift and go to state 64
    GREATER         shift and go to state 65
    LESS            shift and go to state 66
    GREATER_EQUAL   shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    AND             shift and go to state 69
    OR              shift and go to state 70

  ! EQUAL           [ reduce using rule 24 (conditional -> conditional EQUAL conditional .) ]
  ! NOT_EQUAL       [ reduce using rule 24 (conditional -> conditional EQUAL conditional .) ]
  ! GREATER         [ reduce using rule 24 (conditional -> conditional EQUAL conditional .) ]
  ! LESS            [ reduce using rule 24 (conditional -> conditional EQUAL conditional .) ]
  ! GREATER_EQUAL   [ reduce using rule 24 (conditional -> conditional EQUAL conditional .) ]
  ! LESS_EQUAL      [ reduce using rule 24 (conditional -> conditional EQUAL conditional .) ]
  ! AND             [ reduce using rule 24 (conditional -> conditional EQUAL conditional .) ]
  ! OR              [ reduce using rule 24 (conditional -> conditional EQUAL conditional .) ]


state 74

    (25) conditional -> conditional NOT_EQUAL conditional .
    (24) conditional -> conditional . EQUAL conditional
    (25) conditional -> conditional . NOT_EQUAL conditional
    (26) conditional -> conditional . GREATER conditional
    (27) conditional -> conditional . LESS conditional
    (28) conditional -> conditional . GREATER_EQUAL conditional
    (29) conditional -> conditional . LESS_EQUAL conditional
    (30) conditional -> conditional . AND conditional
    (31) conditional -> conditional . OR conditional

  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    R_PAREN         reduce using rule 25 (conditional -> conditional NOT_EQUAL conditional .)
    SEMICOLON       reduce using rule 25 (conditional -> conditional NOT_EQUAL conditional .)
    EQUAL           shift and go to state 63
    NOT_EQUAL       shift and go to state 64
    GREATER         shift and go to state 65
    LESS            shift and go to state 66
    GREATER_EQUAL   shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    AND             shift and go to state 69
    OR              shift and go to state 70

  ! EQUAL           [ reduce using rule 25 (conditional -> conditional NOT_EQUAL conditional .) ]
  ! NOT_EQUAL       [ reduce using rule 25 (conditional -> conditional NOT_EQUAL conditional .) ]
  ! GREATER         [ reduce using rule 25 (conditional -> conditional NOT_EQUAL conditional .) ]
  ! LESS            [ reduce using rule 25 (conditional -> conditional NOT_EQUAL conditional .) ]
  ! GREATER_EQUAL   [ reduce using rule 25 (conditional -> conditional NOT_EQUAL conditional .) ]
  ! LESS_EQUAL      [ reduce using rule 25 (conditional -> conditional NOT_EQUAL conditional .) ]
  ! AND             [ reduce using rule 25 (conditional -> conditional NOT_EQUAL conditional .) ]
  ! OR              [ reduce using rule 25 (conditional -> conditional NOT_EQUAL conditional .) ]


state 75

    (26) conditional -> conditional GREATER conditional .
    (24) conditional -> conditional . EQUAL conditional
    (25) conditional -> conditional . NOT_EQUAL conditional
    (26) conditional -> conditional . GREATER conditional
    (27) conditional -> conditional . LESS conditional
    (28) conditional -> conditional . GREATER_EQUAL conditional
    (29) conditional -> conditional . LESS_EQUAL conditional
    (30) conditional -> conditional . AND conditional
    (31) conditional -> conditional . OR conditional

  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    R_PAREN         reduce using rule 26 (conditional -> conditional GREATER conditional .)
    SEMICOLON       reduce using rule 26 (conditional -> conditional GREATER conditional .)
    EQUAL           shift and go to state 63
    NOT_EQUAL       shift and go to state 64
    GREATER         shift and go to state 65
    LESS            shift and go to state 66
    GREATER_EQUAL   shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    AND             shift and go to state 69
    OR              shift and go to state 70

  ! EQUAL           [ reduce using rule 26 (conditional -> conditional GREATER conditional .) ]
  ! NOT_EQUAL       [ reduce using rule 26 (conditional -> conditional GREATER conditional .) ]
  ! GREATER         [ reduce using rule 26 (conditional -> conditional GREATER conditional .) ]
  ! LESS            [ reduce using rule 26 (conditional -> conditional GREATER conditional .) ]
  ! GREATER_EQUAL   [ reduce using rule 26 (conditional -> conditional GREATER conditional .) ]
  ! LESS_EQUAL      [ reduce using rule 26 (conditional -> conditional GREATER conditional .) ]
  ! AND             [ reduce using rule 26 (conditional -> conditional GREATER conditional .) ]
  ! OR              [ reduce using rule 26 (conditional -> conditional GREATER conditional .) ]


state 76

    (27) conditional -> conditional LESS conditional .
    (24) conditional -> conditional . EQUAL conditional
    (25) conditional -> conditional . NOT_EQUAL conditional
    (26) conditional -> conditional . GREATER conditional
    (27) conditional -> conditional . LESS conditional
    (28) conditional -> conditional . GREATER_EQUAL conditional
    (29) conditional -> conditional . LESS_EQUAL conditional
    (30) conditional -> conditional . AND conditional
    (31) conditional -> conditional . OR conditional

  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    R_PAREN         reduce using rule 27 (conditional -> conditional LESS conditional .)
    SEMICOLON       reduce using rule 27 (conditional -> conditional LESS conditional .)
    EQUAL           shift and go to state 63
    NOT_EQUAL       shift and go to state 64
    GREATER         shift and go to state 65
    LESS            shift and go to state 66
    GREATER_EQUAL   shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    AND             shift and go to state 69
    OR              shift and go to state 70

  ! EQUAL           [ reduce using rule 27 (conditional -> conditional LESS conditional .) ]
  ! NOT_EQUAL       [ reduce using rule 27 (conditional -> conditional LESS conditional .) ]
  ! GREATER         [ reduce using rule 27 (conditional -> conditional LESS conditional .) ]
  ! LESS            [ reduce using rule 27 (conditional -> conditional LESS conditional .) ]
  ! GREATER_EQUAL   [ reduce using rule 27 (conditional -> conditional LESS conditional .) ]
  ! LESS_EQUAL      [ reduce using rule 27 (conditional -> conditional LESS conditional .) ]
  ! AND             [ reduce using rule 27 (conditional -> conditional LESS conditional .) ]
  ! OR              [ reduce using rule 27 (conditional -> conditional LESS conditional .) ]


state 77

    (28) conditional -> conditional GREATER_EQUAL conditional .
    (24) conditional -> conditional . EQUAL conditional
    (25) conditional -> conditional . NOT_EQUAL conditional
    (26) conditional -> conditional . GREATER conditional
    (27) conditional -> conditional . LESS conditional
    (28) conditional -> conditional . GREATER_EQUAL conditional
    (29) conditional -> conditional . LESS_EQUAL conditional
    (30) conditional -> conditional . AND conditional
    (31) conditional -> conditional . OR conditional

  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    R_PAREN         reduce using rule 28 (conditional -> conditional GREATER_EQUAL conditional .)
    SEMICOLON       reduce using rule 28 (conditional -> conditional GREATER_EQUAL conditional .)
    EQUAL           shift and go to state 63
    NOT_EQUAL       shift and go to state 64
    GREATER         shift and go to state 65
    LESS            shift and go to state 66
    GREATER_EQUAL   shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    AND             shift and go to state 69
    OR              shift and go to state 70

  ! EQUAL           [ reduce using rule 28 (conditional -> conditional GREATER_EQUAL conditional .) ]
  ! NOT_EQUAL       [ reduce using rule 28 (conditional -> conditional GREATER_EQUAL conditional .) ]
  ! GREATER         [ reduce using rule 28 (conditional -> conditional GREATER_EQUAL conditional .) ]
  ! LESS            [ reduce using rule 28 (conditional -> conditional GREATER_EQUAL conditional .) ]
  ! GREATER_EQUAL   [ reduce using rule 28 (conditional -> conditional GREATER_EQUAL conditional .) ]
  ! LESS_EQUAL      [ reduce using rule 28 (conditional -> conditional GREATER_EQUAL conditional .) ]
  ! AND             [ reduce using rule 28 (conditional -> conditional GREATER_EQUAL conditional .) ]
  ! OR              [ reduce using rule 28 (conditional -> conditional GREATER_EQUAL conditional .) ]


state 78

    (29) conditional -> conditional LESS_EQUAL conditional .
    (24) conditional -> conditional . EQUAL conditional
    (25) conditional -> conditional . NOT_EQUAL conditional
    (26) conditional -> conditional . GREATER conditional
    (27) conditional -> conditional . LESS conditional
    (28) conditional -> conditional . GREATER_EQUAL conditional
    (29) conditional -> conditional . LESS_EQUAL conditional
    (30) conditional -> conditional . AND conditional
    (31) conditional -> conditional . OR conditional

  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    R_PAREN         reduce using rule 29 (conditional -> conditional LESS_EQUAL conditional .)
    SEMICOLON       reduce using rule 29 (conditional -> conditional LESS_EQUAL conditional .)
    EQUAL           shift and go to state 63
    NOT_EQUAL       shift and go to state 64
    GREATER         shift and go to state 65
    LESS            shift and go to state 66
    GREATER_EQUAL   shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    AND             shift and go to state 69
    OR              shift and go to state 70

  ! EQUAL           [ reduce using rule 29 (conditional -> conditional LESS_EQUAL conditional .) ]
  ! NOT_EQUAL       [ reduce using rule 29 (conditional -> conditional LESS_EQUAL conditional .) ]
  ! GREATER         [ reduce using rule 29 (conditional -> conditional LESS_EQUAL conditional .) ]
  ! LESS            [ reduce using rule 29 (conditional -> conditional LESS_EQUAL conditional .) ]
  ! GREATER_EQUAL   [ reduce using rule 29 (conditional -> conditional LESS_EQUAL conditional .) ]
  ! LESS_EQUAL      [ reduce using rule 29 (conditional -> conditional LESS_EQUAL conditional .) ]
  ! AND             [ reduce using rule 29 (conditional -> conditional LESS_EQUAL conditional .) ]
  ! OR              [ reduce using rule 29 (conditional -> conditional LESS_EQUAL conditional .) ]


state 79

    (30) conditional -> conditional AND conditional .
    (24) conditional -> conditional . EQUAL conditional
    (25) conditional -> conditional . NOT_EQUAL conditional
    (26) conditional -> conditional . GREATER conditional
    (27) conditional -> conditional . LESS conditional
    (28) conditional -> conditional . GREATER_EQUAL conditional
    (29) conditional -> conditional . LESS_EQUAL conditional
    (30) conditional -> conditional . AND conditional
    (31) conditional -> conditional . OR conditional

  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    R_PAREN         reduce using rule 30 (conditional -> conditional AND conditional .)
    SEMICOLON       reduce using rule 30 (conditional -> conditional AND conditional .)
    EQUAL           shift and go to state 63
    NOT_EQUAL       shift and go to state 64
    GREATER         shift and go to state 65
    LESS            shift and go to state 66
    GREATER_EQUAL   shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    AND             shift and go to state 69
    OR              shift and go to state 70

  ! EQUAL           [ reduce using rule 30 (conditional -> conditional AND conditional .) ]
  ! NOT_EQUAL       [ reduce using rule 30 (conditional -> conditional AND conditional .) ]
  ! GREATER         [ reduce using rule 30 (conditional -> conditional AND conditional .) ]
  ! LESS            [ reduce using rule 30 (conditional -> conditional AND conditional .) ]
  ! GREATER_EQUAL   [ reduce using rule 30 (conditional -> conditional AND conditional .) ]
  ! LESS_EQUAL      [ reduce using rule 30 (conditional -> conditional AND conditional .) ]
  ! AND             [ reduce using rule 30 (conditional -> conditional AND conditional .) ]
  ! OR              [ reduce using rule 30 (conditional -> conditional AND conditional .) ]


state 80

    (31) conditional -> conditional OR conditional .
    (24) conditional -> conditional . EQUAL conditional
    (25) conditional -> conditional . NOT_EQUAL conditional
    (26) conditional -> conditional . GREATER conditional
    (27) conditional -> conditional . LESS conditional
    (28) conditional -> conditional . GREATER_EQUAL conditional
    (29) conditional -> conditional . LESS_EQUAL conditional
    (30) conditional -> conditional . AND conditional
    (31) conditional -> conditional . OR conditional

  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    R_PAREN         reduce using rule 31 (conditional -> conditional OR conditional .)
    SEMICOLON       reduce using rule 31 (conditional -> conditional OR conditional .)
    EQUAL           shift and go to state 63
    NOT_EQUAL       shift and go to state 64
    GREATER         shift and go to state 65
    LESS            shift and go to state 66
    GREATER_EQUAL   shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    AND             shift and go to state 69
    OR              shift and go to state 70

  ! EQUAL           [ reduce using rule 31 (conditional -> conditional OR conditional .) ]
  ! NOT_EQUAL       [ reduce using rule 31 (conditional -> conditional OR conditional .) ]
  ! GREATER         [ reduce using rule 31 (conditional -> conditional OR conditional .) ]
  ! LESS            [ reduce using rule 31 (conditional -> conditional OR conditional .) ]
  ! GREATER_EQUAL   [ reduce using rule 31 (conditional -> conditional OR conditional .) ]
  ! LESS_EQUAL      [ reduce using rule 31 (conditional -> conditional OR conditional .) ]
  ! AND             [ reduce using rule 31 (conditional -> conditional OR conditional .) ]
  ! OR              [ reduce using rule 31 (conditional -> conditional OR conditional .) ]


state 81

    (35) for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON . statement R_PAREN L_BRACE expressions R_BRACE
    (11) statement -> . IDENTIFIER
    (12) statement -> . statement PLUS statement
    (13) statement -> . statement MINUS statement
    (14) statement -> . statement TIMES statement
    (15) statement -> . statement DIVIDE statement
    (16) statement -> . INT
    (17) statement -> . FLOAT
    (18) statement -> . BOOL
    (19) statement -> . STRING
    (20) statement -> . L_PAREN statement R_PAREN
    (21) statement -> . L_PAREN conditional R_PAREN
    (22) statement -> . IDENTIFIER INCREMENT
    (23) statement -> . IDENTIFIER DECREMENT

    IDENTIFIER      shift and go to state 33
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    L_PAREN         shift and go to state 39

    statement                      shift and go to state 82

state 82

    (35) for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement . R_PAREN L_BRACE expressions R_BRACE
    (12) statement -> statement . PLUS statement
    (13) statement -> statement . MINUS statement
    (14) statement -> statement . TIMES statement
    (15) statement -> statement . DIVIDE statement

    R_PAREN         shift and go to state 83
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49


state 83

    (35) for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN . L_BRACE expressions R_BRACE

    L_BRACE         shift and go to state 84


state 84

    (35) for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE . expressions R_BRACE
    (2) expressions -> . expressions expression
    (3) expressions -> . expression
    (4) expression -> . var_declaration SEMICOLON
    (5) expression -> . write SEMICOLON
    (6) expression -> . writeln SEMICOLON
    (7) expression -> . for_loop
    (8) expression -> . empty
    (36) var_declaration -> . data_type declarations
    (43) var_declaration -> . IDENTIFIER ASSIGN statement
    (9) write -> . WRITE L_PAREN statement R_PAREN
    (10) writeln -> . WRITELN L_PAREN statement R_PAREN
    (35) for_loop -> . FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE
    (44) empty -> .
    (37) data_type -> . INT
    (38) data_type -> . FLOAT
    (39) data_type -> . BOOL
    (40) data_type -> . STRING

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    IDENTIFIER      shift and go to state 13
    WRITE           shift and go to state 14
    WRITELN         shift and go to state 15
    FOR             shift and go to state 16
    R_BRACE         reduce using rule 44 (empty -> .)
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    BOOL            shift and go to state 19
    STRING          shift and go to state 20

  ! IDENTIFIER      [ reduce using rule 44 (empty -> .) ]
  ! WRITE           [ reduce using rule 44 (empty -> .) ]
  ! WRITELN         [ reduce using rule 44 (empty -> .) ]
  ! FOR             [ reduce using rule 44 (empty -> .) ]
  ! INT             [ reduce using rule 44 (empty -> .) ]
  ! FLOAT           [ reduce using rule 44 (empty -> .) ]
  ! BOOL            [ reduce using rule 44 (empty -> .) ]
  ! STRING          [ reduce using rule 44 (empty -> .) ]

    var_declaration                shift and go to state 7
    expressions                    shift and go to state 85
    expression                     shift and go to state 6
    write                          shift and go to state 8
    writeln                        shift and go to state 9
    for_loop                       shift and go to state 10
    empty                          shift and go to state 11
    data_type                      shift and go to state 12

state 85

    (35) for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions . R_BRACE
    (2) expressions -> expressions . expression
    (4) expression -> . var_declaration SEMICOLON
    (5) expression -> . write SEMICOLON
    (6) expression -> . writeln SEMICOLON
    (7) expression -> . for_loop
    (8) expression -> . empty
    (36) var_declaration -> . data_type declarations
    (43) var_declaration -> . IDENTIFIER ASSIGN statement
    (9) write -> . WRITE L_PAREN statement R_PAREN
    (10) writeln -> . WRITELN L_PAREN statement R_PAREN
    (35) for_loop -> . FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE
    (44) empty -> .
    (37) data_type -> . INT
    (38) data_type -> . FLOAT
    (39) data_type -> . BOOL
    (40) data_type -> . STRING

  ! shift/reduce conflict for R_BRACE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    R_BRACE         shift and go to state 86
    IDENTIFIER      shift and go to state 13
    WRITE           shift and go to state 14
    WRITELN         shift and go to state 15
    FOR             shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    BOOL            shift and go to state 19
    STRING          shift and go to state 20

  ! R_BRACE         [ reduce using rule 44 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 44 (empty -> .) ]
  ! WRITE           [ reduce using rule 44 (empty -> .) ]
  ! WRITELN         [ reduce using rule 44 (empty -> .) ]
  ! FOR             [ reduce using rule 44 (empty -> .) ]
  ! INT             [ reduce using rule 44 (empty -> .) ]
  ! FLOAT           [ reduce using rule 44 (empty -> .) ]
  ! BOOL            [ reduce using rule 44 (empty -> .) ]
  ! STRING          [ reduce using rule 44 (empty -> .) ]

    var_declaration                shift and go to state 7
    expression                     shift and go to state 22
    write                          shift and go to state 8
    writeln                        shift and go to state 9
    for_loop                       shift and go to state 10
    empty                          shift and go to state 11
    data_type                      shift and go to state 12

state 86

    (35) for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE .

    R_BRACE         reduce using rule 35 (for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE .)
    IDENTIFIER      reduce using rule 35 (for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE .)
    WRITE           reduce using rule 35 (for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE .)
    WRITELN         reduce using rule 35 (for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE .)
    FOR             reduce using rule 35 (for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE .)
    INT             reduce using rule 35 (for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE .)
    FLOAT           reduce using rule 35 (for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE .)
    BOOL            reduce using rule 35 (for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE .)
    STRING          reduce using rule 35 (for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IDENTIFIER in state 4 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 4 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 4 resolved as shift
WARNING: shift/reduce conflict for FOR in state 4 resolved as shift
WARNING: shift/reduce conflict for INT in state 4 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 4 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 4 resolved as shift
WARNING: shift/reduce conflict for STRING in state 4 resolved as shift
WARNING: shift/reduce conflict for R_BRACE in state 5 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 5 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 5 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 5 resolved as shift
WARNING: shift/reduce conflict for FOR in state 5 resolved as shift
WARNING: shift/reduce conflict for INT in state 5 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 5 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 5 resolved as shift
WARNING: shift/reduce conflict for STRING in state 5 resolved as shift
WARNING: shift/reduce conflict for R_PAREN in state 50 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 57 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 57 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 57 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 57 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 58 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 58 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 58 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 58 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 59 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 59 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 59 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 59 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 60 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 60 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 60 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 60 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 73 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 73 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 73 resolved as shift
WARNING: shift/reduce conflict for LESS in state 73 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 73 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 73 resolved as shift
WARNING: shift/reduce conflict for AND in state 73 resolved as shift
WARNING: shift/reduce conflict for OR in state 73 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 74 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 74 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 74 resolved as shift
WARNING: shift/reduce conflict for LESS in state 74 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 74 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 74 resolved as shift
WARNING: shift/reduce conflict for AND in state 74 resolved as shift
WARNING: shift/reduce conflict for OR in state 74 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 75 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 75 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 75 resolved as shift
WARNING: shift/reduce conflict for LESS in state 75 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 75 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 75 resolved as shift
WARNING: shift/reduce conflict for AND in state 75 resolved as shift
WARNING: shift/reduce conflict for OR in state 75 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 76 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 76 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 76 resolved as shift
WARNING: shift/reduce conflict for LESS in state 76 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 76 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 76 resolved as shift
WARNING: shift/reduce conflict for AND in state 76 resolved as shift
WARNING: shift/reduce conflict for OR in state 76 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 77 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 77 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 77 resolved as shift
WARNING: shift/reduce conflict for LESS in state 77 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 77 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 77 resolved as shift
WARNING: shift/reduce conflict for AND in state 77 resolved as shift
WARNING: shift/reduce conflict for OR in state 77 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 78 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 78 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 78 resolved as shift
WARNING: shift/reduce conflict for LESS in state 78 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 78 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 78 resolved as shift
WARNING: shift/reduce conflict for AND in state 78 resolved as shift
WARNING: shift/reduce conflict for OR in state 78 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 79 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 79 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 79 resolved as shift
WARNING: shift/reduce conflict for LESS in state 79 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 79 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 79 resolved as shift
WARNING: shift/reduce conflict for AND in state 79 resolved as shift
WARNING: shift/reduce conflict for OR in state 79 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 80 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 80 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 80 resolved as shift
WARNING: shift/reduce conflict for LESS in state 80 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 80 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 80 resolved as shift
WARNING: shift/reduce conflict for AND in state 80 resolved as shift
WARNING: shift/reduce conflict for OR in state 80 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 84 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 84 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 84 resolved as shift
WARNING: shift/reduce conflict for FOR in state 84 resolved as shift
WARNING: shift/reduce conflict for INT in state 84 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 84 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 84 resolved as shift
WARNING: shift/reduce conflict for STRING in state 84 resolved as shift
WARNING: shift/reduce conflict for R_BRACE in state 85 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 85 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 85 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 85 resolved as shift
WARNING: shift/reduce conflict for FOR in state 85 resolved as shift
WARNING: shift/reduce conflict for INT in state 85 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 85 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 85 resolved as shift
WARNING: shift/reduce conflict for STRING in state 85 resolved as shift
