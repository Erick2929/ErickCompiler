Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CHAR
    COLON
    DOUBLE
    LOGICAL_NOT
    L_BRACKET
    NOT
    RETURN
    R_BRACKET

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM MAIN L_BRACE expressions R_BRACE
Rule 2     expressions -> expressions expression
Rule 3     expressions -> expression
Rule 4     expression -> var_declaration SEMICOLON
Rule 5     expression -> write SEMICOLON
Rule 6     expression -> writeln SEMICOLON
Rule 7     expression -> statement SEMICOLON
Rule 8     expression -> if_else_statement
Rule 9     expression -> for_loop
Rule 10    expression -> while_loop
Rule 11    expression -> empty
Rule 12    write -> WRITE L_PAREN statement R_PAREN
Rule 13    writeln -> WRITELN L_PAREN statement R_PAREN
Rule 14    statement -> IDENTIFIER
Rule 15    statement -> statement PLUS statement
Rule 16    statement -> statement MINUS statement
Rule 17    statement -> statement TIMES statement
Rule 18    statement -> statement DIVIDE statement
Rule 19    statement -> statement MODULO statement
Rule 20    statement -> statement EQUAL statement
Rule 21    statement -> statement NOT_EQUAL statement
Rule 22    statement -> statement GREATER statement
Rule 23    statement -> statement LESS statement
Rule 24    statement -> statement GREATER_EQUAL statement
Rule 25    statement -> statement LESS_EQUAL statement
Rule 26    statement -> statement AND statement
Rule 27    statement -> statement OR statement
Rule 28    statement -> statement LOGICAL_AND statement
Rule 29    statement -> statement LOGICAL_OR statement
Rule 30    statement -> INT
Rule 31    statement -> FLOAT
Rule 32    statement -> BOOL
Rule 33    statement -> STRING
Rule 34    statement -> L_PAREN statement R_PAREN
Rule 35    statement -> L_PAREN conditional R_PAREN
Rule 36    statement -> IDENTIFIER INCREMENT
Rule 37    statement -> IDENTIFIER DECREMENT
Rule 38    conditional -> conditional EQUAL conditional
Rule 39    conditional -> conditional NOT_EQUAL conditional
Rule 40    conditional -> conditional GREATER conditional
Rule 41    conditional -> conditional LESS conditional
Rule 42    conditional -> conditional GREATER_EQUAL conditional
Rule 43    conditional -> conditional LESS_EQUAL conditional
Rule 44    conditional -> conditional AND conditional
Rule 45    conditional -> conditional LOGICAL_AND conditional
Rule 46    conditional -> conditional OR conditional
Rule 47    conditional -> conditional LOGICAL_OR conditional
Rule 48    conditional -> statement
Rule 49    for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE
Rule 50    while_loop -> WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE
Rule 51    if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE
Rule 52    if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE
Rule 53    var_declaration -> data_type declarations
Rule 54    data_type -> INT
Rule 55    data_type -> FLOAT
Rule 56    data_type -> BOOL
Rule 57    data_type -> STRING
Rule 58    declarations -> IDENTIFIER COMMA declarations
Rule 59    declarations -> IDENTIFIER
Rule 60    var_declaration -> IDENTIFIER ASSIGN statement
Rule 61    empty -> <empty>

Terminals, with rules where they appear

AND                  : 26 44
ASSIGN               : 60
BOOL                 : 32 56
CHAR                 : 
COLON                : 
COMMA                : 58
DECREMENT            : 37
DIVIDE               : 18
DOUBLE               : 
ELSE                 : 51
EQUAL                : 20 38
FLOAT                : 31 55
FOR                  : 49
GREATER              : 22 40
GREATER_EQUAL        : 24 42
IDENTIFIER           : 14 36 37 58 59 60
IF                   : 51 52
INCREMENT            : 36
INT                  : 30 54
LESS                 : 23 41
LESS_EQUAL           : 25 43
LOGICAL_AND          : 28 45
LOGICAL_NOT          : 
LOGICAL_OR           : 29 47
L_BRACE              : 1 49 50 51 51 52
L_BRACKET            : 
L_PAREN              : 12 13 34 35 49 50 51 52
MAIN                 : 1
MINUS                : 16
MODULO               : 19
NOT                  : 
NOT_EQUAL            : 21 39
OR                   : 27 46
PLUS                 : 15
PROGRAM              : 1
RETURN               : 
R_BRACE              : 1 49 50 51 51 52
R_BRACKET            : 
R_PAREN              : 12 13 34 35 49 50 51 52
SEMICOLON            : 4 5 6 7 49 49
STRING               : 33 57
TIMES                : 17
WHILE                : 50
WRITE                : 12
WRITELN              : 13
error                : 

Nonterminals, with rules where they appear

conditional          : 35 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 49 50 51 52
data_type            : 53
declarations         : 53 58
empty                : 11
expression           : 2 3
expressions          : 1 2 49 50 51 51 52
for_loop             : 9
if_else_statement    : 8
program              : 0
statement            : 7 12 13 15 15 16 16 17 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 34 48 49 60
var_declaration      : 4 49
while_loop           : 10
write                : 5
writeln              : 6

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM MAIN L_BRACE expressions R_BRACE

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . MAIN L_BRACE expressions R_BRACE

    MAIN            shift and go to state 3


state 3

    (1) program -> PROGRAM MAIN . L_BRACE expressions R_BRACE

    L_BRACE         shift and go to state 4


state 4

    (1) program -> PROGRAM MAIN L_BRACE . expressions R_BRACE
    (2) expressions -> . expressions expression
    (3) expressions -> . expression
    (4) expression -> . var_declaration SEMICOLON
    (5) expression -> . write SEMICOLON
    (6) expression -> . writeln SEMICOLON
    (7) expression -> . statement SEMICOLON
    (8) expression -> . if_else_statement
    (9) expression -> . for_loop
    (10) expression -> . while_loop
    (11) expression -> . empty
    (53) var_declaration -> . data_type declarations
    (60) var_declaration -> . IDENTIFIER ASSIGN statement
    (12) write -> . WRITE L_PAREN statement R_PAREN
    (13) writeln -> . WRITELN L_PAREN statement R_PAREN
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . statement MODULO statement
    (20) statement -> . statement EQUAL statement
    (21) statement -> . statement NOT_EQUAL statement
    (22) statement -> . statement GREATER statement
    (23) statement -> . statement LESS statement
    (24) statement -> . statement GREATER_EQUAL statement
    (25) statement -> . statement LESS_EQUAL statement
    (26) statement -> . statement AND statement
    (27) statement -> . statement OR statement
    (28) statement -> . statement LOGICAL_AND statement
    (29) statement -> . statement LOGICAL_OR statement
    (30) statement -> . INT
    (31) statement -> . FLOAT
    (32) statement -> . BOOL
    (33) statement -> . STRING
    (34) statement -> . L_PAREN statement R_PAREN
    (35) statement -> . L_PAREN conditional R_PAREN
    (36) statement -> . IDENTIFIER INCREMENT
    (37) statement -> . IDENTIFIER DECREMENT
    (51) if_else_statement -> . IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE
    (52) if_else_statement -> . IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE
    (49) for_loop -> . FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE
    (50) while_loop -> . WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE
    (61) empty -> .
    (54) data_type -> . INT
    (55) data_type -> . FLOAT
    (56) data_type -> . BOOL
    (57) data_type -> . STRING

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for L_PAREN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    IDENTIFIER      shift and go to state 16
    WRITE           shift and go to state 17
    WRITELN         shift and go to state 19
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 22
    STRING          shift and go to state 23
    L_PAREN         shift and go to state 18
    IF              shift and go to state 24
    FOR             shift and go to state 25
    WHILE           shift and go to state 26
    R_BRACE         reduce using rule 61 (empty -> .)

  ! IDENTIFIER      [ reduce using rule 61 (empty -> .) ]
  ! WRITE           [ reduce using rule 61 (empty -> .) ]
  ! WRITELN         [ reduce using rule 61 (empty -> .) ]
  ! INT             [ reduce using rule 61 (empty -> .) ]
  ! FLOAT           [ reduce using rule 61 (empty -> .) ]
  ! BOOL            [ reduce using rule 61 (empty -> .) ]
  ! STRING          [ reduce using rule 61 (empty -> .) ]
  ! L_PAREN         [ reduce using rule 61 (empty -> .) ]
  ! IF              [ reduce using rule 61 (empty -> .) ]
  ! FOR             [ reduce using rule 61 (empty -> .) ]
  ! WHILE           [ reduce using rule 61 (empty -> .) ]

    expressions                    shift and go to state 5
    expression                     shift and go to state 6
    var_declaration                shift and go to state 7
    write                          shift and go to state 8
    writeln                        shift and go to state 9
    statement                      shift and go to state 10
    if_else_statement              shift and go to state 11
    for_loop                       shift and go to state 12
    while_loop                     shift and go to state 13
    empty                          shift and go to state 14
    data_type                      shift and go to state 15

state 5

    (1) program -> PROGRAM MAIN L_BRACE expressions . R_BRACE
    (2) expressions -> expressions . expression
    (4) expression -> . var_declaration SEMICOLON
    (5) expression -> . write SEMICOLON
    (6) expression -> . writeln SEMICOLON
    (7) expression -> . statement SEMICOLON
    (8) expression -> . if_else_statement
    (9) expression -> . for_loop
    (10) expression -> . while_loop
    (11) expression -> . empty
    (53) var_declaration -> . data_type declarations
    (60) var_declaration -> . IDENTIFIER ASSIGN statement
    (12) write -> . WRITE L_PAREN statement R_PAREN
    (13) writeln -> . WRITELN L_PAREN statement R_PAREN
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . statement MODULO statement
    (20) statement -> . statement EQUAL statement
    (21) statement -> . statement NOT_EQUAL statement
    (22) statement -> . statement GREATER statement
    (23) statement -> . statement LESS statement
    (24) statement -> . statement GREATER_EQUAL statement
    (25) statement -> . statement LESS_EQUAL statement
    (26) statement -> . statement AND statement
    (27) statement -> . statement OR statement
    (28) statement -> . statement LOGICAL_AND statement
    (29) statement -> . statement LOGICAL_OR statement
    (30) statement -> . INT
    (31) statement -> . FLOAT
    (32) statement -> . BOOL
    (33) statement -> . STRING
    (34) statement -> . L_PAREN statement R_PAREN
    (35) statement -> . L_PAREN conditional R_PAREN
    (36) statement -> . IDENTIFIER INCREMENT
    (37) statement -> . IDENTIFIER DECREMENT
    (51) if_else_statement -> . IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE
    (52) if_else_statement -> . IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE
    (49) for_loop -> . FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE
    (50) while_loop -> . WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE
    (61) empty -> .
    (54) data_type -> . INT
    (55) data_type -> . FLOAT
    (56) data_type -> . BOOL
    (57) data_type -> . STRING

  ! shift/reduce conflict for R_BRACE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for L_PAREN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_BRACE         shift and go to state 27
    IDENTIFIER      shift and go to state 16
    WRITE           shift and go to state 17
    WRITELN         shift and go to state 19
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 22
    STRING          shift and go to state 23
    L_PAREN         shift and go to state 18
    IF              shift and go to state 24
    FOR             shift and go to state 25
    WHILE           shift and go to state 26

  ! R_BRACE         [ reduce using rule 61 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 61 (empty -> .) ]
  ! WRITE           [ reduce using rule 61 (empty -> .) ]
  ! WRITELN         [ reduce using rule 61 (empty -> .) ]
  ! INT             [ reduce using rule 61 (empty -> .) ]
  ! FLOAT           [ reduce using rule 61 (empty -> .) ]
  ! BOOL            [ reduce using rule 61 (empty -> .) ]
  ! STRING          [ reduce using rule 61 (empty -> .) ]
  ! L_PAREN         [ reduce using rule 61 (empty -> .) ]
  ! IF              [ reduce using rule 61 (empty -> .) ]
  ! FOR             [ reduce using rule 61 (empty -> .) ]
  ! WHILE           [ reduce using rule 61 (empty -> .) ]

    expression                     shift and go to state 28
    var_declaration                shift and go to state 7
    write                          shift and go to state 8
    writeln                        shift and go to state 9
    statement                      shift and go to state 10
    if_else_statement              shift and go to state 11
    for_loop                       shift and go to state 12
    while_loop                     shift and go to state 13
    empty                          shift and go to state 14
    data_type                      shift and go to state 15

state 6

    (3) expressions -> expression .

    R_BRACE         reduce using rule 3 (expressions -> expression .)
    IDENTIFIER      reduce using rule 3 (expressions -> expression .)
    WRITE           reduce using rule 3 (expressions -> expression .)
    WRITELN         reduce using rule 3 (expressions -> expression .)
    INT             reduce using rule 3 (expressions -> expression .)
    FLOAT           reduce using rule 3 (expressions -> expression .)
    BOOL            reduce using rule 3 (expressions -> expression .)
    STRING          reduce using rule 3 (expressions -> expression .)
    L_PAREN         reduce using rule 3 (expressions -> expression .)
    IF              reduce using rule 3 (expressions -> expression .)
    FOR             reduce using rule 3 (expressions -> expression .)
    WHILE           reduce using rule 3 (expressions -> expression .)


state 7

    (4) expression -> var_declaration . SEMICOLON

    SEMICOLON       shift and go to state 29


state 8

    (5) expression -> write . SEMICOLON

    SEMICOLON       shift and go to state 30


state 9

    (6) expression -> writeln . SEMICOLON

    SEMICOLON       shift and go to state 31


state 10

    (7) expression -> statement . SEMICOLON
    (15) statement -> statement . PLUS statement
    (16) statement -> statement . MINUS statement
    (17) statement -> statement . TIMES statement
    (18) statement -> statement . DIVIDE statement
    (19) statement -> statement . MODULO statement
    (20) statement -> statement . EQUAL statement
    (21) statement -> statement . NOT_EQUAL statement
    (22) statement -> statement . GREATER statement
    (23) statement -> statement . LESS statement
    (24) statement -> statement . GREATER_EQUAL statement
    (25) statement -> statement . LESS_EQUAL statement
    (26) statement -> statement . AND statement
    (27) statement -> statement . OR statement
    (28) statement -> statement . LOGICAL_AND statement
    (29) statement -> statement . LOGICAL_OR statement

    SEMICOLON       shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    MODULO          shift and go to state 37
    EQUAL           shift and go to state 38
    NOT_EQUAL       shift and go to state 39
    GREATER         shift and go to state 40
    LESS            shift and go to state 41
    GREATER_EQUAL   shift and go to state 42
    LESS_EQUAL      shift and go to state 43
    AND             shift and go to state 44
    OR              shift and go to state 45
    LOGICAL_AND     shift and go to state 46
    LOGICAL_OR      shift and go to state 47


state 11

    (8) expression -> if_else_statement .

    R_BRACE         reduce using rule 8 (expression -> if_else_statement .)
    IDENTIFIER      reduce using rule 8 (expression -> if_else_statement .)
    WRITE           reduce using rule 8 (expression -> if_else_statement .)
    WRITELN         reduce using rule 8 (expression -> if_else_statement .)
    INT             reduce using rule 8 (expression -> if_else_statement .)
    FLOAT           reduce using rule 8 (expression -> if_else_statement .)
    BOOL            reduce using rule 8 (expression -> if_else_statement .)
    STRING          reduce using rule 8 (expression -> if_else_statement .)
    L_PAREN         reduce using rule 8 (expression -> if_else_statement .)
    IF              reduce using rule 8 (expression -> if_else_statement .)
    FOR             reduce using rule 8 (expression -> if_else_statement .)
    WHILE           reduce using rule 8 (expression -> if_else_statement .)


state 12

    (9) expression -> for_loop .

    R_BRACE         reduce using rule 9 (expression -> for_loop .)
    IDENTIFIER      reduce using rule 9 (expression -> for_loop .)
    WRITE           reduce using rule 9 (expression -> for_loop .)
    WRITELN         reduce using rule 9 (expression -> for_loop .)
    INT             reduce using rule 9 (expression -> for_loop .)
    FLOAT           reduce using rule 9 (expression -> for_loop .)
    BOOL            reduce using rule 9 (expression -> for_loop .)
    STRING          reduce using rule 9 (expression -> for_loop .)
    L_PAREN         reduce using rule 9 (expression -> for_loop .)
    IF              reduce using rule 9 (expression -> for_loop .)
    FOR             reduce using rule 9 (expression -> for_loop .)
    WHILE           reduce using rule 9 (expression -> for_loop .)


state 13

    (10) expression -> while_loop .

    R_BRACE         reduce using rule 10 (expression -> while_loop .)
    IDENTIFIER      reduce using rule 10 (expression -> while_loop .)
    WRITE           reduce using rule 10 (expression -> while_loop .)
    WRITELN         reduce using rule 10 (expression -> while_loop .)
    INT             reduce using rule 10 (expression -> while_loop .)
    FLOAT           reduce using rule 10 (expression -> while_loop .)
    BOOL            reduce using rule 10 (expression -> while_loop .)
    STRING          reduce using rule 10 (expression -> while_loop .)
    L_PAREN         reduce using rule 10 (expression -> while_loop .)
    IF              reduce using rule 10 (expression -> while_loop .)
    FOR             reduce using rule 10 (expression -> while_loop .)
    WHILE           reduce using rule 10 (expression -> while_loop .)


state 14

    (11) expression -> empty .

    R_BRACE         reduce using rule 11 (expression -> empty .)
    IDENTIFIER      reduce using rule 11 (expression -> empty .)
    WRITE           reduce using rule 11 (expression -> empty .)
    WRITELN         reduce using rule 11 (expression -> empty .)
    INT             reduce using rule 11 (expression -> empty .)
    FLOAT           reduce using rule 11 (expression -> empty .)
    BOOL            reduce using rule 11 (expression -> empty .)
    STRING          reduce using rule 11 (expression -> empty .)
    L_PAREN         reduce using rule 11 (expression -> empty .)
    IF              reduce using rule 11 (expression -> empty .)
    FOR             reduce using rule 11 (expression -> empty .)
    WHILE           reduce using rule 11 (expression -> empty .)


state 15

    (53) var_declaration -> data_type . declarations
    (58) declarations -> . IDENTIFIER COMMA declarations
    (59) declarations -> . IDENTIFIER

    IDENTIFIER      shift and go to state 49

    declarations                   shift and go to state 48

state 16

    (60) var_declaration -> IDENTIFIER . ASSIGN statement
    (14) statement -> IDENTIFIER .
    (36) statement -> IDENTIFIER . INCREMENT
    (37) statement -> IDENTIFIER . DECREMENT

    ASSIGN          shift and go to state 50
    SEMICOLON       reduce using rule 14 (statement -> IDENTIFIER .)
    PLUS            reduce using rule 14 (statement -> IDENTIFIER .)
    MINUS           reduce using rule 14 (statement -> IDENTIFIER .)
    TIMES           reduce using rule 14 (statement -> IDENTIFIER .)
    DIVIDE          reduce using rule 14 (statement -> IDENTIFIER .)
    MODULO          reduce using rule 14 (statement -> IDENTIFIER .)
    EQUAL           reduce using rule 14 (statement -> IDENTIFIER .)
    NOT_EQUAL       reduce using rule 14 (statement -> IDENTIFIER .)
    GREATER         reduce using rule 14 (statement -> IDENTIFIER .)
    LESS            reduce using rule 14 (statement -> IDENTIFIER .)
    GREATER_EQUAL   reduce using rule 14 (statement -> IDENTIFIER .)
    LESS_EQUAL      reduce using rule 14 (statement -> IDENTIFIER .)
    AND             reduce using rule 14 (statement -> IDENTIFIER .)
    OR              reduce using rule 14 (statement -> IDENTIFIER .)
    LOGICAL_AND     reduce using rule 14 (statement -> IDENTIFIER .)
    LOGICAL_OR      reduce using rule 14 (statement -> IDENTIFIER .)
    INCREMENT       shift and go to state 51
    DECREMENT       shift and go to state 52


state 17

    (12) write -> WRITE . L_PAREN statement R_PAREN

    L_PAREN         shift and go to state 53


state 18

    (34) statement -> L_PAREN . statement R_PAREN
    (35) statement -> L_PAREN . conditional R_PAREN
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . statement MODULO statement
    (20) statement -> . statement EQUAL statement
    (21) statement -> . statement NOT_EQUAL statement
    (22) statement -> . statement GREATER statement
    (23) statement -> . statement LESS statement
    (24) statement -> . statement GREATER_EQUAL statement
    (25) statement -> . statement LESS_EQUAL statement
    (26) statement -> . statement AND statement
    (27) statement -> . statement OR statement
    (28) statement -> . statement LOGICAL_AND statement
    (29) statement -> . statement LOGICAL_OR statement
    (30) statement -> . INT
    (31) statement -> . FLOAT
    (32) statement -> . BOOL
    (33) statement -> . STRING
    (34) statement -> . L_PAREN statement R_PAREN
    (35) statement -> . L_PAREN conditional R_PAREN
    (36) statement -> . IDENTIFIER INCREMENT
    (37) statement -> . IDENTIFIER DECREMENT
    (38) conditional -> . conditional EQUAL conditional
    (39) conditional -> . conditional NOT_EQUAL conditional
    (40) conditional -> . conditional GREATER conditional
    (41) conditional -> . conditional LESS conditional
    (42) conditional -> . conditional GREATER_EQUAL conditional
    (43) conditional -> . conditional LESS_EQUAL conditional
    (44) conditional -> . conditional AND conditional
    (45) conditional -> . conditional LOGICAL_AND conditional
    (46) conditional -> . conditional OR conditional
    (47) conditional -> . conditional LOGICAL_OR conditional
    (48) conditional -> . statement

    IDENTIFIER      shift and go to state 56
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    STRING          shift and go to state 60
    L_PAREN         shift and go to state 18

    statement                      shift and go to state 54
    conditional                    shift and go to state 55

state 19

    (13) writeln -> WRITELN . L_PAREN statement R_PAREN

    L_PAREN         shift and go to state 61


state 20

    (30) statement -> INT .
    (54) data_type -> INT .

    SEMICOLON       reduce using rule 30 (statement -> INT .)
    PLUS            reduce using rule 30 (statement -> INT .)
    MINUS           reduce using rule 30 (statement -> INT .)
    TIMES           reduce using rule 30 (statement -> INT .)
    DIVIDE          reduce using rule 30 (statement -> INT .)
    MODULO          reduce using rule 30 (statement -> INT .)
    EQUAL           reduce using rule 30 (statement -> INT .)
    NOT_EQUAL       reduce using rule 30 (statement -> INT .)
    GREATER         reduce using rule 30 (statement -> INT .)
    LESS            reduce using rule 30 (statement -> INT .)
    GREATER_EQUAL   reduce using rule 30 (statement -> INT .)
    LESS_EQUAL      reduce using rule 30 (statement -> INT .)
    AND             reduce using rule 30 (statement -> INT .)
    OR              reduce using rule 30 (statement -> INT .)
    LOGICAL_AND     reduce using rule 30 (statement -> INT .)
    LOGICAL_OR      reduce using rule 30 (statement -> INT .)
    IDENTIFIER      reduce using rule 54 (data_type -> INT .)


state 21

    (31) statement -> FLOAT .
    (55) data_type -> FLOAT .

    SEMICOLON       reduce using rule 31 (statement -> FLOAT .)
    PLUS            reduce using rule 31 (statement -> FLOAT .)
    MINUS           reduce using rule 31 (statement -> FLOAT .)
    TIMES           reduce using rule 31 (statement -> FLOAT .)
    DIVIDE          reduce using rule 31 (statement -> FLOAT .)
    MODULO          reduce using rule 31 (statement -> FLOAT .)
    EQUAL           reduce using rule 31 (statement -> FLOAT .)
    NOT_EQUAL       reduce using rule 31 (statement -> FLOAT .)
    GREATER         reduce using rule 31 (statement -> FLOAT .)
    LESS            reduce using rule 31 (statement -> FLOAT .)
    GREATER_EQUAL   reduce using rule 31 (statement -> FLOAT .)
    LESS_EQUAL      reduce using rule 31 (statement -> FLOAT .)
    AND             reduce using rule 31 (statement -> FLOAT .)
    OR              reduce using rule 31 (statement -> FLOAT .)
    LOGICAL_AND     reduce using rule 31 (statement -> FLOAT .)
    LOGICAL_OR      reduce using rule 31 (statement -> FLOAT .)
    IDENTIFIER      reduce using rule 55 (data_type -> FLOAT .)


state 22

    (32) statement -> BOOL .
    (56) data_type -> BOOL .

    SEMICOLON       reduce using rule 32 (statement -> BOOL .)
    PLUS            reduce using rule 32 (statement -> BOOL .)
    MINUS           reduce using rule 32 (statement -> BOOL .)
    TIMES           reduce using rule 32 (statement -> BOOL .)
    DIVIDE          reduce using rule 32 (statement -> BOOL .)
    MODULO          reduce using rule 32 (statement -> BOOL .)
    EQUAL           reduce using rule 32 (statement -> BOOL .)
    NOT_EQUAL       reduce using rule 32 (statement -> BOOL .)
    GREATER         reduce using rule 32 (statement -> BOOL .)
    LESS            reduce using rule 32 (statement -> BOOL .)
    GREATER_EQUAL   reduce using rule 32 (statement -> BOOL .)
    LESS_EQUAL      reduce using rule 32 (statement -> BOOL .)
    AND             reduce using rule 32 (statement -> BOOL .)
    OR              reduce using rule 32 (statement -> BOOL .)
    LOGICAL_AND     reduce using rule 32 (statement -> BOOL .)
    LOGICAL_OR      reduce using rule 32 (statement -> BOOL .)
    IDENTIFIER      reduce using rule 56 (data_type -> BOOL .)


state 23

    (33) statement -> STRING .
    (57) data_type -> STRING .

    SEMICOLON       reduce using rule 33 (statement -> STRING .)
    PLUS            reduce using rule 33 (statement -> STRING .)
    MINUS           reduce using rule 33 (statement -> STRING .)
    TIMES           reduce using rule 33 (statement -> STRING .)
    DIVIDE          reduce using rule 33 (statement -> STRING .)
    MODULO          reduce using rule 33 (statement -> STRING .)
    EQUAL           reduce using rule 33 (statement -> STRING .)
    NOT_EQUAL       reduce using rule 33 (statement -> STRING .)
    GREATER         reduce using rule 33 (statement -> STRING .)
    LESS            reduce using rule 33 (statement -> STRING .)
    GREATER_EQUAL   reduce using rule 33 (statement -> STRING .)
    LESS_EQUAL      reduce using rule 33 (statement -> STRING .)
    AND             reduce using rule 33 (statement -> STRING .)
    OR              reduce using rule 33 (statement -> STRING .)
    LOGICAL_AND     reduce using rule 33 (statement -> STRING .)
    LOGICAL_OR      reduce using rule 33 (statement -> STRING .)
    IDENTIFIER      reduce using rule 57 (data_type -> STRING .)


state 24

    (51) if_else_statement -> IF . L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE
    (52) if_else_statement -> IF . L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE

    L_PAREN         shift and go to state 62


state 25

    (49) for_loop -> FOR . L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE

    L_PAREN         shift and go to state 63


state 26

    (50) while_loop -> WHILE . L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE

    L_PAREN         shift and go to state 64


state 27

    (1) program -> PROGRAM MAIN L_BRACE expressions R_BRACE .

    $end            reduce using rule 1 (program -> PROGRAM MAIN L_BRACE expressions R_BRACE .)


state 28

    (2) expressions -> expressions expression .

    R_BRACE         reduce using rule 2 (expressions -> expressions expression .)
    IDENTIFIER      reduce using rule 2 (expressions -> expressions expression .)
    WRITE           reduce using rule 2 (expressions -> expressions expression .)
    WRITELN         reduce using rule 2 (expressions -> expressions expression .)
    INT             reduce using rule 2 (expressions -> expressions expression .)
    FLOAT           reduce using rule 2 (expressions -> expressions expression .)
    BOOL            reduce using rule 2 (expressions -> expressions expression .)
    STRING          reduce using rule 2 (expressions -> expressions expression .)
    L_PAREN         reduce using rule 2 (expressions -> expressions expression .)
    IF              reduce using rule 2 (expressions -> expressions expression .)
    FOR             reduce using rule 2 (expressions -> expressions expression .)
    WHILE           reduce using rule 2 (expressions -> expressions expression .)


state 29

    (4) expression -> var_declaration SEMICOLON .

    R_BRACE         reduce using rule 4 (expression -> var_declaration SEMICOLON .)
    IDENTIFIER      reduce using rule 4 (expression -> var_declaration SEMICOLON .)
    WRITE           reduce using rule 4 (expression -> var_declaration SEMICOLON .)
    WRITELN         reduce using rule 4 (expression -> var_declaration SEMICOLON .)
    INT             reduce using rule 4 (expression -> var_declaration SEMICOLON .)
    FLOAT           reduce using rule 4 (expression -> var_declaration SEMICOLON .)
    BOOL            reduce using rule 4 (expression -> var_declaration SEMICOLON .)
    STRING          reduce using rule 4 (expression -> var_declaration SEMICOLON .)
    L_PAREN         reduce using rule 4 (expression -> var_declaration SEMICOLON .)
    IF              reduce using rule 4 (expression -> var_declaration SEMICOLON .)
    FOR             reduce using rule 4 (expression -> var_declaration SEMICOLON .)
    WHILE           reduce using rule 4 (expression -> var_declaration SEMICOLON .)


state 30

    (5) expression -> write SEMICOLON .

    R_BRACE         reduce using rule 5 (expression -> write SEMICOLON .)
    IDENTIFIER      reduce using rule 5 (expression -> write SEMICOLON .)
    WRITE           reduce using rule 5 (expression -> write SEMICOLON .)
    WRITELN         reduce using rule 5 (expression -> write SEMICOLON .)
    INT             reduce using rule 5 (expression -> write SEMICOLON .)
    FLOAT           reduce using rule 5 (expression -> write SEMICOLON .)
    BOOL            reduce using rule 5 (expression -> write SEMICOLON .)
    STRING          reduce using rule 5 (expression -> write SEMICOLON .)
    L_PAREN         reduce using rule 5 (expression -> write SEMICOLON .)
    IF              reduce using rule 5 (expression -> write SEMICOLON .)
    FOR             reduce using rule 5 (expression -> write SEMICOLON .)
    WHILE           reduce using rule 5 (expression -> write SEMICOLON .)


state 31

    (6) expression -> writeln SEMICOLON .

    R_BRACE         reduce using rule 6 (expression -> writeln SEMICOLON .)
    IDENTIFIER      reduce using rule 6 (expression -> writeln SEMICOLON .)
    WRITE           reduce using rule 6 (expression -> writeln SEMICOLON .)
    WRITELN         reduce using rule 6 (expression -> writeln SEMICOLON .)
    INT             reduce using rule 6 (expression -> writeln SEMICOLON .)
    FLOAT           reduce using rule 6 (expression -> writeln SEMICOLON .)
    BOOL            reduce using rule 6 (expression -> writeln SEMICOLON .)
    STRING          reduce using rule 6 (expression -> writeln SEMICOLON .)
    L_PAREN         reduce using rule 6 (expression -> writeln SEMICOLON .)
    IF              reduce using rule 6 (expression -> writeln SEMICOLON .)
    FOR             reduce using rule 6 (expression -> writeln SEMICOLON .)
    WHILE           reduce using rule 6 (expression -> writeln SEMICOLON .)


state 32

    (7) expression -> statement SEMICOLON .

    R_BRACE         reduce using rule 7 (expression -> statement SEMICOLON .)
    IDENTIFIER      reduce using rule 7 (expression -> statement SEMICOLON .)
    WRITE           reduce using rule 7 (expression -> statement SEMICOLON .)
    WRITELN         reduce using rule 7 (expression -> statement SEMICOLON .)
    INT             reduce using rule 7 (expression -> statement SEMICOLON .)
    FLOAT           reduce using rule 7 (expression -> statement SEMICOLON .)
    BOOL            reduce using rule 7 (expression -> statement SEMICOLON .)
    STRING          reduce using rule 7 (expression -> statement SEMICOLON .)
    L_PAREN         reduce using rule 7 (expression -> statement SEMICOLON .)
    IF              reduce using rule 7 (expression -> statement SEMICOLON .)
    FOR             reduce using rule 7 (expression -> statement SEMICOLON .)
    WHILE           reduce using rule 7 (expression -> statement SEMICOLON .)


state 33

    (15) statement -> statement PLUS . statement
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . statement MODULO statement
    (20) statement -> . statement EQUAL statement
    (21) statement -> . statement NOT_EQUAL statement
    (22) statement -> . statement GREATER statement
    (23) statement -> . statement LESS statement
    (24) statement -> . statement GREATER_EQUAL statement
    (25) statement -> . statement LESS_EQUAL statement
    (26) statement -> . statement AND statement
    (27) statement -> . statement OR statement
    (28) statement -> . statement LOGICAL_AND statement
    (29) statement -> . statement LOGICAL_OR statement
    (30) statement -> . INT
    (31) statement -> . FLOAT
    (32) statement -> . BOOL
    (33) statement -> . STRING
    (34) statement -> . L_PAREN statement R_PAREN
    (35) statement -> . L_PAREN conditional R_PAREN
    (36) statement -> . IDENTIFIER INCREMENT
    (37) statement -> . IDENTIFIER DECREMENT

    IDENTIFIER      shift and go to state 56
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    STRING          shift and go to state 60
    L_PAREN         shift and go to state 18

    statement                      shift and go to state 65

state 34

    (16) statement -> statement MINUS . statement
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . statement MODULO statement
    (20) statement -> . statement EQUAL statement
    (21) statement -> . statement NOT_EQUAL statement
    (22) statement -> . statement GREATER statement
    (23) statement -> . statement LESS statement
    (24) statement -> . statement GREATER_EQUAL statement
    (25) statement -> . statement LESS_EQUAL statement
    (26) statement -> . statement AND statement
    (27) statement -> . statement OR statement
    (28) statement -> . statement LOGICAL_AND statement
    (29) statement -> . statement LOGICAL_OR statement
    (30) statement -> . INT
    (31) statement -> . FLOAT
    (32) statement -> . BOOL
    (33) statement -> . STRING
    (34) statement -> . L_PAREN statement R_PAREN
    (35) statement -> . L_PAREN conditional R_PAREN
    (36) statement -> . IDENTIFIER INCREMENT
    (37) statement -> . IDENTIFIER DECREMENT

    IDENTIFIER      shift and go to state 56
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    STRING          shift and go to state 60
    L_PAREN         shift and go to state 18

    statement                      shift and go to state 66

state 35

    (17) statement -> statement TIMES . statement
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . statement MODULO statement
    (20) statement -> . statement EQUAL statement
    (21) statement -> . statement NOT_EQUAL statement
    (22) statement -> . statement GREATER statement
    (23) statement -> . statement LESS statement
    (24) statement -> . statement GREATER_EQUAL statement
    (25) statement -> . statement LESS_EQUAL statement
    (26) statement -> . statement AND statement
    (27) statement -> . statement OR statement
    (28) statement -> . statement LOGICAL_AND statement
    (29) statement -> . statement LOGICAL_OR statement
    (30) statement -> . INT
    (31) statement -> . FLOAT
    (32) statement -> . BOOL
    (33) statement -> . STRING
    (34) statement -> . L_PAREN statement R_PAREN
    (35) statement -> . L_PAREN conditional R_PAREN
    (36) statement -> . IDENTIFIER INCREMENT
    (37) statement -> . IDENTIFIER DECREMENT

    IDENTIFIER      shift and go to state 56
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    STRING          shift and go to state 60
    L_PAREN         shift and go to state 18

    statement                      shift and go to state 67

state 36

    (18) statement -> statement DIVIDE . statement
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . statement MODULO statement
    (20) statement -> . statement EQUAL statement
    (21) statement -> . statement NOT_EQUAL statement
    (22) statement -> . statement GREATER statement
    (23) statement -> . statement LESS statement
    (24) statement -> . statement GREATER_EQUAL statement
    (25) statement -> . statement LESS_EQUAL statement
    (26) statement -> . statement AND statement
    (27) statement -> . statement OR statement
    (28) statement -> . statement LOGICAL_AND statement
    (29) statement -> . statement LOGICAL_OR statement
    (30) statement -> . INT
    (31) statement -> . FLOAT
    (32) statement -> . BOOL
    (33) statement -> . STRING
    (34) statement -> . L_PAREN statement R_PAREN
    (35) statement -> . L_PAREN conditional R_PAREN
    (36) statement -> . IDENTIFIER INCREMENT
    (37) statement -> . IDENTIFIER DECREMENT

    IDENTIFIER      shift and go to state 56
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    STRING          shift and go to state 60
    L_PAREN         shift and go to state 18

    statement                      shift and go to state 68

state 37

    (19) statement -> statement MODULO . statement
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . statement MODULO statement
    (20) statement -> . statement EQUAL statement
    (21) statement -> . statement NOT_EQUAL statement
    (22) statement -> . statement GREATER statement
    (23) statement -> . statement LESS statement
    (24) statement -> . statement GREATER_EQUAL statement
    (25) statement -> . statement LESS_EQUAL statement
    (26) statement -> . statement AND statement
    (27) statement -> . statement OR statement
    (28) statement -> . statement LOGICAL_AND statement
    (29) statement -> . statement LOGICAL_OR statement
    (30) statement -> . INT
    (31) statement -> . FLOAT
    (32) statement -> . BOOL
    (33) statement -> . STRING
    (34) statement -> . L_PAREN statement R_PAREN
    (35) statement -> . L_PAREN conditional R_PAREN
    (36) statement -> . IDENTIFIER INCREMENT
    (37) statement -> . IDENTIFIER DECREMENT

    IDENTIFIER      shift and go to state 56
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    STRING          shift and go to state 60
    L_PAREN         shift and go to state 18

    statement                      shift and go to state 69

state 38

    (20) statement -> statement EQUAL . statement
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . statement MODULO statement
    (20) statement -> . statement EQUAL statement
    (21) statement -> . statement NOT_EQUAL statement
    (22) statement -> . statement GREATER statement
    (23) statement -> . statement LESS statement
    (24) statement -> . statement GREATER_EQUAL statement
    (25) statement -> . statement LESS_EQUAL statement
    (26) statement -> . statement AND statement
    (27) statement -> . statement OR statement
    (28) statement -> . statement LOGICAL_AND statement
    (29) statement -> . statement LOGICAL_OR statement
    (30) statement -> . INT
    (31) statement -> . FLOAT
    (32) statement -> . BOOL
    (33) statement -> . STRING
    (34) statement -> . L_PAREN statement R_PAREN
    (35) statement -> . L_PAREN conditional R_PAREN
    (36) statement -> . IDENTIFIER INCREMENT
    (37) statement -> . IDENTIFIER DECREMENT

    IDENTIFIER      shift and go to state 56
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    STRING          shift and go to state 60
    L_PAREN         shift and go to state 18

    statement                      shift and go to state 70

state 39

    (21) statement -> statement NOT_EQUAL . statement
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . statement MODULO statement
    (20) statement -> . statement EQUAL statement
    (21) statement -> . statement NOT_EQUAL statement
    (22) statement -> . statement GREATER statement
    (23) statement -> . statement LESS statement
    (24) statement -> . statement GREATER_EQUAL statement
    (25) statement -> . statement LESS_EQUAL statement
    (26) statement -> . statement AND statement
    (27) statement -> . statement OR statement
    (28) statement -> . statement LOGICAL_AND statement
    (29) statement -> . statement LOGICAL_OR statement
    (30) statement -> . INT
    (31) statement -> . FLOAT
    (32) statement -> . BOOL
    (33) statement -> . STRING
    (34) statement -> . L_PAREN statement R_PAREN
    (35) statement -> . L_PAREN conditional R_PAREN
    (36) statement -> . IDENTIFIER INCREMENT
    (37) statement -> . IDENTIFIER DECREMENT

    IDENTIFIER      shift and go to state 56
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    STRING          shift and go to state 60
    L_PAREN         shift and go to state 18

    statement                      shift and go to state 71

state 40

    (22) statement -> statement GREATER . statement
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . statement MODULO statement
    (20) statement -> . statement EQUAL statement
    (21) statement -> . statement NOT_EQUAL statement
    (22) statement -> . statement GREATER statement
    (23) statement -> . statement LESS statement
    (24) statement -> . statement GREATER_EQUAL statement
    (25) statement -> . statement LESS_EQUAL statement
    (26) statement -> . statement AND statement
    (27) statement -> . statement OR statement
    (28) statement -> . statement LOGICAL_AND statement
    (29) statement -> . statement LOGICAL_OR statement
    (30) statement -> . INT
    (31) statement -> . FLOAT
    (32) statement -> . BOOL
    (33) statement -> . STRING
    (34) statement -> . L_PAREN statement R_PAREN
    (35) statement -> . L_PAREN conditional R_PAREN
    (36) statement -> . IDENTIFIER INCREMENT
    (37) statement -> . IDENTIFIER DECREMENT

    IDENTIFIER      shift and go to state 56
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    STRING          shift and go to state 60
    L_PAREN         shift and go to state 18

    statement                      shift and go to state 72

state 41

    (23) statement -> statement LESS . statement
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . statement MODULO statement
    (20) statement -> . statement EQUAL statement
    (21) statement -> . statement NOT_EQUAL statement
    (22) statement -> . statement GREATER statement
    (23) statement -> . statement LESS statement
    (24) statement -> . statement GREATER_EQUAL statement
    (25) statement -> . statement LESS_EQUAL statement
    (26) statement -> . statement AND statement
    (27) statement -> . statement OR statement
    (28) statement -> . statement LOGICAL_AND statement
    (29) statement -> . statement LOGICAL_OR statement
    (30) statement -> . INT
    (31) statement -> . FLOAT
    (32) statement -> . BOOL
    (33) statement -> . STRING
    (34) statement -> . L_PAREN statement R_PAREN
    (35) statement -> . L_PAREN conditional R_PAREN
    (36) statement -> . IDENTIFIER INCREMENT
    (37) statement -> . IDENTIFIER DECREMENT

    IDENTIFIER      shift and go to state 56
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    STRING          shift and go to state 60
    L_PAREN         shift and go to state 18

    statement                      shift and go to state 73

state 42

    (24) statement -> statement GREATER_EQUAL . statement
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . statement MODULO statement
    (20) statement -> . statement EQUAL statement
    (21) statement -> . statement NOT_EQUAL statement
    (22) statement -> . statement GREATER statement
    (23) statement -> . statement LESS statement
    (24) statement -> . statement GREATER_EQUAL statement
    (25) statement -> . statement LESS_EQUAL statement
    (26) statement -> . statement AND statement
    (27) statement -> . statement OR statement
    (28) statement -> . statement LOGICAL_AND statement
    (29) statement -> . statement LOGICAL_OR statement
    (30) statement -> . INT
    (31) statement -> . FLOAT
    (32) statement -> . BOOL
    (33) statement -> . STRING
    (34) statement -> . L_PAREN statement R_PAREN
    (35) statement -> . L_PAREN conditional R_PAREN
    (36) statement -> . IDENTIFIER INCREMENT
    (37) statement -> . IDENTIFIER DECREMENT

    IDENTIFIER      shift and go to state 56
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    STRING          shift and go to state 60
    L_PAREN         shift and go to state 18

    statement                      shift and go to state 74

state 43

    (25) statement -> statement LESS_EQUAL . statement
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . statement MODULO statement
    (20) statement -> . statement EQUAL statement
    (21) statement -> . statement NOT_EQUAL statement
    (22) statement -> . statement GREATER statement
    (23) statement -> . statement LESS statement
    (24) statement -> . statement GREATER_EQUAL statement
    (25) statement -> . statement LESS_EQUAL statement
    (26) statement -> . statement AND statement
    (27) statement -> . statement OR statement
    (28) statement -> . statement LOGICAL_AND statement
    (29) statement -> . statement LOGICAL_OR statement
    (30) statement -> . INT
    (31) statement -> . FLOAT
    (32) statement -> . BOOL
    (33) statement -> . STRING
    (34) statement -> . L_PAREN statement R_PAREN
    (35) statement -> . L_PAREN conditional R_PAREN
    (36) statement -> . IDENTIFIER INCREMENT
    (37) statement -> . IDENTIFIER DECREMENT

    IDENTIFIER      shift and go to state 56
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    STRING          shift and go to state 60
    L_PAREN         shift and go to state 18

    statement                      shift and go to state 75

state 44

    (26) statement -> statement AND . statement
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . statement MODULO statement
    (20) statement -> . statement EQUAL statement
    (21) statement -> . statement NOT_EQUAL statement
    (22) statement -> . statement GREATER statement
    (23) statement -> . statement LESS statement
    (24) statement -> . statement GREATER_EQUAL statement
    (25) statement -> . statement LESS_EQUAL statement
    (26) statement -> . statement AND statement
    (27) statement -> . statement OR statement
    (28) statement -> . statement LOGICAL_AND statement
    (29) statement -> . statement LOGICAL_OR statement
    (30) statement -> . INT
    (31) statement -> . FLOAT
    (32) statement -> . BOOL
    (33) statement -> . STRING
    (34) statement -> . L_PAREN statement R_PAREN
    (35) statement -> . L_PAREN conditional R_PAREN
    (36) statement -> . IDENTIFIER INCREMENT
    (37) statement -> . IDENTIFIER DECREMENT

    IDENTIFIER      shift and go to state 56
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    STRING          shift and go to state 60
    L_PAREN         shift and go to state 18

    statement                      shift and go to state 76

state 45

    (27) statement -> statement OR . statement
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . statement MODULO statement
    (20) statement -> . statement EQUAL statement
    (21) statement -> . statement NOT_EQUAL statement
    (22) statement -> . statement GREATER statement
    (23) statement -> . statement LESS statement
    (24) statement -> . statement GREATER_EQUAL statement
    (25) statement -> . statement LESS_EQUAL statement
    (26) statement -> . statement AND statement
    (27) statement -> . statement OR statement
    (28) statement -> . statement LOGICAL_AND statement
    (29) statement -> . statement LOGICAL_OR statement
    (30) statement -> . INT
    (31) statement -> . FLOAT
    (32) statement -> . BOOL
    (33) statement -> . STRING
    (34) statement -> . L_PAREN statement R_PAREN
    (35) statement -> . L_PAREN conditional R_PAREN
    (36) statement -> . IDENTIFIER INCREMENT
    (37) statement -> . IDENTIFIER DECREMENT

    IDENTIFIER      shift and go to state 56
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    STRING          shift and go to state 60
    L_PAREN         shift and go to state 18

    statement                      shift and go to state 77

state 46

    (28) statement -> statement LOGICAL_AND . statement
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . statement MODULO statement
    (20) statement -> . statement EQUAL statement
    (21) statement -> . statement NOT_EQUAL statement
    (22) statement -> . statement GREATER statement
    (23) statement -> . statement LESS statement
    (24) statement -> . statement GREATER_EQUAL statement
    (25) statement -> . statement LESS_EQUAL statement
    (26) statement -> . statement AND statement
    (27) statement -> . statement OR statement
    (28) statement -> . statement LOGICAL_AND statement
    (29) statement -> . statement LOGICAL_OR statement
    (30) statement -> . INT
    (31) statement -> . FLOAT
    (32) statement -> . BOOL
    (33) statement -> . STRING
    (34) statement -> . L_PAREN statement R_PAREN
    (35) statement -> . L_PAREN conditional R_PAREN
    (36) statement -> . IDENTIFIER INCREMENT
    (37) statement -> . IDENTIFIER DECREMENT

    IDENTIFIER      shift and go to state 56
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    STRING          shift and go to state 60
    L_PAREN         shift and go to state 18

    statement                      shift and go to state 78

state 47

    (29) statement -> statement LOGICAL_OR . statement
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . statement MODULO statement
    (20) statement -> . statement EQUAL statement
    (21) statement -> . statement NOT_EQUAL statement
    (22) statement -> . statement GREATER statement
    (23) statement -> . statement LESS statement
    (24) statement -> . statement GREATER_EQUAL statement
    (25) statement -> . statement LESS_EQUAL statement
    (26) statement -> . statement AND statement
    (27) statement -> . statement OR statement
    (28) statement -> . statement LOGICAL_AND statement
    (29) statement -> . statement LOGICAL_OR statement
    (30) statement -> . INT
    (31) statement -> . FLOAT
    (32) statement -> . BOOL
    (33) statement -> . STRING
    (34) statement -> . L_PAREN statement R_PAREN
    (35) statement -> . L_PAREN conditional R_PAREN
    (36) statement -> . IDENTIFIER INCREMENT
    (37) statement -> . IDENTIFIER DECREMENT

    IDENTIFIER      shift and go to state 56
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    STRING          shift and go to state 60
    L_PAREN         shift and go to state 18

    statement                      shift and go to state 79

state 48

    (53) var_declaration -> data_type declarations .

    SEMICOLON       reduce using rule 53 (var_declaration -> data_type declarations .)


state 49

    (58) declarations -> IDENTIFIER . COMMA declarations
    (59) declarations -> IDENTIFIER .

    COMMA           shift and go to state 80
    SEMICOLON       reduce using rule 59 (declarations -> IDENTIFIER .)


state 50

    (60) var_declaration -> IDENTIFIER ASSIGN . statement
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . statement MODULO statement
    (20) statement -> . statement EQUAL statement
    (21) statement -> . statement NOT_EQUAL statement
    (22) statement -> . statement GREATER statement
    (23) statement -> . statement LESS statement
    (24) statement -> . statement GREATER_EQUAL statement
    (25) statement -> . statement LESS_EQUAL statement
    (26) statement -> . statement AND statement
    (27) statement -> . statement OR statement
    (28) statement -> . statement LOGICAL_AND statement
    (29) statement -> . statement LOGICAL_OR statement
    (30) statement -> . INT
    (31) statement -> . FLOAT
    (32) statement -> . BOOL
    (33) statement -> . STRING
    (34) statement -> . L_PAREN statement R_PAREN
    (35) statement -> . L_PAREN conditional R_PAREN
    (36) statement -> . IDENTIFIER INCREMENT
    (37) statement -> . IDENTIFIER DECREMENT

    IDENTIFIER      shift and go to state 56
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    STRING          shift and go to state 60
    L_PAREN         shift and go to state 18

    statement                      shift and go to state 81

state 51

    (36) statement -> IDENTIFIER INCREMENT .

    SEMICOLON       reduce using rule 36 (statement -> IDENTIFIER INCREMENT .)
    PLUS            reduce using rule 36 (statement -> IDENTIFIER INCREMENT .)
    MINUS           reduce using rule 36 (statement -> IDENTIFIER INCREMENT .)
    TIMES           reduce using rule 36 (statement -> IDENTIFIER INCREMENT .)
    DIVIDE          reduce using rule 36 (statement -> IDENTIFIER INCREMENT .)
    MODULO          reduce using rule 36 (statement -> IDENTIFIER INCREMENT .)
    EQUAL           reduce using rule 36 (statement -> IDENTIFIER INCREMENT .)
    NOT_EQUAL       reduce using rule 36 (statement -> IDENTIFIER INCREMENT .)
    GREATER         reduce using rule 36 (statement -> IDENTIFIER INCREMENT .)
    LESS            reduce using rule 36 (statement -> IDENTIFIER INCREMENT .)
    GREATER_EQUAL   reduce using rule 36 (statement -> IDENTIFIER INCREMENT .)
    LESS_EQUAL      reduce using rule 36 (statement -> IDENTIFIER INCREMENT .)
    AND             reduce using rule 36 (statement -> IDENTIFIER INCREMENT .)
    OR              reduce using rule 36 (statement -> IDENTIFIER INCREMENT .)
    LOGICAL_AND     reduce using rule 36 (statement -> IDENTIFIER INCREMENT .)
    LOGICAL_OR      reduce using rule 36 (statement -> IDENTIFIER INCREMENT .)
    R_PAREN         reduce using rule 36 (statement -> IDENTIFIER INCREMENT .)


state 52

    (37) statement -> IDENTIFIER DECREMENT .

    SEMICOLON       reduce using rule 37 (statement -> IDENTIFIER DECREMENT .)
    PLUS            reduce using rule 37 (statement -> IDENTIFIER DECREMENT .)
    MINUS           reduce using rule 37 (statement -> IDENTIFIER DECREMENT .)
    TIMES           reduce using rule 37 (statement -> IDENTIFIER DECREMENT .)
    DIVIDE          reduce using rule 37 (statement -> IDENTIFIER DECREMENT .)
    MODULO          reduce using rule 37 (statement -> IDENTIFIER DECREMENT .)
    EQUAL           reduce using rule 37 (statement -> IDENTIFIER DECREMENT .)
    NOT_EQUAL       reduce using rule 37 (statement -> IDENTIFIER DECREMENT .)
    GREATER         reduce using rule 37 (statement -> IDENTIFIER DECREMENT .)
    LESS            reduce using rule 37 (statement -> IDENTIFIER DECREMENT .)
    GREATER_EQUAL   reduce using rule 37 (statement -> IDENTIFIER DECREMENT .)
    LESS_EQUAL      reduce using rule 37 (statement -> IDENTIFIER DECREMENT .)
    AND             reduce using rule 37 (statement -> IDENTIFIER DECREMENT .)
    OR              reduce using rule 37 (statement -> IDENTIFIER DECREMENT .)
    LOGICAL_AND     reduce using rule 37 (statement -> IDENTIFIER DECREMENT .)
    LOGICAL_OR      reduce using rule 37 (statement -> IDENTIFIER DECREMENT .)
    R_PAREN         reduce using rule 37 (statement -> IDENTIFIER DECREMENT .)


state 53

    (12) write -> WRITE L_PAREN . statement R_PAREN
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . statement MODULO statement
    (20) statement -> . statement EQUAL statement
    (21) statement -> . statement NOT_EQUAL statement
    (22) statement -> . statement GREATER statement
    (23) statement -> . statement LESS statement
    (24) statement -> . statement GREATER_EQUAL statement
    (25) statement -> . statement LESS_EQUAL statement
    (26) statement -> . statement AND statement
    (27) statement -> . statement OR statement
    (28) statement -> . statement LOGICAL_AND statement
    (29) statement -> . statement LOGICAL_OR statement
    (30) statement -> . INT
    (31) statement -> . FLOAT
    (32) statement -> . BOOL
    (33) statement -> . STRING
    (34) statement -> . L_PAREN statement R_PAREN
    (35) statement -> . L_PAREN conditional R_PAREN
    (36) statement -> . IDENTIFIER INCREMENT
    (37) statement -> . IDENTIFIER DECREMENT

    IDENTIFIER      shift and go to state 56
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    STRING          shift and go to state 60
    L_PAREN         shift and go to state 18

    statement                      shift and go to state 82

state 54

    (34) statement -> L_PAREN statement . R_PAREN
    (15) statement -> statement . PLUS statement
    (16) statement -> statement . MINUS statement
    (17) statement -> statement . TIMES statement
    (18) statement -> statement . DIVIDE statement
    (19) statement -> statement . MODULO statement
    (20) statement -> statement . EQUAL statement
    (21) statement -> statement . NOT_EQUAL statement
    (22) statement -> statement . GREATER statement
    (23) statement -> statement . LESS statement
    (24) statement -> statement . GREATER_EQUAL statement
    (25) statement -> statement . LESS_EQUAL statement
    (26) statement -> statement . AND statement
    (27) statement -> statement . OR statement
    (28) statement -> statement . LOGICAL_AND statement
    (29) statement -> statement . LOGICAL_OR statement
    (48) conditional -> statement .

  ! shift/reduce conflict for R_PAREN resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    R_PAREN         shift and go to state 83
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    MODULO          shift and go to state 37
    EQUAL           shift and go to state 38
    NOT_EQUAL       shift and go to state 39
    GREATER         shift and go to state 40
    LESS            shift and go to state 41
    GREATER_EQUAL   shift and go to state 42
    LESS_EQUAL      shift and go to state 43
    AND             shift and go to state 44
    OR              shift and go to state 45
    LOGICAL_AND     shift and go to state 46
    LOGICAL_OR      shift and go to state 47

  ! R_PAREN         [ reduce using rule 48 (conditional -> statement .) ]
  ! EQUAL           [ reduce using rule 48 (conditional -> statement .) ]
  ! NOT_EQUAL       [ reduce using rule 48 (conditional -> statement .) ]
  ! GREATER         [ reduce using rule 48 (conditional -> statement .) ]
  ! LESS            [ reduce using rule 48 (conditional -> statement .) ]
  ! GREATER_EQUAL   [ reduce using rule 48 (conditional -> statement .) ]
  ! LESS_EQUAL      [ reduce using rule 48 (conditional -> statement .) ]
  ! AND             [ reduce using rule 48 (conditional -> statement .) ]
  ! LOGICAL_AND     [ reduce using rule 48 (conditional -> statement .) ]
  ! OR              [ reduce using rule 48 (conditional -> statement .) ]
  ! LOGICAL_OR      [ reduce using rule 48 (conditional -> statement .) ]


state 55

    (35) statement -> L_PAREN conditional . R_PAREN
    (38) conditional -> conditional . EQUAL conditional
    (39) conditional -> conditional . NOT_EQUAL conditional
    (40) conditional -> conditional . GREATER conditional
    (41) conditional -> conditional . LESS conditional
    (42) conditional -> conditional . GREATER_EQUAL conditional
    (43) conditional -> conditional . LESS_EQUAL conditional
    (44) conditional -> conditional . AND conditional
    (45) conditional -> conditional . LOGICAL_AND conditional
    (46) conditional -> conditional . OR conditional
    (47) conditional -> conditional . LOGICAL_OR conditional

    R_PAREN         shift and go to state 84
    EQUAL           shift and go to state 85
    NOT_EQUAL       shift and go to state 86
    GREATER         shift and go to state 87
    LESS            shift and go to state 88
    GREATER_EQUAL   shift and go to state 89
    LESS_EQUAL      shift and go to state 90
    AND             shift and go to state 91
    LOGICAL_AND     shift and go to state 92
    OR              shift and go to state 93
    LOGICAL_OR      shift and go to state 94


state 56

    (14) statement -> IDENTIFIER .
    (36) statement -> IDENTIFIER . INCREMENT
    (37) statement -> IDENTIFIER . DECREMENT

    R_PAREN         reduce using rule 14 (statement -> IDENTIFIER .)
    PLUS            reduce using rule 14 (statement -> IDENTIFIER .)
    MINUS           reduce using rule 14 (statement -> IDENTIFIER .)
    TIMES           reduce using rule 14 (statement -> IDENTIFIER .)
    DIVIDE          reduce using rule 14 (statement -> IDENTIFIER .)
    MODULO          reduce using rule 14 (statement -> IDENTIFIER .)
    EQUAL           reduce using rule 14 (statement -> IDENTIFIER .)
    NOT_EQUAL       reduce using rule 14 (statement -> IDENTIFIER .)
    GREATER         reduce using rule 14 (statement -> IDENTIFIER .)
    LESS            reduce using rule 14 (statement -> IDENTIFIER .)
    GREATER_EQUAL   reduce using rule 14 (statement -> IDENTIFIER .)
    LESS_EQUAL      reduce using rule 14 (statement -> IDENTIFIER .)
    AND             reduce using rule 14 (statement -> IDENTIFIER .)
    OR              reduce using rule 14 (statement -> IDENTIFIER .)
    LOGICAL_AND     reduce using rule 14 (statement -> IDENTIFIER .)
    LOGICAL_OR      reduce using rule 14 (statement -> IDENTIFIER .)
    SEMICOLON       reduce using rule 14 (statement -> IDENTIFIER .)
    INCREMENT       shift and go to state 51
    DECREMENT       shift and go to state 52


state 57

    (30) statement -> INT .

    R_PAREN         reduce using rule 30 (statement -> INT .)
    PLUS            reduce using rule 30 (statement -> INT .)
    MINUS           reduce using rule 30 (statement -> INT .)
    TIMES           reduce using rule 30 (statement -> INT .)
    DIVIDE          reduce using rule 30 (statement -> INT .)
    MODULO          reduce using rule 30 (statement -> INT .)
    EQUAL           reduce using rule 30 (statement -> INT .)
    NOT_EQUAL       reduce using rule 30 (statement -> INT .)
    GREATER         reduce using rule 30 (statement -> INT .)
    LESS            reduce using rule 30 (statement -> INT .)
    GREATER_EQUAL   reduce using rule 30 (statement -> INT .)
    LESS_EQUAL      reduce using rule 30 (statement -> INT .)
    AND             reduce using rule 30 (statement -> INT .)
    OR              reduce using rule 30 (statement -> INT .)
    LOGICAL_AND     reduce using rule 30 (statement -> INT .)
    LOGICAL_OR      reduce using rule 30 (statement -> INT .)
    SEMICOLON       reduce using rule 30 (statement -> INT .)


state 58

    (31) statement -> FLOAT .

    R_PAREN         reduce using rule 31 (statement -> FLOAT .)
    PLUS            reduce using rule 31 (statement -> FLOAT .)
    MINUS           reduce using rule 31 (statement -> FLOAT .)
    TIMES           reduce using rule 31 (statement -> FLOAT .)
    DIVIDE          reduce using rule 31 (statement -> FLOAT .)
    MODULO          reduce using rule 31 (statement -> FLOAT .)
    EQUAL           reduce using rule 31 (statement -> FLOAT .)
    NOT_EQUAL       reduce using rule 31 (statement -> FLOAT .)
    GREATER         reduce using rule 31 (statement -> FLOAT .)
    LESS            reduce using rule 31 (statement -> FLOAT .)
    GREATER_EQUAL   reduce using rule 31 (statement -> FLOAT .)
    LESS_EQUAL      reduce using rule 31 (statement -> FLOAT .)
    AND             reduce using rule 31 (statement -> FLOAT .)
    OR              reduce using rule 31 (statement -> FLOAT .)
    LOGICAL_AND     reduce using rule 31 (statement -> FLOAT .)
    LOGICAL_OR      reduce using rule 31 (statement -> FLOAT .)
    SEMICOLON       reduce using rule 31 (statement -> FLOAT .)


state 59

    (32) statement -> BOOL .

    R_PAREN         reduce using rule 32 (statement -> BOOL .)
    PLUS            reduce using rule 32 (statement -> BOOL .)
    MINUS           reduce using rule 32 (statement -> BOOL .)
    TIMES           reduce using rule 32 (statement -> BOOL .)
    DIVIDE          reduce using rule 32 (statement -> BOOL .)
    MODULO          reduce using rule 32 (statement -> BOOL .)
    EQUAL           reduce using rule 32 (statement -> BOOL .)
    NOT_EQUAL       reduce using rule 32 (statement -> BOOL .)
    GREATER         reduce using rule 32 (statement -> BOOL .)
    LESS            reduce using rule 32 (statement -> BOOL .)
    GREATER_EQUAL   reduce using rule 32 (statement -> BOOL .)
    LESS_EQUAL      reduce using rule 32 (statement -> BOOL .)
    AND             reduce using rule 32 (statement -> BOOL .)
    OR              reduce using rule 32 (statement -> BOOL .)
    LOGICAL_AND     reduce using rule 32 (statement -> BOOL .)
    LOGICAL_OR      reduce using rule 32 (statement -> BOOL .)
    SEMICOLON       reduce using rule 32 (statement -> BOOL .)


state 60

    (33) statement -> STRING .

    R_PAREN         reduce using rule 33 (statement -> STRING .)
    PLUS            reduce using rule 33 (statement -> STRING .)
    MINUS           reduce using rule 33 (statement -> STRING .)
    TIMES           reduce using rule 33 (statement -> STRING .)
    DIVIDE          reduce using rule 33 (statement -> STRING .)
    MODULO          reduce using rule 33 (statement -> STRING .)
    EQUAL           reduce using rule 33 (statement -> STRING .)
    NOT_EQUAL       reduce using rule 33 (statement -> STRING .)
    GREATER         reduce using rule 33 (statement -> STRING .)
    LESS            reduce using rule 33 (statement -> STRING .)
    GREATER_EQUAL   reduce using rule 33 (statement -> STRING .)
    LESS_EQUAL      reduce using rule 33 (statement -> STRING .)
    AND             reduce using rule 33 (statement -> STRING .)
    OR              reduce using rule 33 (statement -> STRING .)
    LOGICAL_AND     reduce using rule 33 (statement -> STRING .)
    LOGICAL_OR      reduce using rule 33 (statement -> STRING .)
    SEMICOLON       reduce using rule 33 (statement -> STRING .)


state 61

    (13) writeln -> WRITELN L_PAREN . statement R_PAREN
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . statement MODULO statement
    (20) statement -> . statement EQUAL statement
    (21) statement -> . statement NOT_EQUAL statement
    (22) statement -> . statement GREATER statement
    (23) statement -> . statement LESS statement
    (24) statement -> . statement GREATER_EQUAL statement
    (25) statement -> . statement LESS_EQUAL statement
    (26) statement -> . statement AND statement
    (27) statement -> . statement OR statement
    (28) statement -> . statement LOGICAL_AND statement
    (29) statement -> . statement LOGICAL_OR statement
    (30) statement -> . INT
    (31) statement -> . FLOAT
    (32) statement -> . BOOL
    (33) statement -> . STRING
    (34) statement -> . L_PAREN statement R_PAREN
    (35) statement -> . L_PAREN conditional R_PAREN
    (36) statement -> . IDENTIFIER INCREMENT
    (37) statement -> . IDENTIFIER DECREMENT

    IDENTIFIER      shift and go to state 56
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    STRING          shift and go to state 60
    L_PAREN         shift and go to state 18

    statement                      shift and go to state 95

state 62

    (51) if_else_statement -> IF L_PAREN . conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE
    (52) if_else_statement -> IF L_PAREN . conditional R_PAREN L_BRACE expressions R_BRACE
    (38) conditional -> . conditional EQUAL conditional
    (39) conditional -> . conditional NOT_EQUAL conditional
    (40) conditional -> . conditional GREATER conditional
    (41) conditional -> . conditional LESS conditional
    (42) conditional -> . conditional GREATER_EQUAL conditional
    (43) conditional -> . conditional LESS_EQUAL conditional
    (44) conditional -> . conditional AND conditional
    (45) conditional -> . conditional LOGICAL_AND conditional
    (46) conditional -> . conditional OR conditional
    (47) conditional -> . conditional LOGICAL_OR conditional
    (48) conditional -> . statement
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . statement MODULO statement
    (20) statement -> . statement EQUAL statement
    (21) statement -> . statement NOT_EQUAL statement
    (22) statement -> . statement GREATER statement
    (23) statement -> . statement LESS statement
    (24) statement -> . statement GREATER_EQUAL statement
    (25) statement -> . statement LESS_EQUAL statement
    (26) statement -> . statement AND statement
    (27) statement -> . statement OR statement
    (28) statement -> . statement LOGICAL_AND statement
    (29) statement -> . statement LOGICAL_OR statement
    (30) statement -> . INT
    (31) statement -> . FLOAT
    (32) statement -> . BOOL
    (33) statement -> . STRING
    (34) statement -> . L_PAREN statement R_PAREN
    (35) statement -> . L_PAREN conditional R_PAREN
    (36) statement -> . IDENTIFIER INCREMENT
    (37) statement -> . IDENTIFIER DECREMENT

    IDENTIFIER      shift and go to state 56
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    STRING          shift and go to state 60
    L_PAREN         shift and go to state 18

    conditional                    shift and go to state 96
    statement                      shift and go to state 97

state 63

    (49) for_loop -> FOR L_PAREN . var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE
    (53) var_declaration -> . data_type declarations
    (60) var_declaration -> . IDENTIFIER ASSIGN statement
    (54) data_type -> . INT
    (55) data_type -> . FLOAT
    (56) data_type -> . BOOL
    (57) data_type -> . STRING

    IDENTIFIER      shift and go to state 99
    INT             shift and go to state 100
    FLOAT           shift and go to state 101
    BOOL            shift and go to state 102
    STRING          shift and go to state 103

    var_declaration                shift and go to state 98
    data_type                      shift and go to state 15

state 64

    (50) while_loop -> WHILE L_PAREN . conditional R_PAREN L_BRACE expressions R_BRACE
    (38) conditional -> . conditional EQUAL conditional
    (39) conditional -> . conditional NOT_EQUAL conditional
    (40) conditional -> . conditional GREATER conditional
    (41) conditional -> . conditional LESS conditional
    (42) conditional -> . conditional GREATER_EQUAL conditional
    (43) conditional -> . conditional LESS_EQUAL conditional
    (44) conditional -> . conditional AND conditional
    (45) conditional -> . conditional LOGICAL_AND conditional
    (46) conditional -> . conditional OR conditional
    (47) conditional -> . conditional LOGICAL_OR conditional
    (48) conditional -> . statement
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . statement MODULO statement
    (20) statement -> . statement EQUAL statement
    (21) statement -> . statement NOT_EQUAL statement
    (22) statement -> . statement GREATER statement
    (23) statement -> . statement LESS statement
    (24) statement -> . statement GREATER_EQUAL statement
    (25) statement -> . statement LESS_EQUAL statement
    (26) statement -> . statement AND statement
    (27) statement -> . statement OR statement
    (28) statement -> . statement LOGICAL_AND statement
    (29) statement -> . statement LOGICAL_OR statement
    (30) statement -> . INT
    (31) statement -> . FLOAT
    (32) statement -> . BOOL
    (33) statement -> . STRING
    (34) statement -> . L_PAREN statement R_PAREN
    (35) statement -> . L_PAREN conditional R_PAREN
    (36) statement -> . IDENTIFIER INCREMENT
    (37) statement -> . IDENTIFIER DECREMENT

    IDENTIFIER      shift and go to state 56
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    STRING          shift and go to state 60
    L_PAREN         shift and go to state 18

    conditional                    shift and go to state 104
    statement                      shift and go to state 97

state 65

    (15) statement -> statement PLUS statement .
    (15) statement -> statement . PLUS statement
    (16) statement -> statement . MINUS statement
    (17) statement -> statement . TIMES statement
    (18) statement -> statement . DIVIDE statement
    (19) statement -> statement . MODULO statement
    (20) statement -> statement . EQUAL statement
    (21) statement -> statement . NOT_EQUAL statement
    (22) statement -> statement . GREATER statement
    (23) statement -> statement . LESS statement
    (24) statement -> statement . GREATER_EQUAL statement
    (25) statement -> statement . LESS_EQUAL statement
    (26) statement -> statement . AND statement
    (27) statement -> statement . OR statement
    (28) statement -> statement . LOGICAL_AND statement
    (29) statement -> statement . LOGICAL_OR statement

    SEMICOLON       reduce using rule 15 (statement -> statement PLUS statement .)
    PLUS            reduce using rule 15 (statement -> statement PLUS statement .)
    MINUS           reduce using rule 15 (statement -> statement PLUS statement .)
    MODULO          reduce using rule 15 (statement -> statement PLUS statement .)
    EQUAL           reduce using rule 15 (statement -> statement PLUS statement .)
    NOT_EQUAL       reduce using rule 15 (statement -> statement PLUS statement .)
    GREATER         reduce using rule 15 (statement -> statement PLUS statement .)
    LESS            reduce using rule 15 (statement -> statement PLUS statement .)
    GREATER_EQUAL   reduce using rule 15 (statement -> statement PLUS statement .)
    LESS_EQUAL      reduce using rule 15 (statement -> statement PLUS statement .)
    LOGICAL_AND     reduce using rule 15 (statement -> statement PLUS statement .)
    LOGICAL_OR      reduce using rule 15 (statement -> statement PLUS statement .)
    R_PAREN         reduce using rule 15 (statement -> statement PLUS statement .)
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    AND             shift and go to state 44
    OR              shift and go to state 45

  ! TIMES           [ reduce using rule 15 (statement -> statement PLUS statement .) ]
  ! DIVIDE          [ reduce using rule 15 (statement -> statement PLUS statement .) ]
  ! AND             [ reduce using rule 15 (statement -> statement PLUS statement .) ]
  ! OR              [ reduce using rule 15 (statement -> statement PLUS statement .) ]
  ! PLUS            [ shift and go to state 33 ]
  ! MINUS           [ shift and go to state 34 ]
  ! MODULO          [ shift and go to state 37 ]
  ! EQUAL           [ shift and go to state 38 ]
  ! NOT_EQUAL       [ shift and go to state 39 ]
  ! GREATER         [ shift and go to state 40 ]
  ! LESS            [ shift and go to state 41 ]
  ! GREATER_EQUAL   [ shift and go to state 42 ]
  ! LESS_EQUAL      [ shift and go to state 43 ]
  ! LOGICAL_AND     [ shift and go to state 46 ]
  ! LOGICAL_OR      [ shift and go to state 47 ]


state 66

    (16) statement -> statement MINUS statement .
    (15) statement -> statement . PLUS statement
    (16) statement -> statement . MINUS statement
    (17) statement -> statement . TIMES statement
    (18) statement -> statement . DIVIDE statement
    (19) statement -> statement . MODULO statement
    (20) statement -> statement . EQUAL statement
    (21) statement -> statement . NOT_EQUAL statement
    (22) statement -> statement . GREATER statement
    (23) statement -> statement . LESS statement
    (24) statement -> statement . GREATER_EQUAL statement
    (25) statement -> statement . LESS_EQUAL statement
    (26) statement -> statement . AND statement
    (27) statement -> statement . OR statement
    (28) statement -> statement . LOGICAL_AND statement
    (29) statement -> statement . LOGICAL_OR statement

    SEMICOLON       reduce using rule 16 (statement -> statement MINUS statement .)
    PLUS            reduce using rule 16 (statement -> statement MINUS statement .)
    MINUS           reduce using rule 16 (statement -> statement MINUS statement .)
    MODULO          reduce using rule 16 (statement -> statement MINUS statement .)
    EQUAL           reduce using rule 16 (statement -> statement MINUS statement .)
    NOT_EQUAL       reduce using rule 16 (statement -> statement MINUS statement .)
    GREATER         reduce using rule 16 (statement -> statement MINUS statement .)
    LESS            reduce using rule 16 (statement -> statement MINUS statement .)
    GREATER_EQUAL   reduce using rule 16 (statement -> statement MINUS statement .)
    LESS_EQUAL      reduce using rule 16 (statement -> statement MINUS statement .)
    LOGICAL_AND     reduce using rule 16 (statement -> statement MINUS statement .)
    LOGICAL_OR      reduce using rule 16 (statement -> statement MINUS statement .)
    R_PAREN         reduce using rule 16 (statement -> statement MINUS statement .)
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    AND             shift and go to state 44
    OR              shift and go to state 45

  ! TIMES           [ reduce using rule 16 (statement -> statement MINUS statement .) ]
  ! DIVIDE          [ reduce using rule 16 (statement -> statement MINUS statement .) ]
  ! AND             [ reduce using rule 16 (statement -> statement MINUS statement .) ]
  ! OR              [ reduce using rule 16 (statement -> statement MINUS statement .) ]
  ! PLUS            [ shift and go to state 33 ]
  ! MINUS           [ shift and go to state 34 ]
  ! MODULO          [ shift and go to state 37 ]
  ! EQUAL           [ shift and go to state 38 ]
  ! NOT_EQUAL       [ shift and go to state 39 ]
  ! GREATER         [ shift and go to state 40 ]
  ! LESS            [ shift and go to state 41 ]
  ! GREATER_EQUAL   [ shift and go to state 42 ]
  ! LESS_EQUAL      [ shift and go to state 43 ]
  ! LOGICAL_AND     [ shift and go to state 46 ]
  ! LOGICAL_OR      [ shift and go to state 47 ]


state 67

    (17) statement -> statement TIMES statement .
    (15) statement -> statement . PLUS statement
    (16) statement -> statement . MINUS statement
    (17) statement -> statement . TIMES statement
    (18) statement -> statement . DIVIDE statement
    (19) statement -> statement . MODULO statement
    (20) statement -> statement . EQUAL statement
    (21) statement -> statement . NOT_EQUAL statement
    (22) statement -> statement . GREATER statement
    (23) statement -> statement . LESS statement
    (24) statement -> statement . GREATER_EQUAL statement
    (25) statement -> statement . LESS_EQUAL statement
    (26) statement -> statement . AND statement
    (27) statement -> statement . OR statement
    (28) statement -> statement . LOGICAL_AND statement
    (29) statement -> statement . LOGICAL_OR statement

    SEMICOLON       reduce using rule 17 (statement -> statement TIMES statement .)
    PLUS            reduce using rule 17 (statement -> statement TIMES statement .)
    MINUS           reduce using rule 17 (statement -> statement TIMES statement .)
    TIMES           reduce using rule 17 (statement -> statement TIMES statement .)
    DIVIDE          reduce using rule 17 (statement -> statement TIMES statement .)
    MODULO          reduce using rule 17 (statement -> statement TIMES statement .)
    EQUAL           reduce using rule 17 (statement -> statement TIMES statement .)
    NOT_EQUAL       reduce using rule 17 (statement -> statement TIMES statement .)
    GREATER         reduce using rule 17 (statement -> statement TIMES statement .)
    LESS            reduce using rule 17 (statement -> statement TIMES statement .)
    GREATER_EQUAL   reduce using rule 17 (statement -> statement TIMES statement .)
    LESS_EQUAL      reduce using rule 17 (statement -> statement TIMES statement .)
    AND             reduce using rule 17 (statement -> statement TIMES statement .)
    OR              reduce using rule 17 (statement -> statement TIMES statement .)
    LOGICAL_AND     reduce using rule 17 (statement -> statement TIMES statement .)
    LOGICAL_OR      reduce using rule 17 (statement -> statement TIMES statement .)
    R_PAREN         reduce using rule 17 (statement -> statement TIMES statement .)

  ! PLUS            [ shift and go to state 33 ]
  ! MINUS           [ shift and go to state 34 ]
  ! TIMES           [ shift and go to state 35 ]
  ! DIVIDE          [ shift and go to state 36 ]
  ! MODULO          [ shift and go to state 37 ]
  ! EQUAL           [ shift and go to state 38 ]
  ! NOT_EQUAL       [ shift and go to state 39 ]
  ! GREATER         [ shift and go to state 40 ]
  ! LESS            [ shift and go to state 41 ]
  ! GREATER_EQUAL   [ shift and go to state 42 ]
  ! LESS_EQUAL      [ shift and go to state 43 ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]
  ! LOGICAL_AND     [ shift and go to state 46 ]
  ! LOGICAL_OR      [ shift and go to state 47 ]


state 68

    (18) statement -> statement DIVIDE statement .
    (15) statement -> statement . PLUS statement
    (16) statement -> statement . MINUS statement
    (17) statement -> statement . TIMES statement
    (18) statement -> statement . DIVIDE statement
    (19) statement -> statement . MODULO statement
    (20) statement -> statement . EQUAL statement
    (21) statement -> statement . NOT_EQUAL statement
    (22) statement -> statement . GREATER statement
    (23) statement -> statement . LESS statement
    (24) statement -> statement . GREATER_EQUAL statement
    (25) statement -> statement . LESS_EQUAL statement
    (26) statement -> statement . AND statement
    (27) statement -> statement . OR statement
    (28) statement -> statement . LOGICAL_AND statement
    (29) statement -> statement . LOGICAL_OR statement

    SEMICOLON       reduce using rule 18 (statement -> statement DIVIDE statement .)
    PLUS            reduce using rule 18 (statement -> statement DIVIDE statement .)
    MINUS           reduce using rule 18 (statement -> statement DIVIDE statement .)
    TIMES           reduce using rule 18 (statement -> statement DIVIDE statement .)
    DIVIDE          reduce using rule 18 (statement -> statement DIVIDE statement .)
    MODULO          reduce using rule 18 (statement -> statement DIVIDE statement .)
    EQUAL           reduce using rule 18 (statement -> statement DIVIDE statement .)
    NOT_EQUAL       reduce using rule 18 (statement -> statement DIVIDE statement .)
    GREATER         reduce using rule 18 (statement -> statement DIVIDE statement .)
    LESS            reduce using rule 18 (statement -> statement DIVIDE statement .)
    GREATER_EQUAL   reduce using rule 18 (statement -> statement DIVIDE statement .)
    LESS_EQUAL      reduce using rule 18 (statement -> statement DIVIDE statement .)
    AND             reduce using rule 18 (statement -> statement DIVIDE statement .)
    OR              reduce using rule 18 (statement -> statement DIVIDE statement .)
    LOGICAL_AND     reduce using rule 18 (statement -> statement DIVIDE statement .)
    LOGICAL_OR      reduce using rule 18 (statement -> statement DIVIDE statement .)
    R_PAREN         reduce using rule 18 (statement -> statement DIVIDE statement .)

  ! PLUS            [ shift and go to state 33 ]
  ! MINUS           [ shift and go to state 34 ]
  ! TIMES           [ shift and go to state 35 ]
  ! DIVIDE          [ shift and go to state 36 ]
  ! MODULO          [ shift and go to state 37 ]
  ! EQUAL           [ shift and go to state 38 ]
  ! NOT_EQUAL       [ shift and go to state 39 ]
  ! GREATER         [ shift and go to state 40 ]
  ! LESS            [ shift and go to state 41 ]
  ! GREATER_EQUAL   [ shift and go to state 42 ]
  ! LESS_EQUAL      [ shift and go to state 43 ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]
  ! LOGICAL_AND     [ shift and go to state 46 ]
  ! LOGICAL_OR      [ shift and go to state 47 ]


state 69

    (19) statement -> statement MODULO statement .
    (15) statement -> statement . PLUS statement
    (16) statement -> statement . MINUS statement
    (17) statement -> statement . TIMES statement
    (18) statement -> statement . DIVIDE statement
    (19) statement -> statement . MODULO statement
    (20) statement -> statement . EQUAL statement
    (21) statement -> statement . NOT_EQUAL statement
    (22) statement -> statement . GREATER statement
    (23) statement -> statement . LESS statement
    (24) statement -> statement . GREATER_EQUAL statement
    (25) statement -> statement . LESS_EQUAL statement
    (26) statement -> statement . AND statement
    (27) statement -> statement . OR statement
    (28) statement -> statement . LOGICAL_AND statement
    (29) statement -> statement . LOGICAL_OR statement

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    SEMICOLON       reduce using rule 19 (statement -> statement MODULO statement .)
    R_PAREN         reduce using rule 19 (statement -> statement MODULO statement .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    MODULO          shift and go to state 37
    EQUAL           shift and go to state 38
    NOT_EQUAL       shift and go to state 39
    GREATER         shift and go to state 40
    LESS            shift and go to state 41
    GREATER_EQUAL   shift and go to state 42
    LESS_EQUAL      shift and go to state 43
    AND             shift and go to state 44
    OR              shift and go to state 45
    LOGICAL_AND     shift and go to state 46
    LOGICAL_OR      shift and go to state 47

  ! PLUS            [ reduce using rule 19 (statement -> statement MODULO statement .) ]
  ! MINUS           [ reduce using rule 19 (statement -> statement MODULO statement .) ]
  ! TIMES           [ reduce using rule 19 (statement -> statement MODULO statement .) ]
  ! DIVIDE          [ reduce using rule 19 (statement -> statement MODULO statement .) ]
  ! MODULO          [ reduce using rule 19 (statement -> statement MODULO statement .) ]
  ! EQUAL           [ reduce using rule 19 (statement -> statement MODULO statement .) ]
  ! NOT_EQUAL       [ reduce using rule 19 (statement -> statement MODULO statement .) ]
  ! GREATER         [ reduce using rule 19 (statement -> statement MODULO statement .) ]
  ! LESS            [ reduce using rule 19 (statement -> statement MODULO statement .) ]
  ! GREATER_EQUAL   [ reduce using rule 19 (statement -> statement MODULO statement .) ]
  ! LESS_EQUAL      [ reduce using rule 19 (statement -> statement MODULO statement .) ]
  ! AND             [ reduce using rule 19 (statement -> statement MODULO statement .) ]
  ! OR              [ reduce using rule 19 (statement -> statement MODULO statement .) ]
  ! LOGICAL_AND     [ reduce using rule 19 (statement -> statement MODULO statement .) ]
  ! LOGICAL_OR      [ reduce using rule 19 (statement -> statement MODULO statement .) ]


state 70

    (20) statement -> statement EQUAL statement .
    (15) statement -> statement . PLUS statement
    (16) statement -> statement . MINUS statement
    (17) statement -> statement . TIMES statement
    (18) statement -> statement . DIVIDE statement
    (19) statement -> statement . MODULO statement
    (20) statement -> statement . EQUAL statement
    (21) statement -> statement . NOT_EQUAL statement
    (22) statement -> statement . GREATER statement
    (23) statement -> statement . LESS statement
    (24) statement -> statement . GREATER_EQUAL statement
    (25) statement -> statement . LESS_EQUAL statement
    (26) statement -> statement . AND statement
    (27) statement -> statement . OR statement
    (28) statement -> statement . LOGICAL_AND statement
    (29) statement -> statement . LOGICAL_OR statement

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    SEMICOLON       reduce using rule 20 (statement -> statement EQUAL statement .)
    R_PAREN         reduce using rule 20 (statement -> statement EQUAL statement .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    MODULO          shift and go to state 37
    EQUAL           shift and go to state 38
    NOT_EQUAL       shift and go to state 39
    GREATER         shift and go to state 40
    LESS            shift and go to state 41
    GREATER_EQUAL   shift and go to state 42
    LESS_EQUAL      shift and go to state 43
    AND             shift and go to state 44
    OR              shift and go to state 45
    LOGICAL_AND     shift and go to state 46
    LOGICAL_OR      shift and go to state 47

  ! PLUS            [ reduce using rule 20 (statement -> statement EQUAL statement .) ]
  ! MINUS           [ reduce using rule 20 (statement -> statement EQUAL statement .) ]
  ! TIMES           [ reduce using rule 20 (statement -> statement EQUAL statement .) ]
  ! DIVIDE          [ reduce using rule 20 (statement -> statement EQUAL statement .) ]
  ! MODULO          [ reduce using rule 20 (statement -> statement EQUAL statement .) ]
  ! EQUAL           [ reduce using rule 20 (statement -> statement EQUAL statement .) ]
  ! NOT_EQUAL       [ reduce using rule 20 (statement -> statement EQUAL statement .) ]
  ! GREATER         [ reduce using rule 20 (statement -> statement EQUAL statement .) ]
  ! LESS            [ reduce using rule 20 (statement -> statement EQUAL statement .) ]
  ! GREATER_EQUAL   [ reduce using rule 20 (statement -> statement EQUAL statement .) ]
  ! LESS_EQUAL      [ reduce using rule 20 (statement -> statement EQUAL statement .) ]
  ! AND             [ reduce using rule 20 (statement -> statement EQUAL statement .) ]
  ! OR              [ reduce using rule 20 (statement -> statement EQUAL statement .) ]
  ! LOGICAL_AND     [ reduce using rule 20 (statement -> statement EQUAL statement .) ]
  ! LOGICAL_OR      [ reduce using rule 20 (statement -> statement EQUAL statement .) ]


state 71

    (21) statement -> statement NOT_EQUAL statement .
    (15) statement -> statement . PLUS statement
    (16) statement -> statement . MINUS statement
    (17) statement -> statement . TIMES statement
    (18) statement -> statement . DIVIDE statement
    (19) statement -> statement . MODULO statement
    (20) statement -> statement . EQUAL statement
    (21) statement -> statement . NOT_EQUAL statement
    (22) statement -> statement . GREATER statement
    (23) statement -> statement . LESS statement
    (24) statement -> statement . GREATER_EQUAL statement
    (25) statement -> statement . LESS_EQUAL statement
    (26) statement -> statement . AND statement
    (27) statement -> statement . OR statement
    (28) statement -> statement . LOGICAL_AND statement
    (29) statement -> statement . LOGICAL_OR statement

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    SEMICOLON       reduce using rule 21 (statement -> statement NOT_EQUAL statement .)
    R_PAREN         reduce using rule 21 (statement -> statement NOT_EQUAL statement .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    MODULO          shift and go to state 37
    EQUAL           shift and go to state 38
    NOT_EQUAL       shift and go to state 39
    GREATER         shift and go to state 40
    LESS            shift and go to state 41
    GREATER_EQUAL   shift and go to state 42
    LESS_EQUAL      shift and go to state 43
    AND             shift and go to state 44
    OR              shift and go to state 45
    LOGICAL_AND     shift and go to state 46
    LOGICAL_OR      shift and go to state 47

  ! PLUS            [ reduce using rule 21 (statement -> statement NOT_EQUAL statement .) ]
  ! MINUS           [ reduce using rule 21 (statement -> statement NOT_EQUAL statement .) ]
  ! TIMES           [ reduce using rule 21 (statement -> statement NOT_EQUAL statement .) ]
  ! DIVIDE          [ reduce using rule 21 (statement -> statement NOT_EQUAL statement .) ]
  ! MODULO          [ reduce using rule 21 (statement -> statement NOT_EQUAL statement .) ]
  ! EQUAL           [ reduce using rule 21 (statement -> statement NOT_EQUAL statement .) ]
  ! NOT_EQUAL       [ reduce using rule 21 (statement -> statement NOT_EQUAL statement .) ]
  ! GREATER         [ reduce using rule 21 (statement -> statement NOT_EQUAL statement .) ]
  ! LESS            [ reduce using rule 21 (statement -> statement NOT_EQUAL statement .) ]
  ! GREATER_EQUAL   [ reduce using rule 21 (statement -> statement NOT_EQUAL statement .) ]
  ! LESS_EQUAL      [ reduce using rule 21 (statement -> statement NOT_EQUAL statement .) ]
  ! AND             [ reduce using rule 21 (statement -> statement NOT_EQUAL statement .) ]
  ! OR              [ reduce using rule 21 (statement -> statement NOT_EQUAL statement .) ]
  ! LOGICAL_AND     [ reduce using rule 21 (statement -> statement NOT_EQUAL statement .) ]
  ! LOGICAL_OR      [ reduce using rule 21 (statement -> statement NOT_EQUAL statement .) ]


state 72

    (22) statement -> statement GREATER statement .
    (15) statement -> statement . PLUS statement
    (16) statement -> statement . MINUS statement
    (17) statement -> statement . TIMES statement
    (18) statement -> statement . DIVIDE statement
    (19) statement -> statement . MODULO statement
    (20) statement -> statement . EQUAL statement
    (21) statement -> statement . NOT_EQUAL statement
    (22) statement -> statement . GREATER statement
    (23) statement -> statement . LESS statement
    (24) statement -> statement . GREATER_EQUAL statement
    (25) statement -> statement . LESS_EQUAL statement
    (26) statement -> statement . AND statement
    (27) statement -> statement . OR statement
    (28) statement -> statement . LOGICAL_AND statement
    (29) statement -> statement . LOGICAL_OR statement

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    SEMICOLON       reduce using rule 22 (statement -> statement GREATER statement .)
    R_PAREN         reduce using rule 22 (statement -> statement GREATER statement .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    MODULO          shift and go to state 37
    EQUAL           shift and go to state 38
    NOT_EQUAL       shift and go to state 39
    GREATER         shift and go to state 40
    LESS            shift and go to state 41
    GREATER_EQUAL   shift and go to state 42
    LESS_EQUAL      shift and go to state 43
    AND             shift and go to state 44
    OR              shift and go to state 45
    LOGICAL_AND     shift and go to state 46
    LOGICAL_OR      shift and go to state 47

  ! PLUS            [ reduce using rule 22 (statement -> statement GREATER statement .) ]
  ! MINUS           [ reduce using rule 22 (statement -> statement GREATER statement .) ]
  ! TIMES           [ reduce using rule 22 (statement -> statement GREATER statement .) ]
  ! DIVIDE          [ reduce using rule 22 (statement -> statement GREATER statement .) ]
  ! MODULO          [ reduce using rule 22 (statement -> statement GREATER statement .) ]
  ! EQUAL           [ reduce using rule 22 (statement -> statement GREATER statement .) ]
  ! NOT_EQUAL       [ reduce using rule 22 (statement -> statement GREATER statement .) ]
  ! GREATER         [ reduce using rule 22 (statement -> statement GREATER statement .) ]
  ! LESS            [ reduce using rule 22 (statement -> statement GREATER statement .) ]
  ! GREATER_EQUAL   [ reduce using rule 22 (statement -> statement GREATER statement .) ]
  ! LESS_EQUAL      [ reduce using rule 22 (statement -> statement GREATER statement .) ]
  ! AND             [ reduce using rule 22 (statement -> statement GREATER statement .) ]
  ! OR              [ reduce using rule 22 (statement -> statement GREATER statement .) ]
  ! LOGICAL_AND     [ reduce using rule 22 (statement -> statement GREATER statement .) ]
  ! LOGICAL_OR      [ reduce using rule 22 (statement -> statement GREATER statement .) ]


state 73

    (23) statement -> statement LESS statement .
    (15) statement -> statement . PLUS statement
    (16) statement -> statement . MINUS statement
    (17) statement -> statement . TIMES statement
    (18) statement -> statement . DIVIDE statement
    (19) statement -> statement . MODULO statement
    (20) statement -> statement . EQUAL statement
    (21) statement -> statement . NOT_EQUAL statement
    (22) statement -> statement . GREATER statement
    (23) statement -> statement . LESS statement
    (24) statement -> statement . GREATER_EQUAL statement
    (25) statement -> statement . LESS_EQUAL statement
    (26) statement -> statement . AND statement
    (27) statement -> statement . OR statement
    (28) statement -> statement . LOGICAL_AND statement
    (29) statement -> statement . LOGICAL_OR statement

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    SEMICOLON       reduce using rule 23 (statement -> statement LESS statement .)
    R_PAREN         reduce using rule 23 (statement -> statement LESS statement .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    MODULO          shift and go to state 37
    EQUAL           shift and go to state 38
    NOT_EQUAL       shift and go to state 39
    GREATER         shift and go to state 40
    LESS            shift and go to state 41
    GREATER_EQUAL   shift and go to state 42
    LESS_EQUAL      shift and go to state 43
    AND             shift and go to state 44
    OR              shift and go to state 45
    LOGICAL_AND     shift and go to state 46
    LOGICAL_OR      shift and go to state 47

  ! PLUS            [ reduce using rule 23 (statement -> statement LESS statement .) ]
  ! MINUS           [ reduce using rule 23 (statement -> statement LESS statement .) ]
  ! TIMES           [ reduce using rule 23 (statement -> statement LESS statement .) ]
  ! DIVIDE          [ reduce using rule 23 (statement -> statement LESS statement .) ]
  ! MODULO          [ reduce using rule 23 (statement -> statement LESS statement .) ]
  ! EQUAL           [ reduce using rule 23 (statement -> statement LESS statement .) ]
  ! NOT_EQUAL       [ reduce using rule 23 (statement -> statement LESS statement .) ]
  ! GREATER         [ reduce using rule 23 (statement -> statement LESS statement .) ]
  ! LESS            [ reduce using rule 23 (statement -> statement LESS statement .) ]
  ! GREATER_EQUAL   [ reduce using rule 23 (statement -> statement LESS statement .) ]
  ! LESS_EQUAL      [ reduce using rule 23 (statement -> statement LESS statement .) ]
  ! AND             [ reduce using rule 23 (statement -> statement LESS statement .) ]
  ! OR              [ reduce using rule 23 (statement -> statement LESS statement .) ]
  ! LOGICAL_AND     [ reduce using rule 23 (statement -> statement LESS statement .) ]
  ! LOGICAL_OR      [ reduce using rule 23 (statement -> statement LESS statement .) ]


state 74

    (24) statement -> statement GREATER_EQUAL statement .
    (15) statement -> statement . PLUS statement
    (16) statement -> statement . MINUS statement
    (17) statement -> statement . TIMES statement
    (18) statement -> statement . DIVIDE statement
    (19) statement -> statement . MODULO statement
    (20) statement -> statement . EQUAL statement
    (21) statement -> statement . NOT_EQUAL statement
    (22) statement -> statement . GREATER statement
    (23) statement -> statement . LESS statement
    (24) statement -> statement . GREATER_EQUAL statement
    (25) statement -> statement . LESS_EQUAL statement
    (26) statement -> statement . AND statement
    (27) statement -> statement . OR statement
    (28) statement -> statement . LOGICAL_AND statement
    (29) statement -> statement . LOGICAL_OR statement

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    SEMICOLON       reduce using rule 24 (statement -> statement GREATER_EQUAL statement .)
    R_PAREN         reduce using rule 24 (statement -> statement GREATER_EQUAL statement .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    MODULO          shift and go to state 37
    EQUAL           shift and go to state 38
    NOT_EQUAL       shift and go to state 39
    GREATER         shift and go to state 40
    LESS            shift and go to state 41
    GREATER_EQUAL   shift and go to state 42
    LESS_EQUAL      shift and go to state 43
    AND             shift and go to state 44
    OR              shift and go to state 45
    LOGICAL_AND     shift and go to state 46
    LOGICAL_OR      shift and go to state 47

  ! PLUS            [ reduce using rule 24 (statement -> statement GREATER_EQUAL statement .) ]
  ! MINUS           [ reduce using rule 24 (statement -> statement GREATER_EQUAL statement .) ]
  ! TIMES           [ reduce using rule 24 (statement -> statement GREATER_EQUAL statement .) ]
  ! DIVIDE          [ reduce using rule 24 (statement -> statement GREATER_EQUAL statement .) ]
  ! MODULO          [ reduce using rule 24 (statement -> statement GREATER_EQUAL statement .) ]
  ! EQUAL           [ reduce using rule 24 (statement -> statement GREATER_EQUAL statement .) ]
  ! NOT_EQUAL       [ reduce using rule 24 (statement -> statement GREATER_EQUAL statement .) ]
  ! GREATER         [ reduce using rule 24 (statement -> statement GREATER_EQUAL statement .) ]
  ! LESS            [ reduce using rule 24 (statement -> statement GREATER_EQUAL statement .) ]
  ! GREATER_EQUAL   [ reduce using rule 24 (statement -> statement GREATER_EQUAL statement .) ]
  ! LESS_EQUAL      [ reduce using rule 24 (statement -> statement GREATER_EQUAL statement .) ]
  ! AND             [ reduce using rule 24 (statement -> statement GREATER_EQUAL statement .) ]
  ! OR              [ reduce using rule 24 (statement -> statement GREATER_EQUAL statement .) ]
  ! LOGICAL_AND     [ reduce using rule 24 (statement -> statement GREATER_EQUAL statement .) ]
  ! LOGICAL_OR      [ reduce using rule 24 (statement -> statement GREATER_EQUAL statement .) ]


state 75

    (25) statement -> statement LESS_EQUAL statement .
    (15) statement -> statement . PLUS statement
    (16) statement -> statement . MINUS statement
    (17) statement -> statement . TIMES statement
    (18) statement -> statement . DIVIDE statement
    (19) statement -> statement . MODULO statement
    (20) statement -> statement . EQUAL statement
    (21) statement -> statement . NOT_EQUAL statement
    (22) statement -> statement . GREATER statement
    (23) statement -> statement . LESS statement
    (24) statement -> statement . GREATER_EQUAL statement
    (25) statement -> statement . LESS_EQUAL statement
    (26) statement -> statement . AND statement
    (27) statement -> statement . OR statement
    (28) statement -> statement . LOGICAL_AND statement
    (29) statement -> statement . LOGICAL_OR statement

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    SEMICOLON       reduce using rule 25 (statement -> statement LESS_EQUAL statement .)
    R_PAREN         reduce using rule 25 (statement -> statement LESS_EQUAL statement .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    MODULO          shift and go to state 37
    EQUAL           shift and go to state 38
    NOT_EQUAL       shift and go to state 39
    GREATER         shift and go to state 40
    LESS            shift and go to state 41
    GREATER_EQUAL   shift and go to state 42
    LESS_EQUAL      shift and go to state 43
    AND             shift and go to state 44
    OR              shift and go to state 45
    LOGICAL_AND     shift and go to state 46
    LOGICAL_OR      shift and go to state 47

  ! PLUS            [ reduce using rule 25 (statement -> statement LESS_EQUAL statement .) ]
  ! MINUS           [ reduce using rule 25 (statement -> statement LESS_EQUAL statement .) ]
  ! TIMES           [ reduce using rule 25 (statement -> statement LESS_EQUAL statement .) ]
  ! DIVIDE          [ reduce using rule 25 (statement -> statement LESS_EQUAL statement .) ]
  ! MODULO          [ reduce using rule 25 (statement -> statement LESS_EQUAL statement .) ]
  ! EQUAL           [ reduce using rule 25 (statement -> statement LESS_EQUAL statement .) ]
  ! NOT_EQUAL       [ reduce using rule 25 (statement -> statement LESS_EQUAL statement .) ]
  ! GREATER         [ reduce using rule 25 (statement -> statement LESS_EQUAL statement .) ]
  ! LESS            [ reduce using rule 25 (statement -> statement LESS_EQUAL statement .) ]
  ! GREATER_EQUAL   [ reduce using rule 25 (statement -> statement LESS_EQUAL statement .) ]
  ! LESS_EQUAL      [ reduce using rule 25 (statement -> statement LESS_EQUAL statement .) ]
  ! AND             [ reduce using rule 25 (statement -> statement LESS_EQUAL statement .) ]
  ! OR              [ reduce using rule 25 (statement -> statement LESS_EQUAL statement .) ]
  ! LOGICAL_AND     [ reduce using rule 25 (statement -> statement LESS_EQUAL statement .) ]
  ! LOGICAL_OR      [ reduce using rule 25 (statement -> statement LESS_EQUAL statement .) ]


state 76

    (26) statement -> statement AND statement .
    (15) statement -> statement . PLUS statement
    (16) statement -> statement . MINUS statement
    (17) statement -> statement . TIMES statement
    (18) statement -> statement . DIVIDE statement
    (19) statement -> statement . MODULO statement
    (20) statement -> statement . EQUAL statement
    (21) statement -> statement . NOT_EQUAL statement
    (22) statement -> statement . GREATER statement
    (23) statement -> statement . LESS statement
    (24) statement -> statement . GREATER_EQUAL statement
    (25) statement -> statement . LESS_EQUAL statement
    (26) statement -> statement . AND statement
    (27) statement -> statement . OR statement
    (28) statement -> statement . LOGICAL_AND statement
    (29) statement -> statement . LOGICAL_OR statement

    SEMICOLON       reduce using rule 26 (statement -> statement AND statement .)
    PLUS            reduce using rule 26 (statement -> statement AND statement .)
    MINUS           reduce using rule 26 (statement -> statement AND statement .)
    TIMES           reduce using rule 26 (statement -> statement AND statement .)
    DIVIDE          reduce using rule 26 (statement -> statement AND statement .)
    MODULO          reduce using rule 26 (statement -> statement AND statement .)
    EQUAL           reduce using rule 26 (statement -> statement AND statement .)
    NOT_EQUAL       reduce using rule 26 (statement -> statement AND statement .)
    GREATER         reduce using rule 26 (statement -> statement AND statement .)
    LESS            reduce using rule 26 (statement -> statement AND statement .)
    GREATER_EQUAL   reduce using rule 26 (statement -> statement AND statement .)
    LESS_EQUAL      reduce using rule 26 (statement -> statement AND statement .)
    AND             reduce using rule 26 (statement -> statement AND statement .)
    OR              reduce using rule 26 (statement -> statement AND statement .)
    LOGICAL_AND     reduce using rule 26 (statement -> statement AND statement .)
    LOGICAL_OR      reduce using rule 26 (statement -> statement AND statement .)
    R_PAREN         reduce using rule 26 (statement -> statement AND statement .)

  ! PLUS            [ shift and go to state 33 ]
  ! MINUS           [ shift and go to state 34 ]
  ! TIMES           [ shift and go to state 35 ]
  ! DIVIDE          [ shift and go to state 36 ]
  ! MODULO          [ shift and go to state 37 ]
  ! EQUAL           [ shift and go to state 38 ]
  ! NOT_EQUAL       [ shift and go to state 39 ]
  ! GREATER         [ shift and go to state 40 ]
  ! LESS            [ shift and go to state 41 ]
  ! GREATER_EQUAL   [ shift and go to state 42 ]
  ! LESS_EQUAL      [ shift and go to state 43 ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]
  ! LOGICAL_AND     [ shift and go to state 46 ]
  ! LOGICAL_OR      [ shift and go to state 47 ]


state 77

    (27) statement -> statement OR statement .
    (15) statement -> statement . PLUS statement
    (16) statement -> statement . MINUS statement
    (17) statement -> statement . TIMES statement
    (18) statement -> statement . DIVIDE statement
    (19) statement -> statement . MODULO statement
    (20) statement -> statement . EQUAL statement
    (21) statement -> statement . NOT_EQUAL statement
    (22) statement -> statement . GREATER statement
    (23) statement -> statement . LESS statement
    (24) statement -> statement . GREATER_EQUAL statement
    (25) statement -> statement . LESS_EQUAL statement
    (26) statement -> statement . AND statement
    (27) statement -> statement . OR statement
    (28) statement -> statement . LOGICAL_AND statement
    (29) statement -> statement . LOGICAL_OR statement

    SEMICOLON       reduce using rule 27 (statement -> statement OR statement .)
    PLUS            reduce using rule 27 (statement -> statement OR statement .)
    MINUS           reduce using rule 27 (statement -> statement OR statement .)
    TIMES           reduce using rule 27 (statement -> statement OR statement .)
    DIVIDE          reduce using rule 27 (statement -> statement OR statement .)
    MODULO          reduce using rule 27 (statement -> statement OR statement .)
    EQUAL           reduce using rule 27 (statement -> statement OR statement .)
    NOT_EQUAL       reduce using rule 27 (statement -> statement OR statement .)
    GREATER         reduce using rule 27 (statement -> statement OR statement .)
    LESS            reduce using rule 27 (statement -> statement OR statement .)
    GREATER_EQUAL   reduce using rule 27 (statement -> statement OR statement .)
    LESS_EQUAL      reduce using rule 27 (statement -> statement OR statement .)
    AND             reduce using rule 27 (statement -> statement OR statement .)
    OR              reduce using rule 27 (statement -> statement OR statement .)
    LOGICAL_AND     reduce using rule 27 (statement -> statement OR statement .)
    LOGICAL_OR      reduce using rule 27 (statement -> statement OR statement .)
    R_PAREN         reduce using rule 27 (statement -> statement OR statement .)

  ! PLUS            [ shift and go to state 33 ]
  ! MINUS           [ shift and go to state 34 ]
  ! TIMES           [ shift and go to state 35 ]
  ! DIVIDE          [ shift and go to state 36 ]
  ! MODULO          [ shift and go to state 37 ]
  ! EQUAL           [ shift and go to state 38 ]
  ! NOT_EQUAL       [ shift and go to state 39 ]
  ! GREATER         [ shift and go to state 40 ]
  ! LESS            [ shift and go to state 41 ]
  ! GREATER_EQUAL   [ shift and go to state 42 ]
  ! LESS_EQUAL      [ shift and go to state 43 ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]
  ! LOGICAL_AND     [ shift and go to state 46 ]
  ! LOGICAL_OR      [ shift and go to state 47 ]


state 78

    (28) statement -> statement LOGICAL_AND statement .
    (15) statement -> statement . PLUS statement
    (16) statement -> statement . MINUS statement
    (17) statement -> statement . TIMES statement
    (18) statement -> statement . DIVIDE statement
    (19) statement -> statement . MODULO statement
    (20) statement -> statement . EQUAL statement
    (21) statement -> statement . NOT_EQUAL statement
    (22) statement -> statement . GREATER statement
    (23) statement -> statement . LESS statement
    (24) statement -> statement . GREATER_EQUAL statement
    (25) statement -> statement . LESS_EQUAL statement
    (26) statement -> statement . AND statement
    (27) statement -> statement . OR statement
    (28) statement -> statement . LOGICAL_AND statement
    (29) statement -> statement . LOGICAL_OR statement

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    SEMICOLON       reduce using rule 28 (statement -> statement LOGICAL_AND statement .)
    R_PAREN         reduce using rule 28 (statement -> statement LOGICAL_AND statement .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    MODULO          shift and go to state 37
    EQUAL           shift and go to state 38
    NOT_EQUAL       shift and go to state 39
    GREATER         shift and go to state 40
    LESS            shift and go to state 41
    GREATER_EQUAL   shift and go to state 42
    LESS_EQUAL      shift and go to state 43
    AND             shift and go to state 44
    OR              shift and go to state 45
    LOGICAL_AND     shift and go to state 46
    LOGICAL_OR      shift and go to state 47

  ! PLUS            [ reduce using rule 28 (statement -> statement LOGICAL_AND statement .) ]
  ! MINUS           [ reduce using rule 28 (statement -> statement LOGICAL_AND statement .) ]
  ! TIMES           [ reduce using rule 28 (statement -> statement LOGICAL_AND statement .) ]
  ! DIVIDE          [ reduce using rule 28 (statement -> statement LOGICAL_AND statement .) ]
  ! MODULO          [ reduce using rule 28 (statement -> statement LOGICAL_AND statement .) ]
  ! EQUAL           [ reduce using rule 28 (statement -> statement LOGICAL_AND statement .) ]
  ! NOT_EQUAL       [ reduce using rule 28 (statement -> statement LOGICAL_AND statement .) ]
  ! GREATER         [ reduce using rule 28 (statement -> statement LOGICAL_AND statement .) ]
  ! LESS            [ reduce using rule 28 (statement -> statement LOGICAL_AND statement .) ]
  ! GREATER_EQUAL   [ reduce using rule 28 (statement -> statement LOGICAL_AND statement .) ]
  ! LESS_EQUAL      [ reduce using rule 28 (statement -> statement LOGICAL_AND statement .) ]
  ! AND             [ reduce using rule 28 (statement -> statement LOGICAL_AND statement .) ]
  ! OR              [ reduce using rule 28 (statement -> statement LOGICAL_AND statement .) ]
  ! LOGICAL_AND     [ reduce using rule 28 (statement -> statement LOGICAL_AND statement .) ]
  ! LOGICAL_OR      [ reduce using rule 28 (statement -> statement LOGICAL_AND statement .) ]


state 79

    (29) statement -> statement LOGICAL_OR statement .
    (15) statement -> statement . PLUS statement
    (16) statement -> statement . MINUS statement
    (17) statement -> statement . TIMES statement
    (18) statement -> statement . DIVIDE statement
    (19) statement -> statement . MODULO statement
    (20) statement -> statement . EQUAL statement
    (21) statement -> statement . NOT_EQUAL statement
    (22) statement -> statement . GREATER statement
    (23) statement -> statement . LESS statement
    (24) statement -> statement . GREATER_EQUAL statement
    (25) statement -> statement . LESS_EQUAL statement
    (26) statement -> statement . AND statement
    (27) statement -> statement . OR statement
    (28) statement -> statement . LOGICAL_AND statement
    (29) statement -> statement . LOGICAL_OR statement

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    SEMICOLON       reduce using rule 29 (statement -> statement LOGICAL_OR statement .)
    R_PAREN         reduce using rule 29 (statement -> statement LOGICAL_OR statement .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    MODULO          shift and go to state 37
    EQUAL           shift and go to state 38
    NOT_EQUAL       shift and go to state 39
    GREATER         shift and go to state 40
    LESS            shift and go to state 41
    GREATER_EQUAL   shift and go to state 42
    LESS_EQUAL      shift and go to state 43
    AND             shift and go to state 44
    OR              shift and go to state 45
    LOGICAL_AND     shift and go to state 46
    LOGICAL_OR      shift and go to state 47

  ! PLUS            [ reduce using rule 29 (statement -> statement LOGICAL_OR statement .) ]
  ! MINUS           [ reduce using rule 29 (statement -> statement LOGICAL_OR statement .) ]
  ! TIMES           [ reduce using rule 29 (statement -> statement LOGICAL_OR statement .) ]
  ! DIVIDE          [ reduce using rule 29 (statement -> statement LOGICAL_OR statement .) ]
  ! MODULO          [ reduce using rule 29 (statement -> statement LOGICAL_OR statement .) ]
  ! EQUAL           [ reduce using rule 29 (statement -> statement LOGICAL_OR statement .) ]
  ! NOT_EQUAL       [ reduce using rule 29 (statement -> statement LOGICAL_OR statement .) ]
  ! GREATER         [ reduce using rule 29 (statement -> statement LOGICAL_OR statement .) ]
  ! LESS            [ reduce using rule 29 (statement -> statement LOGICAL_OR statement .) ]
  ! GREATER_EQUAL   [ reduce using rule 29 (statement -> statement LOGICAL_OR statement .) ]
  ! LESS_EQUAL      [ reduce using rule 29 (statement -> statement LOGICAL_OR statement .) ]
  ! AND             [ reduce using rule 29 (statement -> statement LOGICAL_OR statement .) ]
  ! OR              [ reduce using rule 29 (statement -> statement LOGICAL_OR statement .) ]
  ! LOGICAL_AND     [ reduce using rule 29 (statement -> statement LOGICAL_OR statement .) ]
  ! LOGICAL_OR      [ reduce using rule 29 (statement -> statement LOGICAL_OR statement .) ]


state 80

    (58) declarations -> IDENTIFIER COMMA . declarations
    (58) declarations -> . IDENTIFIER COMMA declarations
    (59) declarations -> . IDENTIFIER

    IDENTIFIER      shift and go to state 49

    declarations                   shift and go to state 105

state 81

    (60) var_declaration -> IDENTIFIER ASSIGN statement .
    (15) statement -> statement . PLUS statement
    (16) statement -> statement . MINUS statement
    (17) statement -> statement . TIMES statement
    (18) statement -> statement . DIVIDE statement
    (19) statement -> statement . MODULO statement
    (20) statement -> statement . EQUAL statement
    (21) statement -> statement . NOT_EQUAL statement
    (22) statement -> statement . GREATER statement
    (23) statement -> statement . LESS statement
    (24) statement -> statement . GREATER_EQUAL statement
    (25) statement -> statement . LESS_EQUAL statement
    (26) statement -> statement . AND statement
    (27) statement -> statement . OR statement
    (28) statement -> statement . LOGICAL_AND statement
    (29) statement -> statement . LOGICAL_OR statement

    SEMICOLON       reduce using rule 60 (var_declaration -> IDENTIFIER ASSIGN statement .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    MODULO          shift and go to state 37
    EQUAL           shift and go to state 38
    NOT_EQUAL       shift and go to state 39
    GREATER         shift and go to state 40
    LESS            shift and go to state 41
    GREATER_EQUAL   shift and go to state 42
    LESS_EQUAL      shift and go to state 43
    AND             shift and go to state 44
    OR              shift and go to state 45
    LOGICAL_AND     shift and go to state 46
    LOGICAL_OR      shift and go to state 47


state 82

    (12) write -> WRITE L_PAREN statement . R_PAREN
    (15) statement -> statement . PLUS statement
    (16) statement -> statement . MINUS statement
    (17) statement -> statement . TIMES statement
    (18) statement -> statement . DIVIDE statement
    (19) statement -> statement . MODULO statement
    (20) statement -> statement . EQUAL statement
    (21) statement -> statement . NOT_EQUAL statement
    (22) statement -> statement . GREATER statement
    (23) statement -> statement . LESS statement
    (24) statement -> statement . GREATER_EQUAL statement
    (25) statement -> statement . LESS_EQUAL statement
    (26) statement -> statement . AND statement
    (27) statement -> statement . OR statement
    (28) statement -> statement . LOGICAL_AND statement
    (29) statement -> statement . LOGICAL_OR statement

    R_PAREN         shift and go to state 106
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    MODULO          shift and go to state 37
    EQUAL           shift and go to state 38
    NOT_EQUAL       shift and go to state 39
    GREATER         shift and go to state 40
    LESS            shift and go to state 41
    GREATER_EQUAL   shift and go to state 42
    LESS_EQUAL      shift and go to state 43
    AND             shift and go to state 44
    OR              shift and go to state 45
    LOGICAL_AND     shift and go to state 46
    LOGICAL_OR      shift and go to state 47


state 83

    (34) statement -> L_PAREN statement R_PAREN .

    SEMICOLON       reduce using rule 34 (statement -> L_PAREN statement R_PAREN .)
    PLUS            reduce using rule 34 (statement -> L_PAREN statement R_PAREN .)
    MINUS           reduce using rule 34 (statement -> L_PAREN statement R_PAREN .)
    TIMES           reduce using rule 34 (statement -> L_PAREN statement R_PAREN .)
    DIVIDE          reduce using rule 34 (statement -> L_PAREN statement R_PAREN .)
    MODULO          reduce using rule 34 (statement -> L_PAREN statement R_PAREN .)
    EQUAL           reduce using rule 34 (statement -> L_PAREN statement R_PAREN .)
    NOT_EQUAL       reduce using rule 34 (statement -> L_PAREN statement R_PAREN .)
    GREATER         reduce using rule 34 (statement -> L_PAREN statement R_PAREN .)
    LESS            reduce using rule 34 (statement -> L_PAREN statement R_PAREN .)
    GREATER_EQUAL   reduce using rule 34 (statement -> L_PAREN statement R_PAREN .)
    LESS_EQUAL      reduce using rule 34 (statement -> L_PAREN statement R_PAREN .)
    AND             reduce using rule 34 (statement -> L_PAREN statement R_PAREN .)
    OR              reduce using rule 34 (statement -> L_PAREN statement R_PAREN .)
    LOGICAL_AND     reduce using rule 34 (statement -> L_PAREN statement R_PAREN .)
    LOGICAL_OR      reduce using rule 34 (statement -> L_PAREN statement R_PAREN .)
    R_PAREN         reduce using rule 34 (statement -> L_PAREN statement R_PAREN .)


state 84

    (35) statement -> L_PAREN conditional R_PAREN .

    SEMICOLON       reduce using rule 35 (statement -> L_PAREN conditional R_PAREN .)
    PLUS            reduce using rule 35 (statement -> L_PAREN conditional R_PAREN .)
    MINUS           reduce using rule 35 (statement -> L_PAREN conditional R_PAREN .)
    TIMES           reduce using rule 35 (statement -> L_PAREN conditional R_PAREN .)
    DIVIDE          reduce using rule 35 (statement -> L_PAREN conditional R_PAREN .)
    MODULO          reduce using rule 35 (statement -> L_PAREN conditional R_PAREN .)
    EQUAL           reduce using rule 35 (statement -> L_PAREN conditional R_PAREN .)
    NOT_EQUAL       reduce using rule 35 (statement -> L_PAREN conditional R_PAREN .)
    GREATER         reduce using rule 35 (statement -> L_PAREN conditional R_PAREN .)
    LESS            reduce using rule 35 (statement -> L_PAREN conditional R_PAREN .)
    GREATER_EQUAL   reduce using rule 35 (statement -> L_PAREN conditional R_PAREN .)
    LESS_EQUAL      reduce using rule 35 (statement -> L_PAREN conditional R_PAREN .)
    AND             reduce using rule 35 (statement -> L_PAREN conditional R_PAREN .)
    OR              reduce using rule 35 (statement -> L_PAREN conditional R_PAREN .)
    LOGICAL_AND     reduce using rule 35 (statement -> L_PAREN conditional R_PAREN .)
    LOGICAL_OR      reduce using rule 35 (statement -> L_PAREN conditional R_PAREN .)
    R_PAREN         reduce using rule 35 (statement -> L_PAREN conditional R_PAREN .)


state 85

    (38) conditional -> conditional EQUAL . conditional
    (38) conditional -> . conditional EQUAL conditional
    (39) conditional -> . conditional NOT_EQUAL conditional
    (40) conditional -> . conditional GREATER conditional
    (41) conditional -> . conditional LESS conditional
    (42) conditional -> . conditional GREATER_EQUAL conditional
    (43) conditional -> . conditional LESS_EQUAL conditional
    (44) conditional -> . conditional AND conditional
    (45) conditional -> . conditional LOGICAL_AND conditional
    (46) conditional -> . conditional OR conditional
    (47) conditional -> . conditional LOGICAL_OR conditional
    (48) conditional -> . statement
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . statement MODULO statement
    (20) statement -> . statement EQUAL statement
    (21) statement -> . statement NOT_EQUAL statement
    (22) statement -> . statement GREATER statement
    (23) statement -> . statement LESS statement
    (24) statement -> . statement GREATER_EQUAL statement
    (25) statement -> . statement LESS_EQUAL statement
    (26) statement -> . statement AND statement
    (27) statement -> . statement OR statement
    (28) statement -> . statement LOGICAL_AND statement
    (29) statement -> . statement LOGICAL_OR statement
    (30) statement -> . INT
    (31) statement -> . FLOAT
    (32) statement -> . BOOL
    (33) statement -> . STRING
    (34) statement -> . L_PAREN statement R_PAREN
    (35) statement -> . L_PAREN conditional R_PAREN
    (36) statement -> . IDENTIFIER INCREMENT
    (37) statement -> . IDENTIFIER DECREMENT

    IDENTIFIER      shift and go to state 56
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    STRING          shift and go to state 60
    L_PAREN         shift and go to state 18

    conditional                    shift and go to state 107
    statement                      shift and go to state 97

state 86

    (39) conditional -> conditional NOT_EQUAL . conditional
    (38) conditional -> . conditional EQUAL conditional
    (39) conditional -> . conditional NOT_EQUAL conditional
    (40) conditional -> . conditional GREATER conditional
    (41) conditional -> . conditional LESS conditional
    (42) conditional -> . conditional GREATER_EQUAL conditional
    (43) conditional -> . conditional LESS_EQUAL conditional
    (44) conditional -> . conditional AND conditional
    (45) conditional -> . conditional LOGICAL_AND conditional
    (46) conditional -> . conditional OR conditional
    (47) conditional -> . conditional LOGICAL_OR conditional
    (48) conditional -> . statement
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . statement MODULO statement
    (20) statement -> . statement EQUAL statement
    (21) statement -> . statement NOT_EQUAL statement
    (22) statement -> . statement GREATER statement
    (23) statement -> . statement LESS statement
    (24) statement -> . statement GREATER_EQUAL statement
    (25) statement -> . statement LESS_EQUAL statement
    (26) statement -> . statement AND statement
    (27) statement -> . statement OR statement
    (28) statement -> . statement LOGICAL_AND statement
    (29) statement -> . statement LOGICAL_OR statement
    (30) statement -> . INT
    (31) statement -> . FLOAT
    (32) statement -> . BOOL
    (33) statement -> . STRING
    (34) statement -> . L_PAREN statement R_PAREN
    (35) statement -> . L_PAREN conditional R_PAREN
    (36) statement -> . IDENTIFIER INCREMENT
    (37) statement -> . IDENTIFIER DECREMENT

    IDENTIFIER      shift and go to state 56
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    STRING          shift and go to state 60
    L_PAREN         shift and go to state 18

    conditional                    shift and go to state 108
    statement                      shift and go to state 97

state 87

    (40) conditional -> conditional GREATER . conditional
    (38) conditional -> . conditional EQUAL conditional
    (39) conditional -> . conditional NOT_EQUAL conditional
    (40) conditional -> . conditional GREATER conditional
    (41) conditional -> . conditional LESS conditional
    (42) conditional -> . conditional GREATER_EQUAL conditional
    (43) conditional -> . conditional LESS_EQUAL conditional
    (44) conditional -> . conditional AND conditional
    (45) conditional -> . conditional LOGICAL_AND conditional
    (46) conditional -> . conditional OR conditional
    (47) conditional -> . conditional LOGICAL_OR conditional
    (48) conditional -> . statement
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . statement MODULO statement
    (20) statement -> . statement EQUAL statement
    (21) statement -> . statement NOT_EQUAL statement
    (22) statement -> . statement GREATER statement
    (23) statement -> . statement LESS statement
    (24) statement -> . statement GREATER_EQUAL statement
    (25) statement -> . statement LESS_EQUAL statement
    (26) statement -> . statement AND statement
    (27) statement -> . statement OR statement
    (28) statement -> . statement LOGICAL_AND statement
    (29) statement -> . statement LOGICAL_OR statement
    (30) statement -> . INT
    (31) statement -> . FLOAT
    (32) statement -> . BOOL
    (33) statement -> . STRING
    (34) statement -> . L_PAREN statement R_PAREN
    (35) statement -> . L_PAREN conditional R_PAREN
    (36) statement -> . IDENTIFIER INCREMENT
    (37) statement -> . IDENTIFIER DECREMENT

    IDENTIFIER      shift and go to state 56
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    STRING          shift and go to state 60
    L_PAREN         shift and go to state 18

    conditional                    shift and go to state 109
    statement                      shift and go to state 97

state 88

    (41) conditional -> conditional LESS . conditional
    (38) conditional -> . conditional EQUAL conditional
    (39) conditional -> . conditional NOT_EQUAL conditional
    (40) conditional -> . conditional GREATER conditional
    (41) conditional -> . conditional LESS conditional
    (42) conditional -> . conditional GREATER_EQUAL conditional
    (43) conditional -> . conditional LESS_EQUAL conditional
    (44) conditional -> . conditional AND conditional
    (45) conditional -> . conditional LOGICAL_AND conditional
    (46) conditional -> . conditional OR conditional
    (47) conditional -> . conditional LOGICAL_OR conditional
    (48) conditional -> . statement
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . statement MODULO statement
    (20) statement -> . statement EQUAL statement
    (21) statement -> . statement NOT_EQUAL statement
    (22) statement -> . statement GREATER statement
    (23) statement -> . statement LESS statement
    (24) statement -> . statement GREATER_EQUAL statement
    (25) statement -> . statement LESS_EQUAL statement
    (26) statement -> . statement AND statement
    (27) statement -> . statement OR statement
    (28) statement -> . statement LOGICAL_AND statement
    (29) statement -> . statement LOGICAL_OR statement
    (30) statement -> . INT
    (31) statement -> . FLOAT
    (32) statement -> . BOOL
    (33) statement -> . STRING
    (34) statement -> . L_PAREN statement R_PAREN
    (35) statement -> . L_PAREN conditional R_PAREN
    (36) statement -> . IDENTIFIER INCREMENT
    (37) statement -> . IDENTIFIER DECREMENT

    IDENTIFIER      shift and go to state 56
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    STRING          shift and go to state 60
    L_PAREN         shift and go to state 18

    conditional                    shift and go to state 110
    statement                      shift and go to state 97

state 89

    (42) conditional -> conditional GREATER_EQUAL . conditional
    (38) conditional -> . conditional EQUAL conditional
    (39) conditional -> . conditional NOT_EQUAL conditional
    (40) conditional -> . conditional GREATER conditional
    (41) conditional -> . conditional LESS conditional
    (42) conditional -> . conditional GREATER_EQUAL conditional
    (43) conditional -> . conditional LESS_EQUAL conditional
    (44) conditional -> . conditional AND conditional
    (45) conditional -> . conditional LOGICAL_AND conditional
    (46) conditional -> . conditional OR conditional
    (47) conditional -> . conditional LOGICAL_OR conditional
    (48) conditional -> . statement
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . statement MODULO statement
    (20) statement -> . statement EQUAL statement
    (21) statement -> . statement NOT_EQUAL statement
    (22) statement -> . statement GREATER statement
    (23) statement -> . statement LESS statement
    (24) statement -> . statement GREATER_EQUAL statement
    (25) statement -> . statement LESS_EQUAL statement
    (26) statement -> . statement AND statement
    (27) statement -> . statement OR statement
    (28) statement -> . statement LOGICAL_AND statement
    (29) statement -> . statement LOGICAL_OR statement
    (30) statement -> . INT
    (31) statement -> . FLOAT
    (32) statement -> . BOOL
    (33) statement -> . STRING
    (34) statement -> . L_PAREN statement R_PAREN
    (35) statement -> . L_PAREN conditional R_PAREN
    (36) statement -> . IDENTIFIER INCREMENT
    (37) statement -> . IDENTIFIER DECREMENT

    IDENTIFIER      shift and go to state 56
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    STRING          shift and go to state 60
    L_PAREN         shift and go to state 18

    conditional                    shift and go to state 111
    statement                      shift and go to state 97

state 90

    (43) conditional -> conditional LESS_EQUAL . conditional
    (38) conditional -> . conditional EQUAL conditional
    (39) conditional -> . conditional NOT_EQUAL conditional
    (40) conditional -> . conditional GREATER conditional
    (41) conditional -> . conditional LESS conditional
    (42) conditional -> . conditional GREATER_EQUAL conditional
    (43) conditional -> . conditional LESS_EQUAL conditional
    (44) conditional -> . conditional AND conditional
    (45) conditional -> . conditional LOGICAL_AND conditional
    (46) conditional -> . conditional OR conditional
    (47) conditional -> . conditional LOGICAL_OR conditional
    (48) conditional -> . statement
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . statement MODULO statement
    (20) statement -> . statement EQUAL statement
    (21) statement -> . statement NOT_EQUAL statement
    (22) statement -> . statement GREATER statement
    (23) statement -> . statement LESS statement
    (24) statement -> . statement GREATER_EQUAL statement
    (25) statement -> . statement LESS_EQUAL statement
    (26) statement -> . statement AND statement
    (27) statement -> . statement OR statement
    (28) statement -> . statement LOGICAL_AND statement
    (29) statement -> . statement LOGICAL_OR statement
    (30) statement -> . INT
    (31) statement -> . FLOAT
    (32) statement -> . BOOL
    (33) statement -> . STRING
    (34) statement -> . L_PAREN statement R_PAREN
    (35) statement -> . L_PAREN conditional R_PAREN
    (36) statement -> . IDENTIFIER INCREMENT
    (37) statement -> . IDENTIFIER DECREMENT

    IDENTIFIER      shift and go to state 56
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    STRING          shift and go to state 60
    L_PAREN         shift and go to state 18

    conditional                    shift and go to state 112
    statement                      shift and go to state 97

state 91

    (44) conditional -> conditional AND . conditional
    (38) conditional -> . conditional EQUAL conditional
    (39) conditional -> . conditional NOT_EQUAL conditional
    (40) conditional -> . conditional GREATER conditional
    (41) conditional -> . conditional LESS conditional
    (42) conditional -> . conditional GREATER_EQUAL conditional
    (43) conditional -> . conditional LESS_EQUAL conditional
    (44) conditional -> . conditional AND conditional
    (45) conditional -> . conditional LOGICAL_AND conditional
    (46) conditional -> . conditional OR conditional
    (47) conditional -> . conditional LOGICAL_OR conditional
    (48) conditional -> . statement
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . statement MODULO statement
    (20) statement -> . statement EQUAL statement
    (21) statement -> . statement NOT_EQUAL statement
    (22) statement -> . statement GREATER statement
    (23) statement -> . statement LESS statement
    (24) statement -> . statement GREATER_EQUAL statement
    (25) statement -> . statement LESS_EQUAL statement
    (26) statement -> . statement AND statement
    (27) statement -> . statement OR statement
    (28) statement -> . statement LOGICAL_AND statement
    (29) statement -> . statement LOGICAL_OR statement
    (30) statement -> . INT
    (31) statement -> . FLOAT
    (32) statement -> . BOOL
    (33) statement -> . STRING
    (34) statement -> . L_PAREN statement R_PAREN
    (35) statement -> . L_PAREN conditional R_PAREN
    (36) statement -> . IDENTIFIER INCREMENT
    (37) statement -> . IDENTIFIER DECREMENT

    IDENTIFIER      shift and go to state 56
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    STRING          shift and go to state 60
    L_PAREN         shift and go to state 18

    conditional                    shift and go to state 113
    statement                      shift and go to state 97

state 92

    (45) conditional -> conditional LOGICAL_AND . conditional
    (38) conditional -> . conditional EQUAL conditional
    (39) conditional -> . conditional NOT_EQUAL conditional
    (40) conditional -> . conditional GREATER conditional
    (41) conditional -> . conditional LESS conditional
    (42) conditional -> . conditional GREATER_EQUAL conditional
    (43) conditional -> . conditional LESS_EQUAL conditional
    (44) conditional -> . conditional AND conditional
    (45) conditional -> . conditional LOGICAL_AND conditional
    (46) conditional -> . conditional OR conditional
    (47) conditional -> . conditional LOGICAL_OR conditional
    (48) conditional -> . statement
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . statement MODULO statement
    (20) statement -> . statement EQUAL statement
    (21) statement -> . statement NOT_EQUAL statement
    (22) statement -> . statement GREATER statement
    (23) statement -> . statement LESS statement
    (24) statement -> . statement GREATER_EQUAL statement
    (25) statement -> . statement LESS_EQUAL statement
    (26) statement -> . statement AND statement
    (27) statement -> . statement OR statement
    (28) statement -> . statement LOGICAL_AND statement
    (29) statement -> . statement LOGICAL_OR statement
    (30) statement -> . INT
    (31) statement -> . FLOAT
    (32) statement -> . BOOL
    (33) statement -> . STRING
    (34) statement -> . L_PAREN statement R_PAREN
    (35) statement -> . L_PAREN conditional R_PAREN
    (36) statement -> . IDENTIFIER INCREMENT
    (37) statement -> . IDENTIFIER DECREMENT

    IDENTIFIER      shift and go to state 56
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    STRING          shift and go to state 60
    L_PAREN         shift and go to state 18

    conditional                    shift and go to state 114
    statement                      shift and go to state 97

state 93

    (46) conditional -> conditional OR . conditional
    (38) conditional -> . conditional EQUAL conditional
    (39) conditional -> . conditional NOT_EQUAL conditional
    (40) conditional -> . conditional GREATER conditional
    (41) conditional -> . conditional LESS conditional
    (42) conditional -> . conditional GREATER_EQUAL conditional
    (43) conditional -> . conditional LESS_EQUAL conditional
    (44) conditional -> . conditional AND conditional
    (45) conditional -> . conditional LOGICAL_AND conditional
    (46) conditional -> . conditional OR conditional
    (47) conditional -> . conditional LOGICAL_OR conditional
    (48) conditional -> . statement
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . statement MODULO statement
    (20) statement -> . statement EQUAL statement
    (21) statement -> . statement NOT_EQUAL statement
    (22) statement -> . statement GREATER statement
    (23) statement -> . statement LESS statement
    (24) statement -> . statement GREATER_EQUAL statement
    (25) statement -> . statement LESS_EQUAL statement
    (26) statement -> . statement AND statement
    (27) statement -> . statement OR statement
    (28) statement -> . statement LOGICAL_AND statement
    (29) statement -> . statement LOGICAL_OR statement
    (30) statement -> . INT
    (31) statement -> . FLOAT
    (32) statement -> . BOOL
    (33) statement -> . STRING
    (34) statement -> . L_PAREN statement R_PAREN
    (35) statement -> . L_PAREN conditional R_PAREN
    (36) statement -> . IDENTIFIER INCREMENT
    (37) statement -> . IDENTIFIER DECREMENT

    IDENTIFIER      shift and go to state 56
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    STRING          shift and go to state 60
    L_PAREN         shift and go to state 18

    conditional                    shift and go to state 115
    statement                      shift and go to state 97

state 94

    (47) conditional -> conditional LOGICAL_OR . conditional
    (38) conditional -> . conditional EQUAL conditional
    (39) conditional -> . conditional NOT_EQUAL conditional
    (40) conditional -> . conditional GREATER conditional
    (41) conditional -> . conditional LESS conditional
    (42) conditional -> . conditional GREATER_EQUAL conditional
    (43) conditional -> . conditional LESS_EQUAL conditional
    (44) conditional -> . conditional AND conditional
    (45) conditional -> . conditional LOGICAL_AND conditional
    (46) conditional -> . conditional OR conditional
    (47) conditional -> . conditional LOGICAL_OR conditional
    (48) conditional -> . statement
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . statement MODULO statement
    (20) statement -> . statement EQUAL statement
    (21) statement -> . statement NOT_EQUAL statement
    (22) statement -> . statement GREATER statement
    (23) statement -> . statement LESS statement
    (24) statement -> . statement GREATER_EQUAL statement
    (25) statement -> . statement LESS_EQUAL statement
    (26) statement -> . statement AND statement
    (27) statement -> . statement OR statement
    (28) statement -> . statement LOGICAL_AND statement
    (29) statement -> . statement LOGICAL_OR statement
    (30) statement -> . INT
    (31) statement -> . FLOAT
    (32) statement -> . BOOL
    (33) statement -> . STRING
    (34) statement -> . L_PAREN statement R_PAREN
    (35) statement -> . L_PAREN conditional R_PAREN
    (36) statement -> . IDENTIFIER INCREMENT
    (37) statement -> . IDENTIFIER DECREMENT

    IDENTIFIER      shift and go to state 56
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    STRING          shift and go to state 60
    L_PAREN         shift and go to state 18

    conditional                    shift and go to state 116
    statement                      shift and go to state 97

state 95

    (13) writeln -> WRITELN L_PAREN statement . R_PAREN
    (15) statement -> statement . PLUS statement
    (16) statement -> statement . MINUS statement
    (17) statement -> statement . TIMES statement
    (18) statement -> statement . DIVIDE statement
    (19) statement -> statement . MODULO statement
    (20) statement -> statement . EQUAL statement
    (21) statement -> statement . NOT_EQUAL statement
    (22) statement -> statement . GREATER statement
    (23) statement -> statement . LESS statement
    (24) statement -> statement . GREATER_EQUAL statement
    (25) statement -> statement . LESS_EQUAL statement
    (26) statement -> statement . AND statement
    (27) statement -> statement . OR statement
    (28) statement -> statement . LOGICAL_AND statement
    (29) statement -> statement . LOGICAL_OR statement

    R_PAREN         shift and go to state 117
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    MODULO          shift and go to state 37
    EQUAL           shift and go to state 38
    NOT_EQUAL       shift and go to state 39
    GREATER         shift and go to state 40
    LESS            shift and go to state 41
    GREATER_EQUAL   shift and go to state 42
    LESS_EQUAL      shift and go to state 43
    AND             shift and go to state 44
    OR              shift and go to state 45
    LOGICAL_AND     shift and go to state 46
    LOGICAL_OR      shift and go to state 47


state 96

    (51) if_else_statement -> IF L_PAREN conditional . R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE
    (52) if_else_statement -> IF L_PAREN conditional . R_PAREN L_BRACE expressions R_BRACE
    (38) conditional -> conditional . EQUAL conditional
    (39) conditional -> conditional . NOT_EQUAL conditional
    (40) conditional -> conditional . GREATER conditional
    (41) conditional -> conditional . LESS conditional
    (42) conditional -> conditional . GREATER_EQUAL conditional
    (43) conditional -> conditional . LESS_EQUAL conditional
    (44) conditional -> conditional . AND conditional
    (45) conditional -> conditional . LOGICAL_AND conditional
    (46) conditional -> conditional . OR conditional
    (47) conditional -> conditional . LOGICAL_OR conditional

    R_PAREN         shift and go to state 118
    EQUAL           shift and go to state 85
    NOT_EQUAL       shift and go to state 86
    GREATER         shift and go to state 87
    LESS            shift and go to state 88
    GREATER_EQUAL   shift and go to state 89
    LESS_EQUAL      shift and go to state 90
    AND             shift and go to state 91
    LOGICAL_AND     shift and go to state 92
    OR              shift and go to state 93
    LOGICAL_OR      shift and go to state 94


state 97

    (48) conditional -> statement .
    (15) statement -> statement . PLUS statement
    (16) statement -> statement . MINUS statement
    (17) statement -> statement . TIMES statement
    (18) statement -> statement . DIVIDE statement
    (19) statement -> statement . MODULO statement
    (20) statement -> statement . EQUAL statement
    (21) statement -> statement . NOT_EQUAL statement
    (22) statement -> statement . GREATER statement
    (23) statement -> statement . LESS statement
    (24) statement -> statement . GREATER_EQUAL statement
    (25) statement -> statement . LESS_EQUAL statement
    (26) statement -> statement . AND statement
    (27) statement -> statement . OR statement
    (28) statement -> statement . LOGICAL_AND statement
    (29) statement -> statement . LOGICAL_OR statement

  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    R_PAREN         reduce using rule 48 (conditional -> statement .)
    SEMICOLON       reduce using rule 48 (conditional -> statement .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    MODULO          shift and go to state 37
    EQUAL           shift and go to state 38
    NOT_EQUAL       shift and go to state 39
    GREATER         shift and go to state 40
    LESS            shift and go to state 41
    GREATER_EQUAL   shift and go to state 42
    LESS_EQUAL      shift and go to state 43
    AND             shift and go to state 44
    OR              shift and go to state 45
    LOGICAL_AND     shift and go to state 46
    LOGICAL_OR      shift and go to state 47

  ! EQUAL           [ reduce using rule 48 (conditional -> statement .) ]
  ! NOT_EQUAL       [ reduce using rule 48 (conditional -> statement .) ]
  ! GREATER         [ reduce using rule 48 (conditional -> statement .) ]
  ! LESS            [ reduce using rule 48 (conditional -> statement .) ]
  ! GREATER_EQUAL   [ reduce using rule 48 (conditional -> statement .) ]
  ! LESS_EQUAL      [ reduce using rule 48 (conditional -> statement .) ]
  ! AND             [ reduce using rule 48 (conditional -> statement .) ]
  ! LOGICAL_AND     [ reduce using rule 48 (conditional -> statement .) ]
  ! OR              [ reduce using rule 48 (conditional -> statement .) ]
  ! LOGICAL_OR      [ reduce using rule 48 (conditional -> statement .) ]


state 98

    (49) for_loop -> FOR L_PAREN var_declaration . SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE

    SEMICOLON       shift and go to state 119


state 99

    (60) var_declaration -> IDENTIFIER . ASSIGN statement

    ASSIGN          shift and go to state 50


state 100

    (54) data_type -> INT .

    IDENTIFIER      reduce using rule 54 (data_type -> INT .)


state 101

    (55) data_type -> FLOAT .

    IDENTIFIER      reduce using rule 55 (data_type -> FLOAT .)


state 102

    (56) data_type -> BOOL .

    IDENTIFIER      reduce using rule 56 (data_type -> BOOL .)


state 103

    (57) data_type -> STRING .

    IDENTIFIER      reduce using rule 57 (data_type -> STRING .)


state 104

    (50) while_loop -> WHILE L_PAREN conditional . R_PAREN L_BRACE expressions R_BRACE
    (38) conditional -> conditional . EQUAL conditional
    (39) conditional -> conditional . NOT_EQUAL conditional
    (40) conditional -> conditional . GREATER conditional
    (41) conditional -> conditional . LESS conditional
    (42) conditional -> conditional . GREATER_EQUAL conditional
    (43) conditional -> conditional . LESS_EQUAL conditional
    (44) conditional -> conditional . AND conditional
    (45) conditional -> conditional . LOGICAL_AND conditional
    (46) conditional -> conditional . OR conditional
    (47) conditional -> conditional . LOGICAL_OR conditional

    R_PAREN         shift and go to state 120
    EQUAL           shift and go to state 85
    NOT_EQUAL       shift and go to state 86
    GREATER         shift and go to state 87
    LESS            shift and go to state 88
    GREATER_EQUAL   shift and go to state 89
    LESS_EQUAL      shift and go to state 90
    AND             shift and go to state 91
    LOGICAL_AND     shift and go to state 92
    OR              shift and go to state 93
    LOGICAL_OR      shift and go to state 94


state 105

    (58) declarations -> IDENTIFIER COMMA declarations .

    SEMICOLON       reduce using rule 58 (declarations -> IDENTIFIER COMMA declarations .)


state 106

    (12) write -> WRITE L_PAREN statement R_PAREN .

    SEMICOLON       reduce using rule 12 (write -> WRITE L_PAREN statement R_PAREN .)


state 107

    (38) conditional -> conditional EQUAL conditional .
    (38) conditional -> conditional . EQUAL conditional
    (39) conditional -> conditional . NOT_EQUAL conditional
    (40) conditional -> conditional . GREATER conditional
    (41) conditional -> conditional . LESS conditional
    (42) conditional -> conditional . GREATER_EQUAL conditional
    (43) conditional -> conditional . LESS_EQUAL conditional
    (44) conditional -> conditional . AND conditional
    (45) conditional -> conditional . LOGICAL_AND conditional
    (46) conditional -> conditional . OR conditional
    (47) conditional -> conditional . LOGICAL_OR conditional

  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    R_PAREN         reduce using rule 38 (conditional -> conditional EQUAL conditional .)
    SEMICOLON       reduce using rule 38 (conditional -> conditional EQUAL conditional .)
    EQUAL           shift and go to state 85
    NOT_EQUAL       shift and go to state 86
    GREATER         shift and go to state 87
    LESS            shift and go to state 88
    GREATER_EQUAL   shift and go to state 89
    LESS_EQUAL      shift and go to state 90
    AND             shift and go to state 91
    LOGICAL_AND     shift and go to state 92
    OR              shift and go to state 93
    LOGICAL_OR      shift and go to state 94

  ! EQUAL           [ reduce using rule 38 (conditional -> conditional EQUAL conditional .) ]
  ! NOT_EQUAL       [ reduce using rule 38 (conditional -> conditional EQUAL conditional .) ]
  ! GREATER         [ reduce using rule 38 (conditional -> conditional EQUAL conditional .) ]
  ! LESS            [ reduce using rule 38 (conditional -> conditional EQUAL conditional .) ]
  ! GREATER_EQUAL   [ reduce using rule 38 (conditional -> conditional EQUAL conditional .) ]
  ! LESS_EQUAL      [ reduce using rule 38 (conditional -> conditional EQUAL conditional .) ]
  ! AND             [ reduce using rule 38 (conditional -> conditional EQUAL conditional .) ]
  ! LOGICAL_AND     [ reduce using rule 38 (conditional -> conditional EQUAL conditional .) ]
  ! OR              [ reduce using rule 38 (conditional -> conditional EQUAL conditional .) ]
  ! LOGICAL_OR      [ reduce using rule 38 (conditional -> conditional EQUAL conditional .) ]


state 108

    (39) conditional -> conditional NOT_EQUAL conditional .
    (38) conditional -> conditional . EQUAL conditional
    (39) conditional -> conditional . NOT_EQUAL conditional
    (40) conditional -> conditional . GREATER conditional
    (41) conditional -> conditional . LESS conditional
    (42) conditional -> conditional . GREATER_EQUAL conditional
    (43) conditional -> conditional . LESS_EQUAL conditional
    (44) conditional -> conditional . AND conditional
    (45) conditional -> conditional . LOGICAL_AND conditional
    (46) conditional -> conditional . OR conditional
    (47) conditional -> conditional . LOGICAL_OR conditional

  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    R_PAREN         reduce using rule 39 (conditional -> conditional NOT_EQUAL conditional .)
    SEMICOLON       reduce using rule 39 (conditional -> conditional NOT_EQUAL conditional .)
    EQUAL           shift and go to state 85
    NOT_EQUAL       shift and go to state 86
    GREATER         shift and go to state 87
    LESS            shift and go to state 88
    GREATER_EQUAL   shift and go to state 89
    LESS_EQUAL      shift and go to state 90
    AND             shift and go to state 91
    LOGICAL_AND     shift and go to state 92
    OR              shift and go to state 93
    LOGICAL_OR      shift and go to state 94

  ! EQUAL           [ reduce using rule 39 (conditional -> conditional NOT_EQUAL conditional .) ]
  ! NOT_EQUAL       [ reduce using rule 39 (conditional -> conditional NOT_EQUAL conditional .) ]
  ! GREATER         [ reduce using rule 39 (conditional -> conditional NOT_EQUAL conditional .) ]
  ! LESS            [ reduce using rule 39 (conditional -> conditional NOT_EQUAL conditional .) ]
  ! GREATER_EQUAL   [ reduce using rule 39 (conditional -> conditional NOT_EQUAL conditional .) ]
  ! LESS_EQUAL      [ reduce using rule 39 (conditional -> conditional NOT_EQUAL conditional .) ]
  ! AND             [ reduce using rule 39 (conditional -> conditional NOT_EQUAL conditional .) ]
  ! LOGICAL_AND     [ reduce using rule 39 (conditional -> conditional NOT_EQUAL conditional .) ]
  ! OR              [ reduce using rule 39 (conditional -> conditional NOT_EQUAL conditional .) ]
  ! LOGICAL_OR      [ reduce using rule 39 (conditional -> conditional NOT_EQUAL conditional .) ]


state 109

    (40) conditional -> conditional GREATER conditional .
    (38) conditional -> conditional . EQUAL conditional
    (39) conditional -> conditional . NOT_EQUAL conditional
    (40) conditional -> conditional . GREATER conditional
    (41) conditional -> conditional . LESS conditional
    (42) conditional -> conditional . GREATER_EQUAL conditional
    (43) conditional -> conditional . LESS_EQUAL conditional
    (44) conditional -> conditional . AND conditional
    (45) conditional -> conditional . LOGICAL_AND conditional
    (46) conditional -> conditional . OR conditional
    (47) conditional -> conditional . LOGICAL_OR conditional

  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    R_PAREN         reduce using rule 40 (conditional -> conditional GREATER conditional .)
    SEMICOLON       reduce using rule 40 (conditional -> conditional GREATER conditional .)
    EQUAL           shift and go to state 85
    NOT_EQUAL       shift and go to state 86
    GREATER         shift and go to state 87
    LESS            shift and go to state 88
    GREATER_EQUAL   shift and go to state 89
    LESS_EQUAL      shift and go to state 90
    AND             shift and go to state 91
    LOGICAL_AND     shift and go to state 92
    OR              shift and go to state 93
    LOGICAL_OR      shift and go to state 94

  ! EQUAL           [ reduce using rule 40 (conditional -> conditional GREATER conditional .) ]
  ! NOT_EQUAL       [ reduce using rule 40 (conditional -> conditional GREATER conditional .) ]
  ! GREATER         [ reduce using rule 40 (conditional -> conditional GREATER conditional .) ]
  ! LESS            [ reduce using rule 40 (conditional -> conditional GREATER conditional .) ]
  ! GREATER_EQUAL   [ reduce using rule 40 (conditional -> conditional GREATER conditional .) ]
  ! LESS_EQUAL      [ reduce using rule 40 (conditional -> conditional GREATER conditional .) ]
  ! AND             [ reduce using rule 40 (conditional -> conditional GREATER conditional .) ]
  ! LOGICAL_AND     [ reduce using rule 40 (conditional -> conditional GREATER conditional .) ]
  ! OR              [ reduce using rule 40 (conditional -> conditional GREATER conditional .) ]
  ! LOGICAL_OR      [ reduce using rule 40 (conditional -> conditional GREATER conditional .) ]


state 110

    (41) conditional -> conditional LESS conditional .
    (38) conditional -> conditional . EQUAL conditional
    (39) conditional -> conditional . NOT_EQUAL conditional
    (40) conditional -> conditional . GREATER conditional
    (41) conditional -> conditional . LESS conditional
    (42) conditional -> conditional . GREATER_EQUAL conditional
    (43) conditional -> conditional . LESS_EQUAL conditional
    (44) conditional -> conditional . AND conditional
    (45) conditional -> conditional . LOGICAL_AND conditional
    (46) conditional -> conditional . OR conditional
    (47) conditional -> conditional . LOGICAL_OR conditional

  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    R_PAREN         reduce using rule 41 (conditional -> conditional LESS conditional .)
    SEMICOLON       reduce using rule 41 (conditional -> conditional LESS conditional .)
    EQUAL           shift and go to state 85
    NOT_EQUAL       shift and go to state 86
    GREATER         shift and go to state 87
    LESS            shift and go to state 88
    GREATER_EQUAL   shift and go to state 89
    LESS_EQUAL      shift and go to state 90
    AND             shift and go to state 91
    LOGICAL_AND     shift and go to state 92
    OR              shift and go to state 93
    LOGICAL_OR      shift and go to state 94

  ! EQUAL           [ reduce using rule 41 (conditional -> conditional LESS conditional .) ]
  ! NOT_EQUAL       [ reduce using rule 41 (conditional -> conditional LESS conditional .) ]
  ! GREATER         [ reduce using rule 41 (conditional -> conditional LESS conditional .) ]
  ! LESS            [ reduce using rule 41 (conditional -> conditional LESS conditional .) ]
  ! GREATER_EQUAL   [ reduce using rule 41 (conditional -> conditional LESS conditional .) ]
  ! LESS_EQUAL      [ reduce using rule 41 (conditional -> conditional LESS conditional .) ]
  ! AND             [ reduce using rule 41 (conditional -> conditional LESS conditional .) ]
  ! LOGICAL_AND     [ reduce using rule 41 (conditional -> conditional LESS conditional .) ]
  ! OR              [ reduce using rule 41 (conditional -> conditional LESS conditional .) ]
  ! LOGICAL_OR      [ reduce using rule 41 (conditional -> conditional LESS conditional .) ]


state 111

    (42) conditional -> conditional GREATER_EQUAL conditional .
    (38) conditional -> conditional . EQUAL conditional
    (39) conditional -> conditional . NOT_EQUAL conditional
    (40) conditional -> conditional . GREATER conditional
    (41) conditional -> conditional . LESS conditional
    (42) conditional -> conditional . GREATER_EQUAL conditional
    (43) conditional -> conditional . LESS_EQUAL conditional
    (44) conditional -> conditional . AND conditional
    (45) conditional -> conditional . LOGICAL_AND conditional
    (46) conditional -> conditional . OR conditional
    (47) conditional -> conditional . LOGICAL_OR conditional

  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    R_PAREN         reduce using rule 42 (conditional -> conditional GREATER_EQUAL conditional .)
    SEMICOLON       reduce using rule 42 (conditional -> conditional GREATER_EQUAL conditional .)
    EQUAL           shift and go to state 85
    NOT_EQUAL       shift and go to state 86
    GREATER         shift and go to state 87
    LESS            shift and go to state 88
    GREATER_EQUAL   shift and go to state 89
    LESS_EQUAL      shift and go to state 90
    AND             shift and go to state 91
    LOGICAL_AND     shift and go to state 92
    OR              shift and go to state 93
    LOGICAL_OR      shift and go to state 94

  ! EQUAL           [ reduce using rule 42 (conditional -> conditional GREATER_EQUAL conditional .) ]
  ! NOT_EQUAL       [ reduce using rule 42 (conditional -> conditional GREATER_EQUAL conditional .) ]
  ! GREATER         [ reduce using rule 42 (conditional -> conditional GREATER_EQUAL conditional .) ]
  ! LESS            [ reduce using rule 42 (conditional -> conditional GREATER_EQUAL conditional .) ]
  ! GREATER_EQUAL   [ reduce using rule 42 (conditional -> conditional GREATER_EQUAL conditional .) ]
  ! LESS_EQUAL      [ reduce using rule 42 (conditional -> conditional GREATER_EQUAL conditional .) ]
  ! AND             [ reduce using rule 42 (conditional -> conditional GREATER_EQUAL conditional .) ]
  ! LOGICAL_AND     [ reduce using rule 42 (conditional -> conditional GREATER_EQUAL conditional .) ]
  ! OR              [ reduce using rule 42 (conditional -> conditional GREATER_EQUAL conditional .) ]
  ! LOGICAL_OR      [ reduce using rule 42 (conditional -> conditional GREATER_EQUAL conditional .) ]


state 112

    (43) conditional -> conditional LESS_EQUAL conditional .
    (38) conditional -> conditional . EQUAL conditional
    (39) conditional -> conditional . NOT_EQUAL conditional
    (40) conditional -> conditional . GREATER conditional
    (41) conditional -> conditional . LESS conditional
    (42) conditional -> conditional . GREATER_EQUAL conditional
    (43) conditional -> conditional . LESS_EQUAL conditional
    (44) conditional -> conditional . AND conditional
    (45) conditional -> conditional . LOGICAL_AND conditional
    (46) conditional -> conditional . OR conditional
    (47) conditional -> conditional . LOGICAL_OR conditional

  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    R_PAREN         reduce using rule 43 (conditional -> conditional LESS_EQUAL conditional .)
    SEMICOLON       reduce using rule 43 (conditional -> conditional LESS_EQUAL conditional .)
    EQUAL           shift and go to state 85
    NOT_EQUAL       shift and go to state 86
    GREATER         shift and go to state 87
    LESS            shift and go to state 88
    GREATER_EQUAL   shift and go to state 89
    LESS_EQUAL      shift and go to state 90
    AND             shift and go to state 91
    LOGICAL_AND     shift and go to state 92
    OR              shift and go to state 93
    LOGICAL_OR      shift and go to state 94

  ! EQUAL           [ reduce using rule 43 (conditional -> conditional LESS_EQUAL conditional .) ]
  ! NOT_EQUAL       [ reduce using rule 43 (conditional -> conditional LESS_EQUAL conditional .) ]
  ! GREATER         [ reduce using rule 43 (conditional -> conditional LESS_EQUAL conditional .) ]
  ! LESS            [ reduce using rule 43 (conditional -> conditional LESS_EQUAL conditional .) ]
  ! GREATER_EQUAL   [ reduce using rule 43 (conditional -> conditional LESS_EQUAL conditional .) ]
  ! LESS_EQUAL      [ reduce using rule 43 (conditional -> conditional LESS_EQUAL conditional .) ]
  ! AND             [ reduce using rule 43 (conditional -> conditional LESS_EQUAL conditional .) ]
  ! LOGICAL_AND     [ reduce using rule 43 (conditional -> conditional LESS_EQUAL conditional .) ]
  ! OR              [ reduce using rule 43 (conditional -> conditional LESS_EQUAL conditional .) ]
  ! LOGICAL_OR      [ reduce using rule 43 (conditional -> conditional LESS_EQUAL conditional .) ]


state 113

    (44) conditional -> conditional AND conditional .
    (38) conditional -> conditional . EQUAL conditional
    (39) conditional -> conditional . NOT_EQUAL conditional
    (40) conditional -> conditional . GREATER conditional
    (41) conditional -> conditional . LESS conditional
    (42) conditional -> conditional . GREATER_EQUAL conditional
    (43) conditional -> conditional . LESS_EQUAL conditional
    (44) conditional -> conditional . AND conditional
    (45) conditional -> conditional . LOGICAL_AND conditional
    (46) conditional -> conditional . OR conditional
    (47) conditional -> conditional . LOGICAL_OR conditional

    R_PAREN         reduce using rule 44 (conditional -> conditional AND conditional .)
    EQUAL           reduce using rule 44 (conditional -> conditional AND conditional .)
    NOT_EQUAL       reduce using rule 44 (conditional -> conditional AND conditional .)
    GREATER         reduce using rule 44 (conditional -> conditional AND conditional .)
    LESS            reduce using rule 44 (conditional -> conditional AND conditional .)
    GREATER_EQUAL   reduce using rule 44 (conditional -> conditional AND conditional .)
    LESS_EQUAL      reduce using rule 44 (conditional -> conditional AND conditional .)
    AND             reduce using rule 44 (conditional -> conditional AND conditional .)
    LOGICAL_AND     reduce using rule 44 (conditional -> conditional AND conditional .)
    OR              reduce using rule 44 (conditional -> conditional AND conditional .)
    LOGICAL_OR      reduce using rule 44 (conditional -> conditional AND conditional .)
    SEMICOLON       reduce using rule 44 (conditional -> conditional AND conditional .)

  ! EQUAL           [ shift and go to state 85 ]
  ! NOT_EQUAL       [ shift and go to state 86 ]
  ! GREATER         [ shift and go to state 87 ]
  ! LESS            [ shift and go to state 88 ]
  ! GREATER_EQUAL   [ shift and go to state 89 ]
  ! LESS_EQUAL      [ shift and go to state 90 ]
  ! AND             [ shift and go to state 91 ]
  ! LOGICAL_AND     [ shift and go to state 92 ]
  ! OR              [ shift and go to state 93 ]
  ! LOGICAL_OR      [ shift and go to state 94 ]


state 114

    (45) conditional -> conditional LOGICAL_AND conditional .
    (38) conditional -> conditional . EQUAL conditional
    (39) conditional -> conditional . NOT_EQUAL conditional
    (40) conditional -> conditional . GREATER conditional
    (41) conditional -> conditional . LESS conditional
    (42) conditional -> conditional . GREATER_EQUAL conditional
    (43) conditional -> conditional . LESS_EQUAL conditional
    (44) conditional -> conditional . AND conditional
    (45) conditional -> conditional . LOGICAL_AND conditional
    (46) conditional -> conditional . OR conditional
    (47) conditional -> conditional . LOGICAL_OR conditional

  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    R_PAREN         reduce using rule 45 (conditional -> conditional LOGICAL_AND conditional .)
    SEMICOLON       reduce using rule 45 (conditional -> conditional LOGICAL_AND conditional .)
    EQUAL           shift and go to state 85
    NOT_EQUAL       shift and go to state 86
    GREATER         shift and go to state 87
    LESS            shift and go to state 88
    GREATER_EQUAL   shift and go to state 89
    LESS_EQUAL      shift and go to state 90
    AND             shift and go to state 91
    LOGICAL_AND     shift and go to state 92
    OR              shift and go to state 93
    LOGICAL_OR      shift and go to state 94

  ! EQUAL           [ reduce using rule 45 (conditional -> conditional LOGICAL_AND conditional .) ]
  ! NOT_EQUAL       [ reduce using rule 45 (conditional -> conditional LOGICAL_AND conditional .) ]
  ! GREATER         [ reduce using rule 45 (conditional -> conditional LOGICAL_AND conditional .) ]
  ! LESS            [ reduce using rule 45 (conditional -> conditional LOGICAL_AND conditional .) ]
  ! GREATER_EQUAL   [ reduce using rule 45 (conditional -> conditional LOGICAL_AND conditional .) ]
  ! LESS_EQUAL      [ reduce using rule 45 (conditional -> conditional LOGICAL_AND conditional .) ]
  ! AND             [ reduce using rule 45 (conditional -> conditional LOGICAL_AND conditional .) ]
  ! LOGICAL_AND     [ reduce using rule 45 (conditional -> conditional LOGICAL_AND conditional .) ]
  ! OR              [ reduce using rule 45 (conditional -> conditional LOGICAL_AND conditional .) ]
  ! LOGICAL_OR      [ reduce using rule 45 (conditional -> conditional LOGICAL_AND conditional .) ]


state 115

    (46) conditional -> conditional OR conditional .
    (38) conditional -> conditional . EQUAL conditional
    (39) conditional -> conditional . NOT_EQUAL conditional
    (40) conditional -> conditional . GREATER conditional
    (41) conditional -> conditional . LESS conditional
    (42) conditional -> conditional . GREATER_EQUAL conditional
    (43) conditional -> conditional . LESS_EQUAL conditional
    (44) conditional -> conditional . AND conditional
    (45) conditional -> conditional . LOGICAL_AND conditional
    (46) conditional -> conditional . OR conditional
    (47) conditional -> conditional . LOGICAL_OR conditional

    R_PAREN         reduce using rule 46 (conditional -> conditional OR conditional .)
    EQUAL           reduce using rule 46 (conditional -> conditional OR conditional .)
    NOT_EQUAL       reduce using rule 46 (conditional -> conditional OR conditional .)
    GREATER         reduce using rule 46 (conditional -> conditional OR conditional .)
    LESS            reduce using rule 46 (conditional -> conditional OR conditional .)
    GREATER_EQUAL   reduce using rule 46 (conditional -> conditional OR conditional .)
    LESS_EQUAL      reduce using rule 46 (conditional -> conditional OR conditional .)
    AND             reduce using rule 46 (conditional -> conditional OR conditional .)
    LOGICAL_AND     reduce using rule 46 (conditional -> conditional OR conditional .)
    OR              reduce using rule 46 (conditional -> conditional OR conditional .)
    LOGICAL_OR      reduce using rule 46 (conditional -> conditional OR conditional .)
    SEMICOLON       reduce using rule 46 (conditional -> conditional OR conditional .)

  ! EQUAL           [ shift and go to state 85 ]
  ! NOT_EQUAL       [ shift and go to state 86 ]
  ! GREATER         [ shift and go to state 87 ]
  ! LESS            [ shift and go to state 88 ]
  ! GREATER_EQUAL   [ shift and go to state 89 ]
  ! LESS_EQUAL      [ shift and go to state 90 ]
  ! AND             [ shift and go to state 91 ]
  ! LOGICAL_AND     [ shift and go to state 92 ]
  ! OR              [ shift and go to state 93 ]
  ! LOGICAL_OR      [ shift and go to state 94 ]


state 116

    (47) conditional -> conditional LOGICAL_OR conditional .
    (38) conditional -> conditional . EQUAL conditional
    (39) conditional -> conditional . NOT_EQUAL conditional
    (40) conditional -> conditional . GREATER conditional
    (41) conditional -> conditional . LESS conditional
    (42) conditional -> conditional . GREATER_EQUAL conditional
    (43) conditional -> conditional . LESS_EQUAL conditional
    (44) conditional -> conditional . AND conditional
    (45) conditional -> conditional . LOGICAL_AND conditional
    (46) conditional -> conditional . OR conditional
    (47) conditional -> conditional . LOGICAL_OR conditional

  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
    R_PAREN         reduce using rule 47 (conditional -> conditional LOGICAL_OR conditional .)
    SEMICOLON       reduce using rule 47 (conditional -> conditional LOGICAL_OR conditional .)
    EQUAL           shift and go to state 85
    NOT_EQUAL       shift and go to state 86
    GREATER         shift and go to state 87
    LESS            shift and go to state 88
    GREATER_EQUAL   shift and go to state 89
    LESS_EQUAL      shift and go to state 90
    AND             shift and go to state 91
    LOGICAL_AND     shift and go to state 92
    OR              shift and go to state 93
    LOGICAL_OR      shift and go to state 94

  ! EQUAL           [ reduce using rule 47 (conditional -> conditional LOGICAL_OR conditional .) ]
  ! NOT_EQUAL       [ reduce using rule 47 (conditional -> conditional LOGICAL_OR conditional .) ]
  ! GREATER         [ reduce using rule 47 (conditional -> conditional LOGICAL_OR conditional .) ]
  ! LESS            [ reduce using rule 47 (conditional -> conditional LOGICAL_OR conditional .) ]
  ! GREATER_EQUAL   [ reduce using rule 47 (conditional -> conditional LOGICAL_OR conditional .) ]
  ! LESS_EQUAL      [ reduce using rule 47 (conditional -> conditional LOGICAL_OR conditional .) ]
  ! AND             [ reduce using rule 47 (conditional -> conditional LOGICAL_OR conditional .) ]
  ! LOGICAL_AND     [ reduce using rule 47 (conditional -> conditional LOGICAL_OR conditional .) ]
  ! OR              [ reduce using rule 47 (conditional -> conditional LOGICAL_OR conditional .) ]
  ! LOGICAL_OR      [ reduce using rule 47 (conditional -> conditional LOGICAL_OR conditional .) ]


state 117

    (13) writeln -> WRITELN L_PAREN statement R_PAREN .

    SEMICOLON       reduce using rule 13 (writeln -> WRITELN L_PAREN statement R_PAREN .)


state 118

    (51) if_else_statement -> IF L_PAREN conditional R_PAREN . L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE
    (52) if_else_statement -> IF L_PAREN conditional R_PAREN . L_BRACE expressions R_BRACE

    L_BRACE         shift and go to state 121


state 119

    (49) for_loop -> FOR L_PAREN var_declaration SEMICOLON . conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE
    (38) conditional -> . conditional EQUAL conditional
    (39) conditional -> . conditional NOT_EQUAL conditional
    (40) conditional -> . conditional GREATER conditional
    (41) conditional -> . conditional LESS conditional
    (42) conditional -> . conditional GREATER_EQUAL conditional
    (43) conditional -> . conditional LESS_EQUAL conditional
    (44) conditional -> . conditional AND conditional
    (45) conditional -> . conditional LOGICAL_AND conditional
    (46) conditional -> . conditional OR conditional
    (47) conditional -> . conditional LOGICAL_OR conditional
    (48) conditional -> . statement
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . statement MODULO statement
    (20) statement -> . statement EQUAL statement
    (21) statement -> . statement NOT_EQUAL statement
    (22) statement -> . statement GREATER statement
    (23) statement -> . statement LESS statement
    (24) statement -> . statement GREATER_EQUAL statement
    (25) statement -> . statement LESS_EQUAL statement
    (26) statement -> . statement AND statement
    (27) statement -> . statement OR statement
    (28) statement -> . statement LOGICAL_AND statement
    (29) statement -> . statement LOGICAL_OR statement
    (30) statement -> . INT
    (31) statement -> . FLOAT
    (32) statement -> . BOOL
    (33) statement -> . STRING
    (34) statement -> . L_PAREN statement R_PAREN
    (35) statement -> . L_PAREN conditional R_PAREN
    (36) statement -> . IDENTIFIER INCREMENT
    (37) statement -> . IDENTIFIER DECREMENT

    IDENTIFIER      shift and go to state 56
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    STRING          shift and go to state 60
    L_PAREN         shift and go to state 18

    conditional                    shift and go to state 122
    statement                      shift and go to state 97

state 120

    (50) while_loop -> WHILE L_PAREN conditional R_PAREN . L_BRACE expressions R_BRACE

    L_BRACE         shift and go to state 123


state 121

    (51) if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE . expressions R_BRACE ELSE L_BRACE expressions R_BRACE
    (52) if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE . expressions R_BRACE
    (2) expressions -> . expressions expression
    (3) expressions -> . expression
    (4) expression -> . var_declaration SEMICOLON
    (5) expression -> . write SEMICOLON
    (6) expression -> . writeln SEMICOLON
    (7) expression -> . statement SEMICOLON
    (8) expression -> . if_else_statement
    (9) expression -> . for_loop
    (10) expression -> . while_loop
    (11) expression -> . empty
    (53) var_declaration -> . data_type declarations
    (60) var_declaration -> . IDENTIFIER ASSIGN statement
    (12) write -> . WRITE L_PAREN statement R_PAREN
    (13) writeln -> . WRITELN L_PAREN statement R_PAREN
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . statement MODULO statement
    (20) statement -> . statement EQUAL statement
    (21) statement -> . statement NOT_EQUAL statement
    (22) statement -> . statement GREATER statement
    (23) statement -> . statement LESS statement
    (24) statement -> . statement GREATER_EQUAL statement
    (25) statement -> . statement LESS_EQUAL statement
    (26) statement -> . statement AND statement
    (27) statement -> . statement OR statement
    (28) statement -> . statement LOGICAL_AND statement
    (29) statement -> . statement LOGICAL_OR statement
    (30) statement -> . INT
    (31) statement -> . FLOAT
    (32) statement -> . BOOL
    (33) statement -> . STRING
    (34) statement -> . L_PAREN statement R_PAREN
    (35) statement -> . L_PAREN conditional R_PAREN
    (36) statement -> . IDENTIFIER INCREMENT
    (37) statement -> . IDENTIFIER DECREMENT
    (51) if_else_statement -> . IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE
    (52) if_else_statement -> . IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE
    (49) for_loop -> . FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE
    (50) while_loop -> . WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE
    (61) empty -> .
    (54) data_type -> . INT
    (55) data_type -> . FLOAT
    (56) data_type -> . BOOL
    (57) data_type -> . STRING

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for L_PAREN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    IDENTIFIER      shift and go to state 16
    WRITE           shift and go to state 17
    WRITELN         shift and go to state 19
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 22
    STRING          shift and go to state 23
    L_PAREN         shift and go to state 18
    IF              shift and go to state 24
    FOR             shift and go to state 25
    WHILE           shift and go to state 26
    R_BRACE         reduce using rule 61 (empty -> .)

  ! IDENTIFIER      [ reduce using rule 61 (empty -> .) ]
  ! WRITE           [ reduce using rule 61 (empty -> .) ]
  ! WRITELN         [ reduce using rule 61 (empty -> .) ]
  ! INT             [ reduce using rule 61 (empty -> .) ]
  ! FLOAT           [ reduce using rule 61 (empty -> .) ]
  ! BOOL            [ reduce using rule 61 (empty -> .) ]
  ! STRING          [ reduce using rule 61 (empty -> .) ]
  ! L_PAREN         [ reduce using rule 61 (empty -> .) ]
  ! IF              [ reduce using rule 61 (empty -> .) ]
  ! FOR             [ reduce using rule 61 (empty -> .) ]
  ! WHILE           [ reduce using rule 61 (empty -> .) ]

    expressions                    shift and go to state 124
    expression                     shift and go to state 6
    var_declaration                shift and go to state 7
    write                          shift and go to state 8
    writeln                        shift and go to state 9
    statement                      shift and go to state 10
    if_else_statement              shift and go to state 11
    for_loop                       shift and go to state 12
    while_loop                     shift and go to state 13
    empty                          shift and go to state 14
    data_type                      shift and go to state 15

state 122

    (49) for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional . SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE
    (38) conditional -> conditional . EQUAL conditional
    (39) conditional -> conditional . NOT_EQUAL conditional
    (40) conditional -> conditional . GREATER conditional
    (41) conditional -> conditional . LESS conditional
    (42) conditional -> conditional . GREATER_EQUAL conditional
    (43) conditional -> conditional . LESS_EQUAL conditional
    (44) conditional -> conditional . AND conditional
    (45) conditional -> conditional . LOGICAL_AND conditional
    (46) conditional -> conditional . OR conditional
    (47) conditional -> conditional . LOGICAL_OR conditional

    SEMICOLON       shift and go to state 125
    EQUAL           shift and go to state 85
    NOT_EQUAL       shift and go to state 86
    GREATER         shift and go to state 87
    LESS            shift and go to state 88
    GREATER_EQUAL   shift and go to state 89
    LESS_EQUAL      shift and go to state 90
    AND             shift and go to state 91
    LOGICAL_AND     shift and go to state 92
    OR              shift and go to state 93
    LOGICAL_OR      shift and go to state 94


state 123

    (50) while_loop -> WHILE L_PAREN conditional R_PAREN L_BRACE . expressions R_BRACE
    (2) expressions -> . expressions expression
    (3) expressions -> . expression
    (4) expression -> . var_declaration SEMICOLON
    (5) expression -> . write SEMICOLON
    (6) expression -> . writeln SEMICOLON
    (7) expression -> . statement SEMICOLON
    (8) expression -> . if_else_statement
    (9) expression -> . for_loop
    (10) expression -> . while_loop
    (11) expression -> . empty
    (53) var_declaration -> . data_type declarations
    (60) var_declaration -> . IDENTIFIER ASSIGN statement
    (12) write -> . WRITE L_PAREN statement R_PAREN
    (13) writeln -> . WRITELN L_PAREN statement R_PAREN
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . statement MODULO statement
    (20) statement -> . statement EQUAL statement
    (21) statement -> . statement NOT_EQUAL statement
    (22) statement -> . statement GREATER statement
    (23) statement -> . statement LESS statement
    (24) statement -> . statement GREATER_EQUAL statement
    (25) statement -> . statement LESS_EQUAL statement
    (26) statement -> . statement AND statement
    (27) statement -> . statement OR statement
    (28) statement -> . statement LOGICAL_AND statement
    (29) statement -> . statement LOGICAL_OR statement
    (30) statement -> . INT
    (31) statement -> . FLOAT
    (32) statement -> . BOOL
    (33) statement -> . STRING
    (34) statement -> . L_PAREN statement R_PAREN
    (35) statement -> . L_PAREN conditional R_PAREN
    (36) statement -> . IDENTIFIER INCREMENT
    (37) statement -> . IDENTIFIER DECREMENT
    (51) if_else_statement -> . IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE
    (52) if_else_statement -> . IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE
    (49) for_loop -> . FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE
    (50) while_loop -> . WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE
    (61) empty -> .
    (54) data_type -> . INT
    (55) data_type -> . FLOAT
    (56) data_type -> . BOOL
    (57) data_type -> . STRING

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for L_PAREN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    IDENTIFIER      shift and go to state 16
    WRITE           shift and go to state 17
    WRITELN         shift and go to state 19
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 22
    STRING          shift and go to state 23
    L_PAREN         shift and go to state 18
    IF              shift and go to state 24
    FOR             shift and go to state 25
    WHILE           shift and go to state 26
    R_BRACE         reduce using rule 61 (empty -> .)

  ! IDENTIFIER      [ reduce using rule 61 (empty -> .) ]
  ! WRITE           [ reduce using rule 61 (empty -> .) ]
  ! WRITELN         [ reduce using rule 61 (empty -> .) ]
  ! INT             [ reduce using rule 61 (empty -> .) ]
  ! FLOAT           [ reduce using rule 61 (empty -> .) ]
  ! BOOL            [ reduce using rule 61 (empty -> .) ]
  ! STRING          [ reduce using rule 61 (empty -> .) ]
  ! L_PAREN         [ reduce using rule 61 (empty -> .) ]
  ! IF              [ reduce using rule 61 (empty -> .) ]
  ! FOR             [ reduce using rule 61 (empty -> .) ]
  ! WHILE           [ reduce using rule 61 (empty -> .) ]

    expressions                    shift and go to state 126
    expression                     shift and go to state 6
    var_declaration                shift and go to state 7
    write                          shift and go to state 8
    writeln                        shift and go to state 9
    statement                      shift and go to state 10
    if_else_statement              shift and go to state 11
    for_loop                       shift and go to state 12
    while_loop                     shift and go to state 13
    empty                          shift and go to state 14
    data_type                      shift and go to state 15

state 124

    (51) if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions . R_BRACE ELSE L_BRACE expressions R_BRACE
    (52) if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions . R_BRACE
    (2) expressions -> expressions . expression
    (4) expression -> . var_declaration SEMICOLON
    (5) expression -> . write SEMICOLON
    (6) expression -> . writeln SEMICOLON
    (7) expression -> . statement SEMICOLON
    (8) expression -> . if_else_statement
    (9) expression -> . for_loop
    (10) expression -> . while_loop
    (11) expression -> . empty
    (53) var_declaration -> . data_type declarations
    (60) var_declaration -> . IDENTIFIER ASSIGN statement
    (12) write -> . WRITE L_PAREN statement R_PAREN
    (13) writeln -> . WRITELN L_PAREN statement R_PAREN
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . statement MODULO statement
    (20) statement -> . statement EQUAL statement
    (21) statement -> . statement NOT_EQUAL statement
    (22) statement -> . statement GREATER statement
    (23) statement -> . statement LESS statement
    (24) statement -> . statement GREATER_EQUAL statement
    (25) statement -> . statement LESS_EQUAL statement
    (26) statement -> . statement AND statement
    (27) statement -> . statement OR statement
    (28) statement -> . statement LOGICAL_AND statement
    (29) statement -> . statement LOGICAL_OR statement
    (30) statement -> . INT
    (31) statement -> . FLOAT
    (32) statement -> . BOOL
    (33) statement -> . STRING
    (34) statement -> . L_PAREN statement R_PAREN
    (35) statement -> . L_PAREN conditional R_PAREN
    (36) statement -> . IDENTIFIER INCREMENT
    (37) statement -> . IDENTIFIER DECREMENT
    (51) if_else_statement -> . IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE
    (52) if_else_statement -> . IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE
    (49) for_loop -> . FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE
    (50) while_loop -> . WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE
    (61) empty -> .
    (54) data_type -> . INT
    (55) data_type -> . FLOAT
    (56) data_type -> . BOOL
    (57) data_type -> . STRING

  ! shift/reduce conflict for R_BRACE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for L_PAREN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_BRACE         shift and go to state 127
    IDENTIFIER      shift and go to state 16
    WRITE           shift and go to state 17
    WRITELN         shift and go to state 19
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 22
    STRING          shift and go to state 23
    L_PAREN         shift and go to state 18
    IF              shift and go to state 24
    FOR             shift and go to state 25
    WHILE           shift and go to state 26

  ! R_BRACE         [ reduce using rule 61 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 61 (empty -> .) ]
  ! WRITE           [ reduce using rule 61 (empty -> .) ]
  ! WRITELN         [ reduce using rule 61 (empty -> .) ]
  ! INT             [ reduce using rule 61 (empty -> .) ]
  ! FLOAT           [ reduce using rule 61 (empty -> .) ]
  ! BOOL            [ reduce using rule 61 (empty -> .) ]
  ! STRING          [ reduce using rule 61 (empty -> .) ]
  ! L_PAREN         [ reduce using rule 61 (empty -> .) ]
  ! IF              [ reduce using rule 61 (empty -> .) ]
  ! FOR             [ reduce using rule 61 (empty -> .) ]
  ! WHILE           [ reduce using rule 61 (empty -> .) ]

    expression                     shift and go to state 28
    var_declaration                shift and go to state 7
    write                          shift and go to state 8
    writeln                        shift and go to state 9
    statement                      shift and go to state 10
    if_else_statement              shift and go to state 11
    for_loop                       shift and go to state 12
    while_loop                     shift and go to state 13
    empty                          shift and go to state 14
    data_type                      shift and go to state 15

state 125

    (49) for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON . statement R_PAREN L_BRACE expressions R_BRACE
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . statement MODULO statement
    (20) statement -> . statement EQUAL statement
    (21) statement -> . statement NOT_EQUAL statement
    (22) statement -> . statement GREATER statement
    (23) statement -> . statement LESS statement
    (24) statement -> . statement GREATER_EQUAL statement
    (25) statement -> . statement LESS_EQUAL statement
    (26) statement -> . statement AND statement
    (27) statement -> . statement OR statement
    (28) statement -> . statement LOGICAL_AND statement
    (29) statement -> . statement LOGICAL_OR statement
    (30) statement -> . INT
    (31) statement -> . FLOAT
    (32) statement -> . BOOL
    (33) statement -> . STRING
    (34) statement -> . L_PAREN statement R_PAREN
    (35) statement -> . L_PAREN conditional R_PAREN
    (36) statement -> . IDENTIFIER INCREMENT
    (37) statement -> . IDENTIFIER DECREMENT

    IDENTIFIER      shift and go to state 56
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    STRING          shift and go to state 60
    L_PAREN         shift and go to state 18

    statement                      shift and go to state 128

state 126

    (50) while_loop -> WHILE L_PAREN conditional R_PAREN L_BRACE expressions . R_BRACE
    (2) expressions -> expressions . expression
    (4) expression -> . var_declaration SEMICOLON
    (5) expression -> . write SEMICOLON
    (6) expression -> . writeln SEMICOLON
    (7) expression -> . statement SEMICOLON
    (8) expression -> . if_else_statement
    (9) expression -> . for_loop
    (10) expression -> . while_loop
    (11) expression -> . empty
    (53) var_declaration -> . data_type declarations
    (60) var_declaration -> . IDENTIFIER ASSIGN statement
    (12) write -> . WRITE L_PAREN statement R_PAREN
    (13) writeln -> . WRITELN L_PAREN statement R_PAREN
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . statement MODULO statement
    (20) statement -> . statement EQUAL statement
    (21) statement -> . statement NOT_EQUAL statement
    (22) statement -> . statement GREATER statement
    (23) statement -> . statement LESS statement
    (24) statement -> . statement GREATER_EQUAL statement
    (25) statement -> . statement LESS_EQUAL statement
    (26) statement -> . statement AND statement
    (27) statement -> . statement OR statement
    (28) statement -> . statement LOGICAL_AND statement
    (29) statement -> . statement LOGICAL_OR statement
    (30) statement -> . INT
    (31) statement -> . FLOAT
    (32) statement -> . BOOL
    (33) statement -> . STRING
    (34) statement -> . L_PAREN statement R_PAREN
    (35) statement -> . L_PAREN conditional R_PAREN
    (36) statement -> . IDENTIFIER INCREMENT
    (37) statement -> . IDENTIFIER DECREMENT
    (51) if_else_statement -> . IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE
    (52) if_else_statement -> . IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE
    (49) for_loop -> . FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE
    (50) while_loop -> . WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE
    (61) empty -> .
    (54) data_type -> . INT
    (55) data_type -> . FLOAT
    (56) data_type -> . BOOL
    (57) data_type -> . STRING

  ! shift/reduce conflict for R_BRACE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for L_PAREN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_BRACE         shift and go to state 129
    IDENTIFIER      shift and go to state 16
    WRITE           shift and go to state 17
    WRITELN         shift and go to state 19
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 22
    STRING          shift and go to state 23
    L_PAREN         shift and go to state 18
    IF              shift and go to state 24
    FOR             shift and go to state 25
    WHILE           shift and go to state 26

  ! R_BRACE         [ reduce using rule 61 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 61 (empty -> .) ]
  ! WRITE           [ reduce using rule 61 (empty -> .) ]
  ! WRITELN         [ reduce using rule 61 (empty -> .) ]
  ! INT             [ reduce using rule 61 (empty -> .) ]
  ! FLOAT           [ reduce using rule 61 (empty -> .) ]
  ! BOOL            [ reduce using rule 61 (empty -> .) ]
  ! STRING          [ reduce using rule 61 (empty -> .) ]
  ! L_PAREN         [ reduce using rule 61 (empty -> .) ]
  ! IF              [ reduce using rule 61 (empty -> .) ]
  ! FOR             [ reduce using rule 61 (empty -> .) ]
  ! WHILE           [ reduce using rule 61 (empty -> .) ]

    expression                     shift and go to state 28
    var_declaration                shift and go to state 7
    write                          shift and go to state 8
    writeln                        shift and go to state 9
    statement                      shift and go to state 10
    if_else_statement              shift and go to state 11
    for_loop                       shift and go to state 12
    while_loop                     shift and go to state 13
    empty                          shift and go to state 14
    data_type                      shift and go to state 15

state 127

    (51) if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE . ELSE L_BRACE expressions R_BRACE
    (52) if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .

    ELSE            shift and go to state 130
    R_BRACE         reduce using rule 52 (if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .)
    IDENTIFIER      reduce using rule 52 (if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .)
    WRITE           reduce using rule 52 (if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .)
    WRITELN         reduce using rule 52 (if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .)
    INT             reduce using rule 52 (if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .)
    FLOAT           reduce using rule 52 (if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .)
    BOOL            reduce using rule 52 (if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .)
    STRING          reduce using rule 52 (if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .)
    L_PAREN         reduce using rule 52 (if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .)
    IF              reduce using rule 52 (if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .)
    FOR             reduce using rule 52 (if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .)
    WHILE           reduce using rule 52 (if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .)


state 128

    (49) for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement . R_PAREN L_BRACE expressions R_BRACE
    (15) statement -> statement . PLUS statement
    (16) statement -> statement . MINUS statement
    (17) statement -> statement . TIMES statement
    (18) statement -> statement . DIVIDE statement
    (19) statement -> statement . MODULO statement
    (20) statement -> statement . EQUAL statement
    (21) statement -> statement . NOT_EQUAL statement
    (22) statement -> statement . GREATER statement
    (23) statement -> statement . LESS statement
    (24) statement -> statement . GREATER_EQUAL statement
    (25) statement -> statement . LESS_EQUAL statement
    (26) statement -> statement . AND statement
    (27) statement -> statement . OR statement
    (28) statement -> statement . LOGICAL_AND statement
    (29) statement -> statement . LOGICAL_OR statement

    R_PAREN         shift and go to state 131
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    MODULO          shift and go to state 37
    EQUAL           shift and go to state 38
    NOT_EQUAL       shift and go to state 39
    GREATER         shift and go to state 40
    LESS            shift and go to state 41
    GREATER_EQUAL   shift and go to state 42
    LESS_EQUAL      shift and go to state 43
    AND             shift and go to state 44
    OR              shift and go to state 45
    LOGICAL_AND     shift and go to state 46
    LOGICAL_OR      shift and go to state 47


state 129

    (50) while_loop -> WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .

    R_BRACE         reduce using rule 50 (while_loop -> WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .)
    IDENTIFIER      reduce using rule 50 (while_loop -> WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .)
    WRITE           reduce using rule 50 (while_loop -> WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .)
    WRITELN         reduce using rule 50 (while_loop -> WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .)
    INT             reduce using rule 50 (while_loop -> WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .)
    FLOAT           reduce using rule 50 (while_loop -> WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .)
    BOOL            reduce using rule 50 (while_loop -> WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .)
    STRING          reduce using rule 50 (while_loop -> WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .)
    L_PAREN         reduce using rule 50 (while_loop -> WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .)
    IF              reduce using rule 50 (while_loop -> WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .)
    FOR             reduce using rule 50 (while_loop -> WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .)
    WHILE           reduce using rule 50 (while_loop -> WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .)


state 130

    (51) if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE . L_BRACE expressions R_BRACE

    L_BRACE         shift and go to state 132


state 131

    (49) for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN . L_BRACE expressions R_BRACE

    L_BRACE         shift and go to state 133


state 132

    (51) if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE . expressions R_BRACE
    (2) expressions -> . expressions expression
    (3) expressions -> . expression
    (4) expression -> . var_declaration SEMICOLON
    (5) expression -> . write SEMICOLON
    (6) expression -> . writeln SEMICOLON
    (7) expression -> . statement SEMICOLON
    (8) expression -> . if_else_statement
    (9) expression -> . for_loop
    (10) expression -> . while_loop
    (11) expression -> . empty
    (53) var_declaration -> . data_type declarations
    (60) var_declaration -> . IDENTIFIER ASSIGN statement
    (12) write -> . WRITE L_PAREN statement R_PAREN
    (13) writeln -> . WRITELN L_PAREN statement R_PAREN
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . statement MODULO statement
    (20) statement -> . statement EQUAL statement
    (21) statement -> . statement NOT_EQUAL statement
    (22) statement -> . statement GREATER statement
    (23) statement -> . statement LESS statement
    (24) statement -> . statement GREATER_EQUAL statement
    (25) statement -> . statement LESS_EQUAL statement
    (26) statement -> . statement AND statement
    (27) statement -> . statement OR statement
    (28) statement -> . statement LOGICAL_AND statement
    (29) statement -> . statement LOGICAL_OR statement
    (30) statement -> . INT
    (31) statement -> . FLOAT
    (32) statement -> . BOOL
    (33) statement -> . STRING
    (34) statement -> . L_PAREN statement R_PAREN
    (35) statement -> . L_PAREN conditional R_PAREN
    (36) statement -> . IDENTIFIER INCREMENT
    (37) statement -> . IDENTIFIER DECREMENT
    (51) if_else_statement -> . IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE
    (52) if_else_statement -> . IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE
    (49) for_loop -> . FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE
    (50) while_loop -> . WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE
    (61) empty -> .
    (54) data_type -> . INT
    (55) data_type -> . FLOAT
    (56) data_type -> . BOOL
    (57) data_type -> . STRING

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for L_PAREN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    IDENTIFIER      shift and go to state 16
    WRITE           shift and go to state 17
    WRITELN         shift and go to state 19
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 22
    STRING          shift and go to state 23
    L_PAREN         shift and go to state 18
    IF              shift and go to state 24
    FOR             shift and go to state 25
    WHILE           shift and go to state 26
    R_BRACE         reduce using rule 61 (empty -> .)

  ! IDENTIFIER      [ reduce using rule 61 (empty -> .) ]
  ! WRITE           [ reduce using rule 61 (empty -> .) ]
  ! WRITELN         [ reduce using rule 61 (empty -> .) ]
  ! INT             [ reduce using rule 61 (empty -> .) ]
  ! FLOAT           [ reduce using rule 61 (empty -> .) ]
  ! BOOL            [ reduce using rule 61 (empty -> .) ]
  ! STRING          [ reduce using rule 61 (empty -> .) ]
  ! L_PAREN         [ reduce using rule 61 (empty -> .) ]
  ! IF              [ reduce using rule 61 (empty -> .) ]
  ! FOR             [ reduce using rule 61 (empty -> .) ]
  ! WHILE           [ reduce using rule 61 (empty -> .) ]

    expressions                    shift and go to state 134
    expression                     shift and go to state 6
    var_declaration                shift and go to state 7
    write                          shift and go to state 8
    writeln                        shift and go to state 9
    statement                      shift and go to state 10
    if_else_statement              shift and go to state 11
    for_loop                       shift and go to state 12
    while_loop                     shift and go to state 13
    empty                          shift and go to state 14
    data_type                      shift and go to state 15

state 133

    (49) for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE . expressions R_BRACE
    (2) expressions -> . expressions expression
    (3) expressions -> . expression
    (4) expression -> . var_declaration SEMICOLON
    (5) expression -> . write SEMICOLON
    (6) expression -> . writeln SEMICOLON
    (7) expression -> . statement SEMICOLON
    (8) expression -> . if_else_statement
    (9) expression -> . for_loop
    (10) expression -> . while_loop
    (11) expression -> . empty
    (53) var_declaration -> . data_type declarations
    (60) var_declaration -> . IDENTIFIER ASSIGN statement
    (12) write -> . WRITE L_PAREN statement R_PAREN
    (13) writeln -> . WRITELN L_PAREN statement R_PAREN
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . statement MODULO statement
    (20) statement -> . statement EQUAL statement
    (21) statement -> . statement NOT_EQUAL statement
    (22) statement -> . statement GREATER statement
    (23) statement -> . statement LESS statement
    (24) statement -> . statement GREATER_EQUAL statement
    (25) statement -> . statement LESS_EQUAL statement
    (26) statement -> . statement AND statement
    (27) statement -> . statement OR statement
    (28) statement -> . statement LOGICAL_AND statement
    (29) statement -> . statement LOGICAL_OR statement
    (30) statement -> . INT
    (31) statement -> . FLOAT
    (32) statement -> . BOOL
    (33) statement -> . STRING
    (34) statement -> . L_PAREN statement R_PAREN
    (35) statement -> . L_PAREN conditional R_PAREN
    (36) statement -> . IDENTIFIER INCREMENT
    (37) statement -> . IDENTIFIER DECREMENT
    (51) if_else_statement -> . IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE
    (52) if_else_statement -> . IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE
    (49) for_loop -> . FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE
    (50) while_loop -> . WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE
    (61) empty -> .
    (54) data_type -> . INT
    (55) data_type -> . FLOAT
    (56) data_type -> . BOOL
    (57) data_type -> . STRING

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for L_PAREN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    IDENTIFIER      shift and go to state 16
    WRITE           shift and go to state 17
    WRITELN         shift and go to state 19
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 22
    STRING          shift and go to state 23
    L_PAREN         shift and go to state 18
    IF              shift and go to state 24
    FOR             shift and go to state 25
    WHILE           shift and go to state 26
    R_BRACE         reduce using rule 61 (empty -> .)

  ! IDENTIFIER      [ reduce using rule 61 (empty -> .) ]
  ! WRITE           [ reduce using rule 61 (empty -> .) ]
  ! WRITELN         [ reduce using rule 61 (empty -> .) ]
  ! INT             [ reduce using rule 61 (empty -> .) ]
  ! FLOAT           [ reduce using rule 61 (empty -> .) ]
  ! BOOL            [ reduce using rule 61 (empty -> .) ]
  ! STRING          [ reduce using rule 61 (empty -> .) ]
  ! L_PAREN         [ reduce using rule 61 (empty -> .) ]
  ! IF              [ reduce using rule 61 (empty -> .) ]
  ! FOR             [ reduce using rule 61 (empty -> .) ]
  ! WHILE           [ reduce using rule 61 (empty -> .) ]

    var_declaration                shift and go to state 7
    statement                      shift and go to state 10
    expressions                    shift and go to state 135
    expression                     shift and go to state 6
    write                          shift and go to state 8
    writeln                        shift and go to state 9
    if_else_statement              shift and go to state 11
    for_loop                       shift and go to state 12
    while_loop                     shift and go to state 13
    empty                          shift and go to state 14
    data_type                      shift and go to state 15

state 134

    (51) if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions . R_BRACE
    (2) expressions -> expressions . expression
    (4) expression -> . var_declaration SEMICOLON
    (5) expression -> . write SEMICOLON
    (6) expression -> . writeln SEMICOLON
    (7) expression -> . statement SEMICOLON
    (8) expression -> . if_else_statement
    (9) expression -> . for_loop
    (10) expression -> . while_loop
    (11) expression -> . empty
    (53) var_declaration -> . data_type declarations
    (60) var_declaration -> . IDENTIFIER ASSIGN statement
    (12) write -> . WRITE L_PAREN statement R_PAREN
    (13) writeln -> . WRITELN L_PAREN statement R_PAREN
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . statement MODULO statement
    (20) statement -> . statement EQUAL statement
    (21) statement -> . statement NOT_EQUAL statement
    (22) statement -> . statement GREATER statement
    (23) statement -> . statement LESS statement
    (24) statement -> . statement GREATER_EQUAL statement
    (25) statement -> . statement LESS_EQUAL statement
    (26) statement -> . statement AND statement
    (27) statement -> . statement OR statement
    (28) statement -> . statement LOGICAL_AND statement
    (29) statement -> . statement LOGICAL_OR statement
    (30) statement -> . INT
    (31) statement -> . FLOAT
    (32) statement -> . BOOL
    (33) statement -> . STRING
    (34) statement -> . L_PAREN statement R_PAREN
    (35) statement -> . L_PAREN conditional R_PAREN
    (36) statement -> . IDENTIFIER INCREMENT
    (37) statement -> . IDENTIFIER DECREMENT
    (51) if_else_statement -> . IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE
    (52) if_else_statement -> . IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE
    (49) for_loop -> . FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE
    (50) while_loop -> . WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE
    (61) empty -> .
    (54) data_type -> . INT
    (55) data_type -> . FLOAT
    (56) data_type -> . BOOL
    (57) data_type -> . STRING

  ! shift/reduce conflict for R_BRACE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for L_PAREN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_BRACE         shift and go to state 136
    IDENTIFIER      shift and go to state 16
    WRITE           shift and go to state 17
    WRITELN         shift and go to state 19
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 22
    STRING          shift and go to state 23
    L_PAREN         shift and go to state 18
    IF              shift and go to state 24
    FOR             shift and go to state 25
    WHILE           shift and go to state 26

  ! R_BRACE         [ reduce using rule 61 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 61 (empty -> .) ]
  ! WRITE           [ reduce using rule 61 (empty -> .) ]
  ! WRITELN         [ reduce using rule 61 (empty -> .) ]
  ! INT             [ reduce using rule 61 (empty -> .) ]
  ! FLOAT           [ reduce using rule 61 (empty -> .) ]
  ! BOOL            [ reduce using rule 61 (empty -> .) ]
  ! STRING          [ reduce using rule 61 (empty -> .) ]
  ! L_PAREN         [ reduce using rule 61 (empty -> .) ]
  ! IF              [ reduce using rule 61 (empty -> .) ]
  ! FOR             [ reduce using rule 61 (empty -> .) ]
  ! WHILE           [ reduce using rule 61 (empty -> .) ]

    expression                     shift and go to state 28
    var_declaration                shift and go to state 7
    write                          shift and go to state 8
    writeln                        shift and go to state 9
    statement                      shift and go to state 10
    if_else_statement              shift and go to state 11
    for_loop                       shift and go to state 12
    while_loop                     shift and go to state 13
    empty                          shift and go to state 14
    data_type                      shift and go to state 15

state 135

    (49) for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions . R_BRACE
    (2) expressions -> expressions . expression
    (4) expression -> . var_declaration SEMICOLON
    (5) expression -> . write SEMICOLON
    (6) expression -> . writeln SEMICOLON
    (7) expression -> . statement SEMICOLON
    (8) expression -> . if_else_statement
    (9) expression -> . for_loop
    (10) expression -> . while_loop
    (11) expression -> . empty
    (53) var_declaration -> . data_type declarations
    (60) var_declaration -> . IDENTIFIER ASSIGN statement
    (12) write -> . WRITE L_PAREN statement R_PAREN
    (13) writeln -> . WRITELN L_PAREN statement R_PAREN
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . statement MODULO statement
    (20) statement -> . statement EQUAL statement
    (21) statement -> . statement NOT_EQUAL statement
    (22) statement -> . statement GREATER statement
    (23) statement -> . statement LESS statement
    (24) statement -> . statement GREATER_EQUAL statement
    (25) statement -> . statement LESS_EQUAL statement
    (26) statement -> . statement AND statement
    (27) statement -> . statement OR statement
    (28) statement -> . statement LOGICAL_AND statement
    (29) statement -> . statement LOGICAL_OR statement
    (30) statement -> . INT
    (31) statement -> . FLOAT
    (32) statement -> . BOOL
    (33) statement -> . STRING
    (34) statement -> . L_PAREN statement R_PAREN
    (35) statement -> . L_PAREN conditional R_PAREN
    (36) statement -> . IDENTIFIER INCREMENT
    (37) statement -> . IDENTIFIER DECREMENT
    (51) if_else_statement -> . IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE
    (52) if_else_statement -> . IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE
    (49) for_loop -> . FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE
    (50) while_loop -> . WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE
    (61) empty -> .
    (54) data_type -> . INT
    (55) data_type -> . FLOAT
    (56) data_type -> . BOOL
    (57) data_type -> . STRING

  ! shift/reduce conflict for R_BRACE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for L_PAREN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_BRACE         shift and go to state 137
    IDENTIFIER      shift and go to state 16
    WRITE           shift and go to state 17
    WRITELN         shift and go to state 19
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 22
    STRING          shift and go to state 23
    L_PAREN         shift and go to state 18
    IF              shift and go to state 24
    FOR             shift and go to state 25
    WHILE           shift and go to state 26

  ! R_BRACE         [ reduce using rule 61 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 61 (empty -> .) ]
  ! WRITE           [ reduce using rule 61 (empty -> .) ]
  ! WRITELN         [ reduce using rule 61 (empty -> .) ]
  ! INT             [ reduce using rule 61 (empty -> .) ]
  ! FLOAT           [ reduce using rule 61 (empty -> .) ]
  ! BOOL            [ reduce using rule 61 (empty -> .) ]
  ! STRING          [ reduce using rule 61 (empty -> .) ]
  ! L_PAREN         [ reduce using rule 61 (empty -> .) ]
  ! IF              [ reduce using rule 61 (empty -> .) ]
  ! FOR             [ reduce using rule 61 (empty -> .) ]
  ! WHILE           [ reduce using rule 61 (empty -> .) ]

    var_declaration                shift and go to state 7
    statement                      shift and go to state 10
    expression                     shift and go to state 28
    write                          shift and go to state 8
    writeln                        shift and go to state 9
    if_else_statement              shift and go to state 11
    for_loop                       shift and go to state 12
    while_loop                     shift and go to state 13
    empty                          shift and go to state 14
    data_type                      shift and go to state 15

state 136

    (51) if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE .

    R_BRACE         reduce using rule 51 (if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE .)
    IDENTIFIER      reduce using rule 51 (if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE .)
    WRITE           reduce using rule 51 (if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE .)
    WRITELN         reduce using rule 51 (if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE .)
    INT             reduce using rule 51 (if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE .)
    FLOAT           reduce using rule 51 (if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE .)
    BOOL            reduce using rule 51 (if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE .)
    STRING          reduce using rule 51 (if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE .)
    L_PAREN         reduce using rule 51 (if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE .)
    IF              reduce using rule 51 (if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE .)
    FOR             reduce using rule 51 (if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE .)
    WHILE           reduce using rule 51 (if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE .)


state 137

    (49) for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE .

    R_BRACE         reduce using rule 49 (for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE .)
    IDENTIFIER      reduce using rule 49 (for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE .)
    WRITE           reduce using rule 49 (for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE .)
    WRITELN         reduce using rule 49 (for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE .)
    INT             reduce using rule 49 (for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE .)
    FLOAT           reduce using rule 49 (for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE .)
    BOOL            reduce using rule 49 (for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE .)
    STRING          reduce using rule 49 (for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE .)
    L_PAREN         reduce using rule 49 (for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE .)
    IF              reduce using rule 49 (for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE .)
    FOR             reduce using rule 49 (for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE .)
    WHILE           reduce using rule 49 (for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IDENTIFIER in state 4 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 4 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 4 resolved as shift
WARNING: shift/reduce conflict for INT in state 4 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 4 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 4 resolved as shift
WARNING: shift/reduce conflict for STRING in state 4 resolved as shift
WARNING: shift/reduce conflict for L_PAREN in state 4 resolved as shift
WARNING: shift/reduce conflict for IF in state 4 resolved as shift
WARNING: shift/reduce conflict for FOR in state 4 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 4 resolved as shift
WARNING: shift/reduce conflict for R_BRACE in state 5 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 5 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 5 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 5 resolved as shift
WARNING: shift/reduce conflict for INT in state 5 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 5 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 5 resolved as shift
WARNING: shift/reduce conflict for STRING in state 5 resolved as shift
WARNING: shift/reduce conflict for L_PAREN in state 5 resolved as shift
WARNING: shift/reduce conflict for IF in state 5 resolved as shift
WARNING: shift/reduce conflict for FOR in state 5 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 5 resolved as shift
WARNING: shift/reduce conflict for R_PAREN in state 54 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 54 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 54 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 54 resolved as shift
WARNING: shift/reduce conflict for LESS in state 54 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 54 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 54 resolved as shift
WARNING: shift/reduce conflict for AND in state 54 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 54 resolved as shift
WARNING: shift/reduce conflict for OR in state 54 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 54 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 69 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 69 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 69 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 69 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 69 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 69 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 69 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 69 resolved as shift
WARNING: shift/reduce conflict for LESS in state 69 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 69 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 69 resolved as shift
WARNING: shift/reduce conflict for AND in state 69 resolved as shift
WARNING: shift/reduce conflict for OR in state 69 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 69 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 69 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 70 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 70 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 70 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 70 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 70 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 70 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 70 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 70 resolved as shift
WARNING: shift/reduce conflict for LESS in state 70 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 70 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 70 resolved as shift
WARNING: shift/reduce conflict for AND in state 70 resolved as shift
WARNING: shift/reduce conflict for OR in state 70 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 70 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 70 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 71 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 71 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 71 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 71 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 71 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 71 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 71 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 71 resolved as shift
WARNING: shift/reduce conflict for LESS in state 71 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 71 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 71 resolved as shift
WARNING: shift/reduce conflict for AND in state 71 resolved as shift
WARNING: shift/reduce conflict for OR in state 71 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 71 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 71 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 72 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 72 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 72 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 72 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 72 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 72 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 72 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 72 resolved as shift
WARNING: shift/reduce conflict for LESS in state 72 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 72 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 72 resolved as shift
WARNING: shift/reduce conflict for AND in state 72 resolved as shift
WARNING: shift/reduce conflict for OR in state 72 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 72 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 72 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 73 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 73 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 73 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 73 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 73 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 73 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 73 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 73 resolved as shift
WARNING: shift/reduce conflict for LESS in state 73 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 73 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 73 resolved as shift
WARNING: shift/reduce conflict for AND in state 73 resolved as shift
WARNING: shift/reduce conflict for OR in state 73 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 73 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 73 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 74 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 74 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 74 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 74 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 74 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 74 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 74 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 74 resolved as shift
WARNING: shift/reduce conflict for LESS in state 74 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 74 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 74 resolved as shift
WARNING: shift/reduce conflict for AND in state 74 resolved as shift
WARNING: shift/reduce conflict for OR in state 74 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 74 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 74 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 75 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 75 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 75 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 75 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 75 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 75 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 75 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 75 resolved as shift
WARNING: shift/reduce conflict for LESS in state 75 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 75 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 75 resolved as shift
WARNING: shift/reduce conflict for AND in state 75 resolved as shift
WARNING: shift/reduce conflict for OR in state 75 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 75 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 75 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 78 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 78 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 78 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 78 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 78 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 78 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 78 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 78 resolved as shift
WARNING: shift/reduce conflict for LESS in state 78 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 78 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 78 resolved as shift
WARNING: shift/reduce conflict for AND in state 78 resolved as shift
WARNING: shift/reduce conflict for OR in state 78 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 78 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 78 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 79 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 79 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 79 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 79 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 79 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 79 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 79 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 79 resolved as shift
WARNING: shift/reduce conflict for LESS in state 79 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 79 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 79 resolved as shift
WARNING: shift/reduce conflict for AND in state 79 resolved as shift
WARNING: shift/reduce conflict for OR in state 79 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 79 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 79 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 97 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 97 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 97 resolved as shift
WARNING: shift/reduce conflict for LESS in state 97 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 97 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 97 resolved as shift
WARNING: shift/reduce conflict for AND in state 97 resolved as shift
WARNING: shift/reduce conflict for OR in state 97 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 97 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 97 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 107 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 107 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 107 resolved as shift
WARNING: shift/reduce conflict for LESS in state 107 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 107 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 107 resolved as shift
WARNING: shift/reduce conflict for AND in state 107 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 107 resolved as shift
WARNING: shift/reduce conflict for OR in state 107 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 107 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 108 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 108 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 108 resolved as shift
WARNING: shift/reduce conflict for LESS in state 108 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 108 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 108 resolved as shift
WARNING: shift/reduce conflict for AND in state 108 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 108 resolved as shift
WARNING: shift/reduce conflict for OR in state 108 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 108 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 109 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 109 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 109 resolved as shift
WARNING: shift/reduce conflict for LESS in state 109 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 109 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 109 resolved as shift
WARNING: shift/reduce conflict for AND in state 109 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 109 resolved as shift
WARNING: shift/reduce conflict for OR in state 109 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 109 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 110 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 110 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 110 resolved as shift
WARNING: shift/reduce conflict for LESS in state 110 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 110 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 110 resolved as shift
WARNING: shift/reduce conflict for AND in state 110 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 110 resolved as shift
WARNING: shift/reduce conflict for OR in state 110 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 110 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 111 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 111 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 111 resolved as shift
WARNING: shift/reduce conflict for LESS in state 111 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 111 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 111 resolved as shift
WARNING: shift/reduce conflict for AND in state 111 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 111 resolved as shift
WARNING: shift/reduce conflict for OR in state 111 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 111 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 112 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 112 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 112 resolved as shift
WARNING: shift/reduce conflict for LESS in state 112 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 112 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 112 resolved as shift
WARNING: shift/reduce conflict for AND in state 112 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 112 resolved as shift
WARNING: shift/reduce conflict for OR in state 112 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 112 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 114 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 114 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 114 resolved as shift
WARNING: shift/reduce conflict for LESS in state 114 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 114 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 114 resolved as shift
WARNING: shift/reduce conflict for AND in state 114 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 114 resolved as shift
WARNING: shift/reduce conflict for OR in state 114 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 114 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 116 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 116 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 116 resolved as shift
WARNING: shift/reduce conflict for LESS in state 116 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 116 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 116 resolved as shift
WARNING: shift/reduce conflict for AND in state 116 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 116 resolved as shift
WARNING: shift/reduce conflict for OR in state 116 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 116 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 121 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 121 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 121 resolved as shift
WARNING: shift/reduce conflict for INT in state 121 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 121 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 121 resolved as shift
WARNING: shift/reduce conflict for STRING in state 121 resolved as shift
WARNING: shift/reduce conflict for L_PAREN in state 121 resolved as shift
WARNING: shift/reduce conflict for IF in state 121 resolved as shift
WARNING: shift/reduce conflict for FOR in state 121 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 121 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 123 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 123 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 123 resolved as shift
WARNING: shift/reduce conflict for INT in state 123 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 123 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 123 resolved as shift
WARNING: shift/reduce conflict for STRING in state 123 resolved as shift
WARNING: shift/reduce conflict for L_PAREN in state 123 resolved as shift
WARNING: shift/reduce conflict for IF in state 123 resolved as shift
WARNING: shift/reduce conflict for FOR in state 123 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 123 resolved as shift
WARNING: shift/reduce conflict for R_BRACE in state 124 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 124 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 124 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 124 resolved as shift
WARNING: shift/reduce conflict for INT in state 124 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 124 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 124 resolved as shift
WARNING: shift/reduce conflict for STRING in state 124 resolved as shift
WARNING: shift/reduce conflict for L_PAREN in state 124 resolved as shift
WARNING: shift/reduce conflict for IF in state 124 resolved as shift
WARNING: shift/reduce conflict for FOR in state 124 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 124 resolved as shift
WARNING: shift/reduce conflict for R_BRACE in state 126 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 126 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 126 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 126 resolved as shift
WARNING: shift/reduce conflict for INT in state 126 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 126 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 126 resolved as shift
WARNING: shift/reduce conflict for STRING in state 126 resolved as shift
WARNING: shift/reduce conflict for L_PAREN in state 126 resolved as shift
WARNING: shift/reduce conflict for IF in state 126 resolved as shift
WARNING: shift/reduce conflict for FOR in state 126 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 126 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 132 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 132 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 132 resolved as shift
WARNING: shift/reduce conflict for INT in state 132 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 132 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 132 resolved as shift
WARNING: shift/reduce conflict for STRING in state 132 resolved as shift
WARNING: shift/reduce conflict for L_PAREN in state 132 resolved as shift
WARNING: shift/reduce conflict for IF in state 132 resolved as shift
WARNING: shift/reduce conflict for FOR in state 132 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 132 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 133 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 133 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 133 resolved as shift
WARNING: shift/reduce conflict for INT in state 133 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 133 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 133 resolved as shift
WARNING: shift/reduce conflict for STRING in state 133 resolved as shift
WARNING: shift/reduce conflict for L_PAREN in state 133 resolved as shift
WARNING: shift/reduce conflict for IF in state 133 resolved as shift
WARNING: shift/reduce conflict for FOR in state 133 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 133 resolved as shift
WARNING: shift/reduce conflict for R_BRACE in state 134 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 134 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 134 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 134 resolved as shift
WARNING: shift/reduce conflict for INT in state 134 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 134 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 134 resolved as shift
WARNING: shift/reduce conflict for STRING in state 134 resolved as shift
WARNING: shift/reduce conflict for L_PAREN in state 134 resolved as shift
WARNING: shift/reduce conflict for IF in state 134 resolved as shift
WARNING: shift/reduce conflict for FOR in state 134 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 134 resolved as shift
WARNING: shift/reduce conflict for R_BRACE in state 135 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 135 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 135 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 135 resolved as shift
WARNING: shift/reduce conflict for INT in state 135 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 135 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 135 resolved as shift
WARNING: shift/reduce conflict for STRING in state 135 resolved as shift
WARNING: shift/reduce conflict for L_PAREN in state 135 resolved as shift
WARNING: shift/reduce conflict for IF in state 135 resolved as shift
WARNING: shift/reduce conflict for FOR in state 135 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 135 resolved as shift
