Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON
    LOGICAL_AND
    LOGICAL_NOT
    LOGICAL_OR
    L_BRACKET
    MODULO
    NOT
    RETURN
    R_BRACKET

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM MAIN L_BRACE expressions R_BRACE
Rule 2     expressions -> expressions expression
Rule 3     expressions -> expression
Rule 4     expression -> var_declaration SEMICOLON
Rule 5     expression -> write SEMICOLON
Rule 6     expression -> writeln SEMICOLON
Rule 7     expression -> statement SEMICOLON
Rule 8     expression -> if_else_statement
Rule 9     expression -> for_loop
Rule 10    expression -> while_loop
Rule 11    expression -> empty
Rule 12    write -> WRITE L_PAREN statement R_PAREN
Rule 13    writeln -> WRITELN L_PAREN statement R_PAREN
Rule 14    statement -> IDENTIFIER
Rule 15    statement -> statement PLUS statement
Rule 16    statement -> statement MINUS statement
Rule 17    statement -> statement TIMES statement
Rule 18    statement -> statement DIVIDE statement
Rule 19    statement -> INT
Rule 20    statement -> FLOAT
Rule 21    statement -> BOOL
Rule 22    statement -> STRING
Rule 23    statement -> L_PAREN statement R_PAREN
Rule 24    statement -> L_PAREN conditional R_PAREN
Rule 25    statement -> IDENTIFIER INCREMENT
Rule 26    statement -> IDENTIFIER DECREMENT
Rule 27    conditional -> conditional EQUAL conditional
Rule 28    conditional -> conditional NOT_EQUAL conditional
Rule 29    conditional -> conditional GREATER conditional
Rule 30    conditional -> conditional LESS conditional
Rule 31    conditional -> conditional GREATER_EQUAL conditional
Rule 32    conditional -> conditional LESS_EQUAL conditional
Rule 33    conditional -> conditional AND conditional
Rule 34    conditional -> conditional OR conditional
Rule 35    conditional -> TRUE
Rule 36    conditional -> FALSE
Rule 37    conditional -> statement
Rule 38    for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE
Rule 39    while_loop -> WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE
Rule 40    if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE
Rule 41    if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE
Rule 42    var_declaration -> data_type declarations
Rule 43    data_type -> INT
Rule 44    data_type -> FLOAT
Rule 45    data_type -> BOOL
Rule 46    data_type -> STRING
Rule 47    declarations -> IDENTIFIER COMMA declarations
Rule 48    declarations -> IDENTIFIER
Rule 49    var_declaration -> IDENTIFIER ASSIGN statement
Rule 50    empty -> <empty>

Terminals, with rules where they appear

AND                  : 33
ASSIGN               : 49
BOOL                 : 21 45
COLON                : 
COMMA                : 47
DECREMENT            : 26
DIVIDE               : 18
ELSE                 : 40
EQUAL                : 27
FALSE                : 36
FLOAT                : 20 44
FOR                  : 38
GREATER              : 29
GREATER_EQUAL        : 31
IDENTIFIER           : 14 25 26 47 48 49
IF                   : 40 41
INCREMENT            : 25
INT                  : 19 43
LESS                 : 30
LESS_EQUAL           : 32
LOGICAL_AND          : 
LOGICAL_NOT          : 
LOGICAL_OR           : 
L_BRACE              : 1 38 39 40 40 41
L_BRACKET            : 
L_PAREN              : 12 13 23 24 38 39 40 41
MAIN                 : 1
MINUS                : 16
MODULO               : 
NOT                  : 
NOT_EQUAL            : 28
OR                   : 34
PLUS                 : 15
PROGRAM              : 1
RETURN               : 
R_BRACE              : 1 38 39 40 40 41
R_BRACKET            : 
R_PAREN              : 12 13 23 24 38 39 40 41
SEMICOLON            : 4 5 6 7 38 38
STRING               : 22 46
TIMES                : 17
TRUE                 : 35
WHILE                : 39
WRITE                : 12
WRITELN              : 13
error                : 

Nonterminals, with rules where they appear

conditional          : 24 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 38 39 40 41
data_type            : 42
declarations         : 42 47
empty                : 11
expression           : 2 3
expressions          : 1 2 38 39 40 40 41
for_loop             : 9
if_else_statement    : 8
program              : 0
statement            : 7 12 13 15 15 16 16 17 17 18 18 23 37 38 49
var_declaration      : 4 38
while_loop           : 10
write                : 5
writeln              : 6

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM MAIN L_BRACE expressions R_BRACE

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . MAIN L_BRACE expressions R_BRACE

    MAIN            shift and go to state 3


state 3

    (1) program -> PROGRAM MAIN . L_BRACE expressions R_BRACE

    L_BRACE         shift and go to state 4


state 4

    (1) program -> PROGRAM MAIN L_BRACE . expressions R_BRACE
    (2) expressions -> . expressions expression
    (3) expressions -> . expression
    (4) expression -> . var_declaration SEMICOLON
    (5) expression -> . write SEMICOLON
    (6) expression -> . writeln SEMICOLON
    (7) expression -> . statement SEMICOLON
    (8) expression -> . if_else_statement
    (9) expression -> . for_loop
    (10) expression -> . while_loop
    (11) expression -> . empty
    (42) var_declaration -> . data_type declarations
    (49) var_declaration -> . IDENTIFIER ASSIGN statement
    (12) write -> . WRITE L_PAREN statement R_PAREN
    (13) writeln -> . WRITELN L_PAREN statement R_PAREN
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . INT
    (20) statement -> . FLOAT
    (21) statement -> . BOOL
    (22) statement -> . STRING
    (23) statement -> . L_PAREN statement R_PAREN
    (24) statement -> . L_PAREN conditional R_PAREN
    (25) statement -> . IDENTIFIER INCREMENT
    (26) statement -> . IDENTIFIER DECREMENT
    (40) if_else_statement -> . IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE
    (41) if_else_statement -> . IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE
    (38) for_loop -> . FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE
    (39) while_loop -> . WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE
    (50) empty -> .
    (43) data_type -> . INT
    (44) data_type -> . FLOAT
    (45) data_type -> . BOOL
    (46) data_type -> . STRING

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for L_PAREN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    IDENTIFIER      shift and go to state 16
    WRITE           shift and go to state 17
    WRITELN         shift and go to state 19
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 22
    STRING          shift and go to state 23
    L_PAREN         shift and go to state 18
    IF              shift and go to state 24
    FOR             shift and go to state 25
    WHILE           shift and go to state 26
    R_BRACE         reduce using rule 50 (empty -> .)

  ! IDENTIFIER      [ reduce using rule 50 (empty -> .) ]
  ! WRITE           [ reduce using rule 50 (empty -> .) ]
  ! WRITELN         [ reduce using rule 50 (empty -> .) ]
  ! INT             [ reduce using rule 50 (empty -> .) ]
  ! FLOAT           [ reduce using rule 50 (empty -> .) ]
  ! BOOL            [ reduce using rule 50 (empty -> .) ]
  ! STRING          [ reduce using rule 50 (empty -> .) ]
  ! L_PAREN         [ reduce using rule 50 (empty -> .) ]
  ! IF              [ reduce using rule 50 (empty -> .) ]
  ! FOR             [ reduce using rule 50 (empty -> .) ]
  ! WHILE           [ reduce using rule 50 (empty -> .) ]

    expressions                    shift and go to state 5
    expression                     shift and go to state 6
    var_declaration                shift and go to state 7
    write                          shift and go to state 8
    writeln                        shift and go to state 9
    statement                      shift and go to state 10
    if_else_statement              shift and go to state 11
    for_loop                       shift and go to state 12
    while_loop                     shift and go to state 13
    empty                          shift and go to state 14
    data_type                      shift and go to state 15

state 5

    (1) program -> PROGRAM MAIN L_BRACE expressions . R_BRACE
    (2) expressions -> expressions . expression
    (4) expression -> . var_declaration SEMICOLON
    (5) expression -> . write SEMICOLON
    (6) expression -> . writeln SEMICOLON
    (7) expression -> . statement SEMICOLON
    (8) expression -> . if_else_statement
    (9) expression -> . for_loop
    (10) expression -> . while_loop
    (11) expression -> . empty
    (42) var_declaration -> . data_type declarations
    (49) var_declaration -> . IDENTIFIER ASSIGN statement
    (12) write -> . WRITE L_PAREN statement R_PAREN
    (13) writeln -> . WRITELN L_PAREN statement R_PAREN
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . INT
    (20) statement -> . FLOAT
    (21) statement -> . BOOL
    (22) statement -> . STRING
    (23) statement -> . L_PAREN statement R_PAREN
    (24) statement -> . L_PAREN conditional R_PAREN
    (25) statement -> . IDENTIFIER INCREMENT
    (26) statement -> . IDENTIFIER DECREMENT
    (40) if_else_statement -> . IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE
    (41) if_else_statement -> . IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE
    (38) for_loop -> . FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE
    (39) while_loop -> . WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE
    (50) empty -> .
    (43) data_type -> . INT
    (44) data_type -> . FLOAT
    (45) data_type -> . BOOL
    (46) data_type -> . STRING

  ! shift/reduce conflict for R_BRACE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for L_PAREN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_BRACE         shift and go to state 27
    IDENTIFIER      shift and go to state 16
    WRITE           shift and go to state 17
    WRITELN         shift and go to state 19
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 22
    STRING          shift and go to state 23
    L_PAREN         shift and go to state 18
    IF              shift and go to state 24
    FOR             shift and go to state 25
    WHILE           shift and go to state 26

  ! R_BRACE         [ reduce using rule 50 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 50 (empty -> .) ]
  ! WRITE           [ reduce using rule 50 (empty -> .) ]
  ! WRITELN         [ reduce using rule 50 (empty -> .) ]
  ! INT             [ reduce using rule 50 (empty -> .) ]
  ! FLOAT           [ reduce using rule 50 (empty -> .) ]
  ! BOOL            [ reduce using rule 50 (empty -> .) ]
  ! STRING          [ reduce using rule 50 (empty -> .) ]
  ! L_PAREN         [ reduce using rule 50 (empty -> .) ]
  ! IF              [ reduce using rule 50 (empty -> .) ]
  ! FOR             [ reduce using rule 50 (empty -> .) ]
  ! WHILE           [ reduce using rule 50 (empty -> .) ]

    expression                     shift and go to state 28
    var_declaration                shift and go to state 7
    write                          shift and go to state 8
    writeln                        shift and go to state 9
    statement                      shift and go to state 10
    if_else_statement              shift and go to state 11
    for_loop                       shift and go to state 12
    while_loop                     shift and go to state 13
    empty                          shift and go to state 14
    data_type                      shift and go to state 15

state 6

    (3) expressions -> expression .

    R_BRACE         reduce using rule 3 (expressions -> expression .)
    IDENTIFIER      reduce using rule 3 (expressions -> expression .)
    WRITE           reduce using rule 3 (expressions -> expression .)
    WRITELN         reduce using rule 3 (expressions -> expression .)
    INT             reduce using rule 3 (expressions -> expression .)
    FLOAT           reduce using rule 3 (expressions -> expression .)
    BOOL            reduce using rule 3 (expressions -> expression .)
    STRING          reduce using rule 3 (expressions -> expression .)
    L_PAREN         reduce using rule 3 (expressions -> expression .)
    IF              reduce using rule 3 (expressions -> expression .)
    FOR             reduce using rule 3 (expressions -> expression .)
    WHILE           reduce using rule 3 (expressions -> expression .)


state 7

    (4) expression -> var_declaration . SEMICOLON

    SEMICOLON       shift and go to state 29


state 8

    (5) expression -> write . SEMICOLON

    SEMICOLON       shift and go to state 30


state 9

    (6) expression -> writeln . SEMICOLON

    SEMICOLON       shift and go to state 31


state 10

    (7) expression -> statement . SEMICOLON
    (15) statement -> statement . PLUS statement
    (16) statement -> statement . MINUS statement
    (17) statement -> statement . TIMES statement
    (18) statement -> statement . DIVIDE statement

    SEMICOLON       shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36


state 11

    (8) expression -> if_else_statement .

    R_BRACE         reduce using rule 8 (expression -> if_else_statement .)
    IDENTIFIER      reduce using rule 8 (expression -> if_else_statement .)
    WRITE           reduce using rule 8 (expression -> if_else_statement .)
    WRITELN         reduce using rule 8 (expression -> if_else_statement .)
    INT             reduce using rule 8 (expression -> if_else_statement .)
    FLOAT           reduce using rule 8 (expression -> if_else_statement .)
    BOOL            reduce using rule 8 (expression -> if_else_statement .)
    STRING          reduce using rule 8 (expression -> if_else_statement .)
    L_PAREN         reduce using rule 8 (expression -> if_else_statement .)
    IF              reduce using rule 8 (expression -> if_else_statement .)
    FOR             reduce using rule 8 (expression -> if_else_statement .)
    WHILE           reduce using rule 8 (expression -> if_else_statement .)


state 12

    (9) expression -> for_loop .

    R_BRACE         reduce using rule 9 (expression -> for_loop .)
    IDENTIFIER      reduce using rule 9 (expression -> for_loop .)
    WRITE           reduce using rule 9 (expression -> for_loop .)
    WRITELN         reduce using rule 9 (expression -> for_loop .)
    INT             reduce using rule 9 (expression -> for_loop .)
    FLOAT           reduce using rule 9 (expression -> for_loop .)
    BOOL            reduce using rule 9 (expression -> for_loop .)
    STRING          reduce using rule 9 (expression -> for_loop .)
    L_PAREN         reduce using rule 9 (expression -> for_loop .)
    IF              reduce using rule 9 (expression -> for_loop .)
    FOR             reduce using rule 9 (expression -> for_loop .)
    WHILE           reduce using rule 9 (expression -> for_loop .)


state 13

    (10) expression -> while_loop .

    R_BRACE         reduce using rule 10 (expression -> while_loop .)
    IDENTIFIER      reduce using rule 10 (expression -> while_loop .)
    WRITE           reduce using rule 10 (expression -> while_loop .)
    WRITELN         reduce using rule 10 (expression -> while_loop .)
    INT             reduce using rule 10 (expression -> while_loop .)
    FLOAT           reduce using rule 10 (expression -> while_loop .)
    BOOL            reduce using rule 10 (expression -> while_loop .)
    STRING          reduce using rule 10 (expression -> while_loop .)
    L_PAREN         reduce using rule 10 (expression -> while_loop .)
    IF              reduce using rule 10 (expression -> while_loop .)
    FOR             reduce using rule 10 (expression -> while_loop .)
    WHILE           reduce using rule 10 (expression -> while_loop .)


state 14

    (11) expression -> empty .

    R_BRACE         reduce using rule 11 (expression -> empty .)
    IDENTIFIER      reduce using rule 11 (expression -> empty .)
    WRITE           reduce using rule 11 (expression -> empty .)
    WRITELN         reduce using rule 11 (expression -> empty .)
    INT             reduce using rule 11 (expression -> empty .)
    FLOAT           reduce using rule 11 (expression -> empty .)
    BOOL            reduce using rule 11 (expression -> empty .)
    STRING          reduce using rule 11 (expression -> empty .)
    L_PAREN         reduce using rule 11 (expression -> empty .)
    IF              reduce using rule 11 (expression -> empty .)
    FOR             reduce using rule 11 (expression -> empty .)
    WHILE           reduce using rule 11 (expression -> empty .)


state 15

    (42) var_declaration -> data_type . declarations
    (47) declarations -> . IDENTIFIER COMMA declarations
    (48) declarations -> . IDENTIFIER

    IDENTIFIER      shift and go to state 38

    declarations                   shift and go to state 37

state 16

    (49) var_declaration -> IDENTIFIER . ASSIGN statement
    (14) statement -> IDENTIFIER .
    (25) statement -> IDENTIFIER . INCREMENT
    (26) statement -> IDENTIFIER . DECREMENT

    ASSIGN          shift and go to state 39
    SEMICOLON       reduce using rule 14 (statement -> IDENTIFIER .)
    PLUS            reduce using rule 14 (statement -> IDENTIFIER .)
    MINUS           reduce using rule 14 (statement -> IDENTIFIER .)
    TIMES           reduce using rule 14 (statement -> IDENTIFIER .)
    DIVIDE          reduce using rule 14 (statement -> IDENTIFIER .)
    INCREMENT       shift and go to state 40
    DECREMENT       shift and go to state 41


state 17

    (12) write -> WRITE . L_PAREN statement R_PAREN

    L_PAREN         shift and go to state 42


state 18

    (23) statement -> L_PAREN . statement R_PAREN
    (24) statement -> L_PAREN . conditional R_PAREN
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . INT
    (20) statement -> . FLOAT
    (21) statement -> . BOOL
    (22) statement -> . STRING
    (23) statement -> . L_PAREN statement R_PAREN
    (24) statement -> . L_PAREN conditional R_PAREN
    (25) statement -> . IDENTIFIER INCREMENT
    (26) statement -> . IDENTIFIER DECREMENT
    (27) conditional -> . conditional EQUAL conditional
    (28) conditional -> . conditional NOT_EQUAL conditional
    (29) conditional -> . conditional GREATER conditional
    (30) conditional -> . conditional LESS conditional
    (31) conditional -> . conditional GREATER_EQUAL conditional
    (32) conditional -> . conditional LESS_EQUAL conditional
    (33) conditional -> . conditional AND conditional
    (34) conditional -> . conditional OR conditional
    (35) conditional -> . TRUE
    (36) conditional -> . FALSE
    (37) conditional -> . statement

    IDENTIFIER      shift and go to state 45
    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    BOOL            shift and go to state 48
    STRING          shift and go to state 49
    L_PAREN         shift and go to state 18
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    statement                      shift and go to state 43
    conditional                    shift and go to state 44

state 19

    (13) writeln -> WRITELN . L_PAREN statement R_PAREN

    L_PAREN         shift and go to state 52


state 20

    (19) statement -> INT .
    (43) data_type -> INT .

    SEMICOLON       reduce using rule 19 (statement -> INT .)
    PLUS            reduce using rule 19 (statement -> INT .)
    MINUS           reduce using rule 19 (statement -> INT .)
    TIMES           reduce using rule 19 (statement -> INT .)
    DIVIDE          reduce using rule 19 (statement -> INT .)
    IDENTIFIER      reduce using rule 43 (data_type -> INT .)


state 21

    (20) statement -> FLOAT .
    (44) data_type -> FLOAT .

    SEMICOLON       reduce using rule 20 (statement -> FLOAT .)
    PLUS            reduce using rule 20 (statement -> FLOAT .)
    MINUS           reduce using rule 20 (statement -> FLOAT .)
    TIMES           reduce using rule 20 (statement -> FLOAT .)
    DIVIDE          reduce using rule 20 (statement -> FLOAT .)
    IDENTIFIER      reduce using rule 44 (data_type -> FLOAT .)


state 22

    (21) statement -> BOOL .
    (45) data_type -> BOOL .

    SEMICOLON       reduce using rule 21 (statement -> BOOL .)
    PLUS            reduce using rule 21 (statement -> BOOL .)
    MINUS           reduce using rule 21 (statement -> BOOL .)
    TIMES           reduce using rule 21 (statement -> BOOL .)
    DIVIDE          reduce using rule 21 (statement -> BOOL .)
    IDENTIFIER      reduce using rule 45 (data_type -> BOOL .)


state 23

    (22) statement -> STRING .
    (46) data_type -> STRING .

    SEMICOLON       reduce using rule 22 (statement -> STRING .)
    PLUS            reduce using rule 22 (statement -> STRING .)
    MINUS           reduce using rule 22 (statement -> STRING .)
    TIMES           reduce using rule 22 (statement -> STRING .)
    DIVIDE          reduce using rule 22 (statement -> STRING .)
    IDENTIFIER      reduce using rule 46 (data_type -> STRING .)


state 24

    (40) if_else_statement -> IF . L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE
    (41) if_else_statement -> IF . L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE

    L_PAREN         shift and go to state 53


state 25

    (38) for_loop -> FOR . L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE

    L_PAREN         shift and go to state 54


state 26

    (39) while_loop -> WHILE . L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE

    L_PAREN         shift and go to state 55


state 27

    (1) program -> PROGRAM MAIN L_BRACE expressions R_BRACE .

    $end            reduce using rule 1 (program -> PROGRAM MAIN L_BRACE expressions R_BRACE .)


state 28

    (2) expressions -> expressions expression .

    R_BRACE         reduce using rule 2 (expressions -> expressions expression .)
    IDENTIFIER      reduce using rule 2 (expressions -> expressions expression .)
    WRITE           reduce using rule 2 (expressions -> expressions expression .)
    WRITELN         reduce using rule 2 (expressions -> expressions expression .)
    INT             reduce using rule 2 (expressions -> expressions expression .)
    FLOAT           reduce using rule 2 (expressions -> expressions expression .)
    BOOL            reduce using rule 2 (expressions -> expressions expression .)
    STRING          reduce using rule 2 (expressions -> expressions expression .)
    L_PAREN         reduce using rule 2 (expressions -> expressions expression .)
    IF              reduce using rule 2 (expressions -> expressions expression .)
    FOR             reduce using rule 2 (expressions -> expressions expression .)
    WHILE           reduce using rule 2 (expressions -> expressions expression .)


state 29

    (4) expression -> var_declaration SEMICOLON .

    R_BRACE         reduce using rule 4 (expression -> var_declaration SEMICOLON .)
    IDENTIFIER      reduce using rule 4 (expression -> var_declaration SEMICOLON .)
    WRITE           reduce using rule 4 (expression -> var_declaration SEMICOLON .)
    WRITELN         reduce using rule 4 (expression -> var_declaration SEMICOLON .)
    INT             reduce using rule 4 (expression -> var_declaration SEMICOLON .)
    FLOAT           reduce using rule 4 (expression -> var_declaration SEMICOLON .)
    BOOL            reduce using rule 4 (expression -> var_declaration SEMICOLON .)
    STRING          reduce using rule 4 (expression -> var_declaration SEMICOLON .)
    L_PAREN         reduce using rule 4 (expression -> var_declaration SEMICOLON .)
    IF              reduce using rule 4 (expression -> var_declaration SEMICOLON .)
    FOR             reduce using rule 4 (expression -> var_declaration SEMICOLON .)
    WHILE           reduce using rule 4 (expression -> var_declaration SEMICOLON .)


state 30

    (5) expression -> write SEMICOLON .

    R_BRACE         reduce using rule 5 (expression -> write SEMICOLON .)
    IDENTIFIER      reduce using rule 5 (expression -> write SEMICOLON .)
    WRITE           reduce using rule 5 (expression -> write SEMICOLON .)
    WRITELN         reduce using rule 5 (expression -> write SEMICOLON .)
    INT             reduce using rule 5 (expression -> write SEMICOLON .)
    FLOAT           reduce using rule 5 (expression -> write SEMICOLON .)
    BOOL            reduce using rule 5 (expression -> write SEMICOLON .)
    STRING          reduce using rule 5 (expression -> write SEMICOLON .)
    L_PAREN         reduce using rule 5 (expression -> write SEMICOLON .)
    IF              reduce using rule 5 (expression -> write SEMICOLON .)
    FOR             reduce using rule 5 (expression -> write SEMICOLON .)
    WHILE           reduce using rule 5 (expression -> write SEMICOLON .)


state 31

    (6) expression -> writeln SEMICOLON .

    R_BRACE         reduce using rule 6 (expression -> writeln SEMICOLON .)
    IDENTIFIER      reduce using rule 6 (expression -> writeln SEMICOLON .)
    WRITE           reduce using rule 6 (expression -> writeln SEMICOLON .)
    WRITELN         reduce using rule 6 (expression -> writeln SEMICOLON .)
    INT             reduce using rule 6 (expression -> writeln SEMICOLON .)
    FLOAT           reduce using rule 6 (expression -> writeln SEMICOLON .)
    BOOL            reduce using rule 6 (expression -> writeln SEMICOLON .)
    STRING          reduce using rule 6 (expression -> writeln SEMICOLON .)
    L_PAREN         reduce using rule 6 (expression -> writeln SEMICOLON .)
    IF              reduce using rule 6 (expression -> writeln SEMICOLON .)
    FOR             reduce using rule 6 (expression -> writeln SEMICOLON .)
    WHILE           reduce using rule 6 (expression -> writeln SEMICOLON .)


state 32

    (7) expression -> statement SEMICOLON .

    R_BRACE         reduce using rule 7 (expression -> statement SEMICOLON .)
    IDENTIFIER      reduce using rule 7 (expression -> statement SEMICOLON .)
    WRITE           reduce using rule 7 (expression -> statement SEMICOLON .)
    WRITELN         reduce using rule 7 (expression -> statement SEMICOLON .)
    INT             reduce using rule 7 (expression -> statement SEMICOLON .)
    FLOAT           reduce using rule 7 (expression -> statement SEMICOLON .)
    BOOL            reduce using rule 7 (expression -> statement SEMICOLON .)
    STRING          reduce using rule 7 (expression -> statement SEMICOLON .)
    L_PAREN         reduce using rule 7 (expression -> statement SEMICOLON .)
    IF              reduce using rule 7 (expression -> statement SEMICOLON .)
    FOR             reduce using rule 7 (expression -> statement SEMICOLON .)
    WHILE           reduce using rule 7 (expression -> statement SEMICOLON .)


state 33

    (15) statement -> statement PLUS . statement
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . INT
    (20) statement -> . FLOAT
    (21) statement -> . BOOL
    (22) statement -> . STRING
    (23) statement -> . L_PAREN statement R_PAREN
    (24) statement -> . L_PAREN conditional R_PAREN
    (25) statement -> . IDENTIFIER INCREMENT
    (26) statement -> . IDENTIFIER DECREMENT

    IDENTIFIER      shift and go to state 45
    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    BOOL            shift and go to state 48
    STRING          shift and go to state 49
    L_PAREN         shift and go to state 18

    statement                      shift and go to state 56

state 34

    (16) statement -> statement MINUS . statement
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . INT
    (20) statement -> . FLOAT
    (21) statement -> . BOOL
    (22) statement -> . STRING
    (23) statement -> . L_PAREN statement R_PAREN
    (24) statement -> . L_PAREN conditional R_PAREN
    (25) statement -> . IDENTIFIER INCREMENT
    (26) statement -> . IDENTIFIER DECREMENT

    IDENTIFIER      shift and go to state 45
    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    BOOL            shift and go to state 48
    STRING          shift and go to state 49
    L_PAREN         shift and go to state 18

    statement                      shift and go to state 57

state 35

    (17) statement -> statement TIMES . statement
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . INT
    (20) statement -> . FLOAT
    (21) statement -> . BOOL
    (22) statement -> . STRING
    (23) statement -> . L_PAREN statement R_PAREN
    (24) statement -> . L_PAREN conditional R_PAREN
    (25) statement -> . IDENTIFIER INCREMENT
    (26) statement -> . IDENTIFIER DECREMENT

    IDENTIFIER      shift and go to state 45
    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    BOOL            shift and go to state 48
    STRING          shift and go to state 49
    L_PAREN         shift and go to state 18

    statement                      shift and go to state 58

state 36

    (18) statement -> statement DIVIDE . statement
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . INT
    (20) statement -> . FLOAT
    (21) statement -> . BOOL
    (22) statement -> . STRING
    (23) statement -> . L_PAREN statement R_PAREN
    (24) statement -> . L_PAREN conditional R_PAREN
    (25) statement -> . IDENTIFIER INCREMENT
    (26) statement -> . IDENTIFIER DECREMENT

    IDENTIFIER      shift and go to state 45
    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    BOOL            shift and go to state 48
    STRING          shift and go to state 49
    L_PAREN         shift and go to state 18

    statement                      shift and go to state 59

state 37

    (42) var_declaration -> data_type declarations .

    SEMICOLON       reduce using rule 42 (var_declaration -> data_type declarations .)


state 38

    (47) declarations -> IDENTIFIER . COMMA declarations
    (48) declarations -> IDENTIFIER .

    COMMA           shift and go to state 60
    SEMICOLON       reduce using rule 48 (declarations -> IDENTIFIER .)


state 39

    (49) var_declaration -> IDENTIFIER ASSIGN . statement
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . INT
    (20) statement -> . FLOAT
    (21) statement -> . BOOL
    (22) statement -> . STRING
    (23) statement -> . L_PAREN statement R_PAREN
    (24) statement -> . L_PAREN conditional R_PAREN
    (25) statement -> . IDENTIFIER INCREMENT
    (26) statement -> . IDENTIFIER DECREMENT

    IDENTIFIER      shift and go to state 45
    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    BOOL            shift and go to state 48
    STRING          shift and go to state 49
    L_PAREN         shift and go to state 18

    statement                      shift and go to state 61

state 40

    (25) statement -> IDENTIFIER INCREMENT .

    SEMICOLON       reduce using rule 25 (statement -> IDENTIFIER INCREMENT .)
    PLUS            reduce using rule 25 (statement -> IDENTIFIER INCREMENT .)
    MINUS           reduce using rule 25 (statement -> IDENTIFIER INCREMENT .)
    TIMES           reduce using rule 25 (statement -> IDENTIFIER INCREMENT .)
    DIVIDE          reduce using rule 25 (statement -> IDENTIFIER INCREMENT .)
    R_PAREN         reduce using rule 25 (statement -> IDENTIFIER INCREMENT .)
    EQUAL           reduce using rule 25 (statement -> IDENTIFIER INCREMENT .)
    NOT_EQUAL       reduce using rule 25 (statement -> IDENTIFIER INCREMENT .)
    GREATER         reduce using rule 25 (statement -> IDENTIFIER INCREMENT .)
    LESS            reduce using rule 25 (statement -> IDENTIFIER INCREMENT .)
    GREATER_EQUAL   reduce using rule 25 (statement -> IDENTIFIER INCREMENT .)
    LESS_EQUAL      reduce using rule 25 (statement -> IDENTIFIER INCREMENT .)
    AND             reduce using rule 25 (statement -> IDENTIFIER INCREMENT .)
    OR              reduce using rule 25 (statement -> IDENTIFIER INCREMENT .)


state 41

    (26) statement -> IDENTIFIER DECREMENT .

    SEMICOLON       reduce using rule 26 (statement -> IDENTIFIER DECREMENT .)
    PLUS            reduce using rule 26 (statement -> IDENTIFIER DECREMENT .)
    MINUS           reduce using rule 26 (statement -> IDENTIFIER DECREMENT .)
    TIMES           reduce using rule 26 (statement -> IDENTIFIER DECREMENT .)
    DIVIDE          reduce using rule 26 (statement -> IDENTIFIER DECREMENT .)
    R_PAREN         reduce using rule 26 (statement -> IDENTIFIER DECREMENT .)
    EQUAL           reduce using rule 26 (statement -> IDENTIFIER DECREMENT .)
    NOT_EQUAL       reduce using rule 26 (statement -> IDENTIFIER DECREMENT .)
    GREATER         reduce using rule 26 (statement -> IDENTIFIER DECREMENT .)
    LESS            reduce using rule 26 (statement -> IDENTIFIER DECREMENT .)
    GREATER_EQUAL   reduce using rule 26 (statement -> IDENTIFIER DECREMENT .)
    LESS_EQUAL      reduce using rule 26 (statement -> IDENTIFIER DECREMENT .)
    AND             reduce using rule 26 (statement -> IDENTIFIER DECREMENT .)
    OR              reduce using rule 26 (statement -> IDENTIFIER DECREMENT .)


state 42

    (12) write -> WRITE L_PAREN . statement R_PAREN
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . INT
    (20) statement -> . FLOAT
    (21) statement -> . BOOL
    (22) statement -> . STRING
    (23) statement -> . L_PAREN statement R_PAREN
    (24) statement -> . L_PAREN conditional R_PAREN
    (25) statement -> . IDENTIFIER INCREMENT
    (26) statement -> . IDENTIFIER DECREMENT

    IDENTIFIER      shift and go to state 45
    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    BOOL            shift and go to state 48
    STRING          shift and go to state 49
    L_PAREN         shift and go to state 18

    statement                      shift and go to state 62

state 43

    (23) statement -> L_PAREN statement . R_PAREN
    (15) statement -> statement . PLUS statement
    (16) statement -> statement . MINUS statement
    (17) statement -> statement . TIMES statement
    (18) statement -> statement . DIVIDE statement
    (37) conditional -> statement .

  ! shift/reduce conflict for R_PAREN resolved as shift
    R_PAREN         shift and go to state 63
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    EQUAL           reduce using rule 37 (conditional -> statement .)
    NOT_EQUAL       reduce using rule 37 (conditional -> statement .)
    GREATER         reduce using rule 37 (conditional -> statement .)
    LESS            reduce using rule 37 (conditional -> statement .)
    GREATER_EQUAL   reduce using rule 37 (conditional -> statement .)
    LESS_EQUAL      reduce using rule 37 (conditional -> statement .)
    AND             reduce using rule 37 (conditional -> statement .)
    OR              reduce using rule 37 (conditional -> statement .)

  ! R_PAREN         [ reduce using rule 37 (conditional -> statement .) ]


state 44

    (24) statement -> L_PAREN conditional . R_PAREN
    (27) conditional -> conditional . EQUAL conditional
    (28) conditional -> conditional . NOT_EQUAL conditional
    (29) conditional -> conditional . GREATER conditional
    (30) conditional -> conditional . LESS conditional
    (31) conditional -> conditional . GREATER_EQUAL conditional
    (32) conditional -> conditional . LESS_EQUAL conditional
    (33) conditional -> conditional . AND conditional
    (34) conditional -> conditional . OR conditional

    R_PAREN         shift and go to state 64
    EQUAL           shift and go to state 65
    NOT_EQUAL       shift and go to state 66
    GREATER         shift and go to state 67
    LESS            shift and go to state 68
    GREATER_EQUAL   shift and go to state 69
    LESS_EQUAL      shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72


state 45

    (14) statement -> IDENTIFIER .
    (25) statement -> IDENTIFIER . INCREMENT
    (26) statement -> IDENTIFIER . DECREMENT

    R_PAREN         reduce using rule 14 (statement -> IDENTIFIER .)
    PLUS            reduce using rule 14 (statement -> IDENTIFIER .)
    MINUS           reduce using rule 14 (statement -> IDENTIFIER .)
    TIMES           reduce using rule 14 (statement -> IDENTIFIER .)
    DIVIDE          reduce using rule 14 (statement -> IDENTIFIER .)
    EQUAL           reduce using rule 14 (statement -> IDENTIFIER .)
    NOT_EQUAL       reduce using rule 14 (statement -> IDENTIFIER .)
    GREATER         reduce using rule 14 (statement -> IDENTIFIER .)
    LESS            reduce using rule 14 (statement -> IDENTIFIER .)
    GREATER_EQUAL   reduce using rule 14 (statement -> IDENTIFIER .)
    LESS_EQUAL      reduce using rule 14 (statement -> IDENTIFIER .)
    AND             reduce using rule 14 (statement -> IDENTIFIER .)
    OR              reduce using rule 14 (statement -> IDENTIFIER .)
    SEMICOLON       reduce using rule 14 (statement -> IDENTIFIER .)
    INCREMENT       shift and go to state 40
    DECREMENT       shift and go to state 41


state 46

    (19) statement -> INT .

    R_PAREN         reduce using rule 19 (statement -> INT .)
    PLUS            reduce using rule 19 (statement -> INT .)
    MINUS           reduce using rule 19 (statement -> INT .)
    TIMES           reduce using rule 19 (statement -> INT .)
    DIVIDE          reduce using rule 19 (statement -> INT .)
    EQUAL           reduce using rule 19 (statement -> INT .)
    NOT_EQUAL       reduce using rule 19 (statement -> INT .)
    GREATER         reduce using rule 19 (statement -> INT .)
    LESS            reduce using rule 19 (statement -> INT .)
    GREATER_EQUAL   reduce using rule 19 (statement -> INT .)
    LESS_EQUAL      reduce using rule 19 (statement -> INT .)
    AND             reduce using rule 19 (statement -> INT .)
    OR              reduce using rule 19 (statement -> INT .)
    SEMICOLON       reduce using rule 19 (statement -> INT .)


state 47

    (20) statement -> FLOAT .

    R_PAREN         reduce using rule 20 (statement -> FLOAT .)
    PLUS            reduce using rule 20 (statement -> FLOAT .)
    MINUS           reduce using rule 20 (statement -> FLOAT .)
    TIMES           reduce using rule 20 (statement -> FLOAT .)
    DIVIDE          reduce using rule 20 (statement -> FLOAT .)
    EQUAL           reduce using rule 20 (statement -> FLOAT .)
    NOT_EQUAL       reduce using rule 20 (statement -> FLOAT .)
    GREATER         reduce using rule 20 (statement -> FLOAT .)
    LESS            reduce using rule 20 (statement -> FLOAT .)
    GREATER_EQUAL   reduce using rule 20 (statement -> FLOAT .)
    LESS_EQUAL      reduce using rule 20 (statement -> FLOAT .)
    AND             reduce using rule 20 (statement -> FLOAT .)
    OR              reduce using rule 20 (statement -> FLOAT .)
    SEMICOLON       reduce using rule 20 (statement -> FLOAT .)


state 48

    (21) statement -> BOOL .

    R_PAREN         reduce using rule 21 (statement -> BOOL .)
    PLUS            reduce using rule 21 (statement -> BOOL .)
    MINUS           reduce using rule 21 (statement -> BOOL .)
    TIMES           reduce using rule 21 (statement -> BOOL .)
    DIVIDE          reduce using rule 21 (statement -> BOOL .)
    EQUAL           reduce using rule 21 (statement -> BOOL .)
    NOT_EQUAL       reduce using rule 21 (statement -> BOOL .)
    GREATER         reduce using rule 21 (statement -> BOOL .)
    LESS            reduce using rule 21 (statement -> BOOL .)
    GREATER_EQUAL   reduce using rule 21 (statement -> BOOL .)
    LESS_EQUAL      reduce using rule 21 (statement -> BOOL .)
    AND             reduce using rule 21 (statement -> BOOL .)
    OR              reduce using rule 21 (statement -> BOOL .)
    SEMICOLON       reduce using rule 21 (statement -> BOOL .)


state 49

    (22) statement -> STRING .

    R_PAREN         reduce using rule 22 (statement -> STRING .)
    PLUS            reduce using rule 22 (statement -> STRING .)
    MINUS           reduce using rule 22 (statement -> STRING .)
    TIMES           reduce using rule 22 (statement -> STRING .)
    DIVIDE          reduce using rule 22 (statement -> STRING .)
    EQUAL           reduce using rule 22 (statement -> STRING .)
    NOT_EQUAL       reduce using rule 22 (statement -> STRING .)
    GREATER         reduce using rule 22 (statement -> STRING .)
    LESS            reduce using rule 22 (statement -> STRING .)
    GREATER_EQUAL   reduce using rule 22 (statement -> STRING .)
    LESS_EQUAL      reduce using rule 22 (statement -> STRING .)
    AND             reduce using rule 22 (statement -> STRING .)
    OR              reduce using rule 22 (statement -> STRING .)
    SEMICOLON       reduce using rule 22 (statement -> STRING .)


state 50

    (35) conditional -> TRUE .

    R_PAREN         reduce using rule 35 (conditional -> TRUE .)
    EQUAL           reduce using rule 35 (conditional -> TRUE .)
    NOT_EQUAL       reduce using rule 35 (conditional -> TRUE .)
    GREATER         reduce using rule 35 (conditional -> TRUE .)
    LESS            reduce using rule 35 (conditional -> TRUE .)
    GREATER_EQUAL   reduce using rule 35 (conditional -> TRUE .)
    LESS_EQUAL      reduce using rule 35 (conditional -> TRUE .)
    AND             reduce using rule 35 (conditional -> TRUE .)
    OR              reduce using rule 35 (conditional -> TRUE .)
    SEMICOLON       reduce using rule 35 (conditional -> TRUE .)


state 51

    (36) conditional -> FALSE .

    R_PAREN         reduce using rule 36 (conditional -> FALSE .)
    EQUAL           reduce using rule 36 (conditional -> FALSE .)
    NOT_EQUAL       reduce using rule 36 (conditional -> FALSE .)
    GREATER         reduce using rule 36 (conditional -> FALSE .)
    LESS            reduce using rule 36 (conditional -> FALSE .)
    GREATER_EQUAL   reduce using rule 36 (conditional -> FALSE .)
    LESS_EQUAL      reduce using rule 36 (conditional -> FALSE .)
    AND             reduce using rule 36 (conditional -> FALSE .)
    OR              reduce using rule 36 (conditional -> FALSE .)
    SEMICOLON       reduce using rule 36 (conditional -> FALSE .)


state 52

    (13) writeln -> WRITELN L_PAREN . statement R_PAREN
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . INT
    (20) statement -> . FLOAT
    (21) statement -> . BOOL
    (22) statement -> . STRING
    (23) statement -> . L_PAREN statement R_PAREN
    (24) statement -> . L_PAREN conditional R_PAREN
    (25) statement -> . IDENTIFIER INCREMENT
    (26) statement -> . IDENTIFIER DECREMENT

    IDENTIFIER      shift and go to state 45
    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    BOOL            shift and go to state 48
    STRING          shift and go to state 49
    L_PAREN         shift and go to state 18

    statement                      shift and go to state 73

state 53

    (40) if_else_statement -> IF L_PAREN . conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE
    (41) if_else_statement -> IF L_PAREN . conditional R_PAREN L_BRACE expressions R_BRACE
    (27) conditional -> . conditional EQUAL conditional
    (28) conditional -> . conditional NOT_EQUAL conditional
    (29) conditional -> . conditional GREATER conditional
    (30) conditional -> . conditional LESS conditional
    (31) conditional -> . conditional GREATER_EQUAL conditional
    (32) conditional -> . conditional LESS_EQUAL conditional
    (33) conditional -> . conditional AND conditional
    (34) conditional -> . conditional OR conditional
    (35) conditional -> . TRUE
    (36) conditional -> . FALSE
    (37) conditional -> . statement
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . INT
    (20) statement -> . FLOAT
    (21) statement -> . BOOL
    (22) statement -> . STRING
    (23) statement -> . L_PAREN statement R_PAREN
    (24) statement -> . L_PAREN conditional R_PAREN
    (25) statement -> . IDENTIFIER INCREMENT
    (26) statement -> . IDENTIFIER DECREMENT

    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    IDENTIFIER      shift and go to state 45
    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    BOOL            shift and go to state 48
    STRING          shift and go to state 49
    L_PAREN         shift and go to state 18

    conditional                    shift and go to state 74
    statement                      shift and go to state 75

state 54

    (38) for_loop -> FOR L_PAREN . var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE
    (42) var_declaration -> . data_type declarations
    (49) var_declaration -> . IDENTIFIER ASSIGN statement
    (43) data_type -> . INT
    (44) data_type -> . FLOAT
    (45) data_type -> . BOOL
    (46) data_type -> . STRING

    IDENTIFIER      shift and go to state 77
    INT             shift and go to state 78
    FLOAT           shift and go to state 79
    BOOL            shift and go to state 80
    STRING          shift and go to state 81

    var_declaration                shift and go to state 76
    data_type                      shift and go to state 15

state 55

    (39) while_loop -> WHILE L_PAREN . conditional R_PAREN L_BRACE expressions R_BRACE
    (27) conditional -> . conditional EQUAL conditional
    (28) conditional -> . conditional NOT_EQUAL conditional
    (29) conditional -> . conditional GREATER conditional
    (30) conditional -> . conditional LESS conditional
    (31) conditional -> . conditional GREATER_EQUAL conditional
    (32) conditional -> . conditional LESS_EQUAL conditional
    (33) conditional -> . conditional AND conditional
    (34) conditional -> . conditional OR conditional
    (35) conditional -> . TRUE
    (36) conditional -> . FALSE
    (37) conditional -> . statement
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . INT
    (20) statement -> . FLOAT
    (21) statement -> . BOOL
    (22) statement -> . STRING
    (23) statement -> . L_PAREN statement R_PAREN
    (24) statement -> . L_PAREN conditional R_PAREN
    (25) statement -> . IDENTIFIER INCREMENT
    (26) statement -> . IDENTIFIER DECREMENT

    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    IDENTIFIER      shift and go to state 45
    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    BOOL            shift and go to state 48
    STRING          shift and go to state 49
    L_PAREN         shift and go to state 18

    conditional                    shift and go to state 82
    statement                      shift and go to state 75

state 56

    (15) statement -> statement PLUS statement .
    (15) statement -> statement . PLUS statement
    (16) statement -> statement . MINUS statement
    (17) statement -> statement . TIMES statement
    (18) statement -> statement . DIVIDE statement

    SEMICOLON       reduce using rule 15 (statement -> statement PLUS statement .)
    PLUS            reduce using rule 15 (statement -> statement PLUS statement .)
    MINUS           reduce using rule 15 (statement -> statement PLUS statement .)
    R_PAREN         reduce using rule 15 (statement -> statement PLUS statement .)
    EQUAL           reduce using rule 15 (statement -> statement PLUS statement .)
    NOT_EQUAL       reduce using rule 15 (statement -> statement PLUS statement .)
    GREATER         reduce using rule 15 (statement -> statement PLUS statement .)
    LESS            reduce using rule 15 (statement -> statement PLUS statement .)
    GREATER_EQUAL   reduce using rule 15 (statement -> statement PLUS statement .)
    LESS_EQUAL      reduce using rule 15 (statement -> statement PLUS statement .)
    AND             reduce using rule 15 (statement -> statement PLUS statement .)
    OR              reduce using rule 15 (statement -> statement PLUS statement .)
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36

  ! TIMES           [ reduce using rule 15 (statement -> statement PLUS statement .) ]
  ! DIVIDE          [ reduce using rule 15 (statement -> statement PLUS statement .) ]
  ! PLUS            [ shift and go to state 33 ]
  ! MINUS           [ shift and go to state 34 ]


state 57

    (16) statement -> statement MINUS statement .
    (15) statement -> statement . PLUS statement
    (16) statement -> statement . MINUS statement
    (17) statement -> statement . TIMES statement
    (18) statement -> statement . DIVIDE statement

    SEMICOLON       reduce using rule 16 (statement -> statement MINUS statement .)
    PLUS            reduce using rule 16 (statement -> statement MINUS statement .)
    MINUS           reduce using rule 16 (statement -> statement MINUS statement .)
    R_PAREN         reduce using rule 16 (statement -> statement MINUS statement .)
    EQUAL           reduce using rule 16 (statement -> statement MINUS statement .)
    NOT_EQUAL       reduce using rule 16 (statement -> statement MINUS statement .)
    GREATER         reduce using rule 16 (statement -> statement MINUS statement .)
    LESS            reduce using rule 16 (statement -> statement MINUS statement .)
    GREATER_EQUAL   reduce using rule 16 (statement -> statement MINUS statement .)
    LESS_EQUAL      reduce using rule 16 (statement -> statement MINUS statement .)
    AND             reduce using rule 16 (statement -> statement MINUS statement .)
    OR              reduce using rule 16 (statement -> statement MINUS statement .)
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36

  ! TIMES           [ reduce using rule 16 (statement -> statement MINUS statement .) ]
  ! DIVIDE          [ reduce using rule 16 (statement -> statement MINUS statement .) ]
  ! PLUS            [ shift and go to state 33 ]
  ! MINUS           [ shift and go to state 34 ]


state 58

    (17) statement -> statement TIMES statement .
    (15) statement -> statement . PLUS statement
    (16) statement -> statement . MINUS statement
    (17) statement -> statement . TIMES statement
    (18) statement -> statement . DIVIDE statement

    SEMICOLON       reduce using rule 17 (statement -> statement TIMES statement .)
    PLUS            reduce using rule 17 (statement -> statement TIMES statement .)
    MINUS           reduce using rule 17 (statement -> statement TIMES statement .)
    TIMES           reduce using rule 17 (statement -> statement TIMES statement .)
    DIVIDE          reduce using rule 17 (statement -> statement TIMES statement .)
    R_PAREN         reduce using rule 17 (statement -> statement TIMES statement .)
    EQUAL           reduce using rule 17 (statement -> statement TIMES statement .)
    NOT_EQUAL       reduce using rule 17 (statement -> statement TIMES statement .)
    GREATER         reduce using rule 17 (statement -> statement TIMES statement .)
    LESS            reduce using rule 17 (statement -> statement TIMES statement .)
    GREATER_EQUAL   reduce using rule 17 (statement -> statement TIMES statement .)
    LESS_EQUAL      reduce using rule 17 (statement -> statement TIMES statement .)
    AND             reduce using rule 17 (statement -> statement TIMES statement .)
    OR              reduce using rule 17 (statement -> statement TIMES statement .)

  ! PLUS            [ shift and go to state 33 ]
  ! MINUS           [ shift and go to state 34 ]
  ! TIMES           [ shift and go to state 35 ]
  ! DIVIDE          [ shift and go to state 36 ]


state 59

    (18) statement -> statement DIVIDE statement .
    (15) statement -> statement . PLUS statement
    (16) statement -> statement . MINUS statement
    (17) statement -> statement . TIMES statement
    (18) statement -> statement . DIVIDE statement

    SEMICOLON       reduce using rule 18 (statement -> statement DIVIDE statement .)
    PLUS            reduce using rule 18 (statement -> statement DIVIDE statement .)
    MINUS           reduce using rule 18 (statement -> statement DIVIDE statement .)
    TIMES           reduce using rule 18 (statement -> statement DIVIDE statement .)
    DIVIDE          reduce using rule 18 (statement -> statement DIVIDE statement .)
    R_PAREN         reduce using rule 18 (statement -> statement DIVIDE statement .)
    EQUAL           reduce using rule 18 (statement -> statement DIVIDE statement .)
    NOT_EQUAL       reduce using rule 18 (statement -> statement DIVIDE statement .)
    GREATER         reduce using rule 18 (statement -> statement DIVIDE statement .)
    LESS            reduce using rule 18 (statement -> statement DIVIDE statement .)
    GREATER_EQUAL   reduce using rule 18 (statement -> statement DIVIDE statement .)
    LESS_EQUAL      reduce using rule 18 (statement -> statement DIVIDE statement .)
    AND             reduce using rule 18 (statement -> statement DIVIDE statement .)
    OR              reduce using rule 18 (statement -> statement DIVIDE statement .)

  ! PLUS            [ shift and go to state 33 ]
  ! MINUS           [ shift and go to state 34 ]
  ! TIMES           [ shift and go to state 35 ]
  ! DIVIDE          [ shift and go to state 36 ]


state 60

    (47) declarations -> IDENTIFIER COMMA . declarations
    (47) declarations -> . IDENTIFIER COMMA declarations
    (48) declarations -> . IDENTIFIER

    IDENTIFIER      shift and go to state 38

    declarations                   shift and go to state 83

state 61

    (49) var_declaration -> IDENTIFIER ASSIGN statement .
    (15) statement -> statement . PLUS statement
    (16) statement -> statement . MINUS statement
    (17) statement -> statement . TIMES statement
    (18) statement -> statement . DIVIDE statement

    SEMICOLON       reduce using rule 49 (var_declaration -> IDENTIFIER ASSIGN statement .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36


state 62

    (12) write -> WRITE L_PAREN statement . R_PAREN
    (15) statement -> statement . PLUS statement
    (16) statement -> statement . MINUS statement
    (17) statement -> statement . TIMES statement
    (18) statement -> statement . DIVIDE statement

    R_PAREN         shift and go to state 84
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36


state 63

    (23) statement -> L_PAREN statement R_PAREN .

    SEMICOLON       reduce using rule 23 (statement -> L_PAREN statement R_PAREN .)
    PLUS            reduce using rule 23 (statement -> L_PAREN statement R_PAREN .)
    MINUS           reduce using rule 23 (statement -> L_PAREN statement R_PAREN .)
    TIMES           reduce using rule 23 (statement -> L_PAREN statement R_PAREN .)
    DIVIDE          reduce using rule 23 (statement -> L_PAREN statement R_PAREN .)
    R_PAREN         reduce using rule 23 (statement -> L_PAREN statement R_PAREN .)
    EQUAL           reduce using rule 23 (statement -> L_PAREN statement R_PAREN .)
    NOT_EQUAL       reduce using rule 23 (statement -> L_PAREN statement R_PAREN .)
    GREATER         reduce using rule 23 (statement -> L_PAREN statement R_PAREN .)
    LESS            reduce using rule 23 (statement -> L_PAREN statement R_PAREN .)
    GREATER_EQUAL   reduce using rule 23 (statement -> L_PAREN statement R_PAREN .)
    LESS_EQUAL      reduce using rule 23 (statement -> L_PAREN statement R_PAREN .)
    AND             reduce using rule 23 (statement -> L_PAREN statement R_PAREN .)
    OR              reduce using rule 23 (statement -> L_PAREN statement R_PAREN .)


state 64

    (24) statement -> L_PAREN conditional R_PAREN .

    SEMICOLON       reduce using rule 24 (statement -> L_PAREN conditional R_PAREN .)
    PLUS            reduce using rule 24 (statement -> L_PAREN conditional R_PAREN .)
    MINUS           reduce using rule 24 (statement -> L_PAREN conditional R_PAREN .)
    TIMES           reduce using rule 24 (statement -> L_PAREN conditional R_PAREN .)
    DIVIDE          reduce using rule 24 (statement -> L_PAREN conditional R_PAREN .)
    R_PAREN         reduce using rule 24 (statement -> L_PAREN conditional R_PAREN .)
    EQUAL           reduce using rule 24 (statement -> L_PAREN conditional R_PAREN .)
    NOT_EQUAL       reduce using rule 24 (statement -> L_PAREN conditional R_PAREN .)
    GREATER         reduce using rule 24 (statement -> L_PAREN conditional R_PAREN .)
    LESS            reduce using rule 24 (statement -> L_PAREN conditional R_PAREN .)
    GREATER_EQUAL   reduce using rule 24 (statement -> L_PAREN conditional R_PAREN .)
    LESS_EQUAL      reduce using rule 24 (statement -> L_PAREN conditional R_PAREN .)
    AND             reduce using rule 24 (statement -> L_PAREN conditional R_PAREN .)
    OR              reduce using rule 24 (statement -> L_PAREN conditional R_PAREN .)


state 65

    (27) conditional -> conditional EQUAL . conditional
    (27) conditional -> . conditional EQUAL conditional
    (28) conditional -> . conditional NOT_EQUAL conditional
    (29) conditional -> . conditional GREATER conditional
    (30) conditional -> . conditional LESS conditional
    (31) conditional -> . conditional GREATER_EQUAL conditional
    (32) conditional -> . conditional LESS_EQUAL conditional
    (33) conditional -> . conditional AND conditional
    (34) conditional -> . conditional OR conditional
    (35) conditional -> . TRUE
    (36) conditional -> . FALSE
    (37) conditional -> . statement
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . INT
    (20) statement -> . FLOAT
    (21) statement -> . BOOL
    (22) statement -> . STRING
    (23) statement -> . L_PAREN statement R_PAREN
    (24) statement -> . L_PAREN conditional R_PAREN
    (25) statement -> . IDENTIFIER INCREMENT
    (26) statement -> . IDENTIFIER DECREMENT

    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    IDENTIFIER      shift and go to state 45
    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    BOOL            shift and go to state 48
    STRING          shift and go to state 49
    L_PAREN         shift and go to state 18

    conditional                    shift and go to state 85
    statement                      shift and go to state 75

state 66

    (28) conditional -> conditional NOT_EQUAL . conditional
    (27) conditional -> . conditional EQUAL conditional
    (28) conditional -> . conditional NOT_EQUAL conditional
    (29) conditional -> . conditional GREATER conditional
    (30) conditional -> . conditional LESS conditional
    (31) conditional -> . conditional GREATER_EQUAL conditional
    (32) conditional -> . conditional LESS_EQUAL conditional
    (33) conditional -> . conditional AND conditional
    (34) conditional -> . conditional OR conditional
    (35) conditional -> . TRUE
    (36) conditional -> . FALSE
    (37) conditional -> . statement
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . INT
    (20) statement -> . FLOAT
    (21) statement -> . BOOL
    (22) statement -> . STRING
    (23) statement -> . L_PAREN statement R_PAREN
    (24) statement -> . L_PAREN conditional R_PAREN
    (25) statement -> . IDENTIFIER INCREMENT
    (26) statement -> . IDENTIFIER DECREMENT

    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    IDENTIFIER      shift and go to state 45
    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    BOOL            shift and go to state 48
    STRING          shift and go to state 49
    L_PAREN         shift and go to state 18

    conditional                    shift and go to state 86
    statement                      shift and go to state 75

state 67

    (29) conditional -> conditional GREATER . conditional
    (27) conditional -> . conditional EQUAL conditional
    (28) conditional -> . conditional NOT_EQUAL conditional
    (29) conditional -> . conditional GREATER conditional
    (30) conditional -> . conditional LESS conditional
    (31) conditional -> . conditional GREATER_EQUAL conditional
    (32) conditional -> . conditional LESS_EQUAL conditional
    (33) conditional -> . conditional AND conditional
    (34) conditional -> . conditional OR conditional
    (35) conditional -> . TRUE
    (36) conditional -> . FALSE
    (37) conditional -> . statement
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . INT
    (20) statement -> . FLOAT
    (21) statement -> . BOOL
    (22) statement -> . STRING
    (23) statement -> . L_PAREN statement R_PAREN
    (24) statement -> . L_PAREN conditional R_PAREN
    (25) statement -> . IDENTIFIER INCREMENT
    (26) statement -> . IDENTIFIER DECREMENT

    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    IDENTIFIER      shift and go to state 45
    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    BOOL            shift and go to state 48
    STRING          shift and go to state 49
    L_PAREN         shift and go to state 18

    conditional                    shift and go to state 87
    statement                      shift and go to state 75

state 68

    (30) conditional -> conditional LESS . conditional
    (27) conditional -> . conditional EQUAL conditional
    (28) conditional -> . conditional NOT_EQUAL conditional
    (29) conditional -> . conditional GREATER conditional
    (30) conditional -> . conditional LESS conditional
    (31) conditional -> . conditional GREATER_EQUAL conditional
    (32) conditional -> . conditional LESS_EQUAL conditional
    (33) conditional -> . conditional AND conditional
    (34) conditional -> . conditional OR conditional
    (35) conditional -> . TRUE
    (36) conditional -> . FALSE
    (37) conditional -> . statement
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . INT
    (20) statement -> . FLOAT
    (21) statement -> . BOOL
    (22) statement -> . STRING
    (23) statement -> . L_PAREN statement R_PAREN
    (24) statement -> . L_PAREN conditional R_PAREN
    (25) statement -> . IDENTIFIER INCREMENT
    (26) statement -> . IDENTIFIER DECREMENT

    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    IDENTIFIER      shift and go to state 45
    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    BOOL            shift and go to state 48
    STRING          shift and go to state 49
    L_PAREN         shift and go to state 18

    conditional                    shift and go to state 88
    statement                      shift and go to state 75

state 69

    (31) conditional -> conditional GREATER_EQUAL . conditional
    (27) conditional -> . conditional EQUAL conditional
    (28) conditional -> . conditional NOT_EQUAL conditional
    (29) conditional -> . conditional GREATER conditional
    (30) conditional -> . conditional LESS conditional
    (31) conditional -> . conditional GREATER_EQUAL conditional
    (32) conditional -> . conditional LESS_EQUAL conditional
    (33) conditional -> . conditional AND conditional
    (34) conditional -> . conditional OR conditional
    (35) conditional -> . TRUE
    (36) conditional -> . FALSE
    (37) conditional -> . statement
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . INT
    (20) statement -> . FLOAT
    (21) statement -> . BOOL
    (22) statement -> . STRING
    (23) statement -> . L_PAREN statement R_PAREN
    (24) statement -> . L_PAREN conditional R_PAREN
    (25) statement -> . IDENTIFIER INCREMENT
    (26) statement -> . IDENTIFIER DECREMENT

    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    IDENTIFIER      shift and go to state 45
    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    BOOL            shift and go to state 48
    STRING          shift and go to state 49
    L_PAREN         shift and go to state 18

    conditional                    shift and go to state 89
    statement                      shift and go to state 75

state 70

    (32) conditional -> conditional LESS_EQUAL . conditional
    (27) conditional -> . conditional EQUAL conditional
    (28) conditional -> . conditional NOT_EQUAL conditional
    (29) conditional -> . conditional GREATER conditional
    (30) conditional -> . conditional LESS conditional
    (31) conditional -> . conditional GREATER_EQUAL conditional
    (32) conditional -> . conditional LESS_EQUAL conditional
    (33) conditional -> . conditional AND conditional
    (34) conditional -> . conditional OR conditional
    (35) conditional -> . TRUE
    (36) conditional -> . FALSE
    (37) conditional -> . statement
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . INT
    (20) statement -> . FLOAT
    (21) statement -> . BOOL
    (22) statement -> . STRING
    (23) statement -> . L_PAREN statement R_PAREN
    (24) statement -> . L_PAREN conditional R_PAREN
    (25) statement -> . IDENTIFIER INCREMENT
    (26) statement -> . IDENTIFIER DECREMENT

    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    IDENTIFIER      shift and go to state 45
    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    BOOL            shift and go to state 48
    STRING          shift and go to state 49
    L_PAREN         shift and go to state 18

    conditional                    shift and go to state 90
    statement                      shift and go to state 75

state 71

    (33) conditional -> conditional AND . conditional
    (27) conditional -> . conditional EQUAL conditional
    (28) conditional -> . conditional NOT_EQUAL conditional
    (29) conditional -> . conditional GREATER conditional
    (30) conditional -> . conditional LESS conditional
    (31) conditional -> . conditional GREATER_EQUAL conditional
    (32) conditional -> . conditional LESS_EQUAL conditional
    (33) conditional -> . conditional AND conditional
    (34) conditional -> . conditional OR conditional
    (35) conditional -> . TRUE
    (36) conditional -> . FALSE
    (37) conditional -> . statement
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . INT
    (20) statement -> . FLOAT
    (21) statement -> . BOOL
    (22) statement -> . STRING
    (23) statement -> . L_PAREN statement R_PAREN
    (24) statement -> . L_PAREN conditional R_PAREN
    (25) statement -> . IDENTIFIER INCREMENT
    (26) statement -> . IDENTIFIER DECREMENT

    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    IDENTIFIER      shift and go to state 45
    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    BOOL            shift and go to state 48
    STRING          shift and go to state 49
    L_PAREN         shift and go to state 18

    conditional                    shift and go to state 91
    statement                      shift and go to state 75

state 72

    (34) conditional -> conditional OR . conditional
    (27) conditional -> . conditional EQUAL conditional
    (28) conditional -> . conditional NOT_EQUAL conditional
    (29) conditional -> . conditional GREATER conditional
    (30) conditional -> . conditional LESS conditional
    (31) conditional -> . conditional GREATER_EQUAL conditional
    (32) conditional -> . conditional LESS_EQUAL conditional
    (33) conditional -> . conditional AND conditional
    (34) conditional -> . conditional OR conditional
    (35) conditional -> . TRUE
    (36) conditional -> . FALSE
    (37) conditional -> . statement
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . INT
    (20) statement -> . FLOAT
    (21) statement -> . BOOL
    (22) statement -> . STRING
    (23) statement -> . L_PAREN statement R_PAREN
    (24) statement -> . L_PAREN conditional R_PAREN
    (25) statement -> . IDENTIFIER INCREMENT
    (26) statement -> . IDENTIFIER DECREMENT

    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    IDENTIFIER      shift and go to state 45
    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    BOOL            shift and go to state 48
    STRING          shift and go to state 49
    L_PAREN         shift and go to state 18

    conditional                    shift and go to state 92
    statement                      shift and go to state 75

state 73

    (13) writeln -> WRITELN L_PAREN statement . R_PAREN
    (15) statement -> statement . PLUS statement
    (16) statement -> statement . MINUS statement
    (17) statement -> statement . TIMES statement
    (18) statement -> statement . DIVIDE statement

    R_PAREN         shift and go to state 93
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36


state 74

    (40) if_else_statement -> IF L_PAREN conditional . R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE
    (41) if_else_statement -> IF L_PAREN conditional . R_PAREN L_BRACE expressions R_BRACE
    (27) conditional -> conditional . EQUAL conditional
    (28) conditional -> conditional . NOT_EQUAL conditional
    (29) conditional -> conditional . GREATER conditional
    (30) conditional -> conditional . LESS conditional
    (31) conditional -> conditional . GREATER_EQUAL conditional
    (32) conditional -> conditional . LESS_EQUAL conditional
    (33) conditional -> conditional . AND conditional
    (34) conditional -> conditional . OR conditional

    R_PAREN         shift and go to state 94
    EQUAL           shift and go to state 65
    NOT_EQUAL       shift and go to state 66
    GREATER         shift and go to state 67
    LESS            shift and go to state 68
    GREATER_EQUAL   shift and go to state 69
    LESS_EQUAL      shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72


state 75

    (37) conditional -> statement .
    (15) statement -> statement . PLUS statement
    (16) statement -> statement . MINUS statement
    (17) statement -> statement . TIMES statement
    (18) statement -> statement . DIVIDE statement

    R_PAREN         reduce using rule 37 (conditional -> statement .)
    EQUAL           reduce using rule 37 (conditional -> statement .)
    NOT_EQUAL       reduce using rule 37 (conditional -> statement .)
    GREATER         reduce using rule 37 (conditional -> statement .)
    LESS            reduce using rule 37 (conditional -> statement .)
    GREATER_EQUAL   reduce using rule 37 (conditional -> statement .)
    LESS_EQUAL      reduce using rule 37 (conditional -> statement .)
    AND             reduce using rule 37 (conditional -> statement .)
    OR              reduce using rule 37 (conditional -> statement .)
    SEMICOLON       reduce using rule 37 (conditional -> statement .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36


state 76

    (38) for_loop -> FOR L_PAREN var_declaration . SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE

    SEMICOLON       shift and go to state 95


state 77

    (49) var_declaration -> IDENTIFIER . ASSIGN statement

    ASSIGN          shift and go to state 39


state 78

    (43) data_type -> INT .

    IDENTIFIER      reduce using rule 43 (data_type -> INT .)


state 79

    (44) data_type -> FLOAT .

    IDENTIFIER      reduce using rule 44 (data_type -> FLOAT .)


state 80

    (45) data_type -> BOOL .

    IDENTIFIER      reduce using rule 45 (data_type -> BOOL .)


state 81

    (46) data_type -> STRING .

    IDENTIFIER      reduce using rule 46 (data_type -> STRING .)


state 82

    (39) while_loop -> WHILE L_PAREN conditional . R_PAREN L_BRACE expressions R_BRACE
    (27) conditional -> conditional . EQUAL conditional
    (28) conditional -> conditional . NOT_EQUAL conditional
    (29) conditional -> conditional . GREATER conditional
    (30) conditional -> conditional . LESS conditional
    (31) conditional -> conditional . GREATER_EQUAL conditional
    (32) conditional -> conditional . LESS_EQUAL conditional
    (33) conditional -> conditional . AND conditional
    (34) conditional -> conditional . OR conditional

    R_PAREN         shift and go to state 96
    EQUAL           shift and go to state 65
    NOT_EQUAL       shift and go to state 66
    GREATER         shift and go to state 67
    LESS            shift and go to state 68
    GREATER_EQUAL   shift and go to state 69
    LESS_EQUAL      shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72


state 83

    (47) declarations -> IDENTIFIER COMMA declarations .

    SEMICOLON       reduce using rule 47 (declarations -> IDENTIFIER COMMA declarations .)


state 84

    (12) write -> WRITE L_PAREN statement R_PAREN .

    SEMICOLON       reduce using rule 12 (write -> WRITE L_PAREN statement R_PAREN .)


state 85

    (27) conditional -> conditional EQUAL conditional .
    (27) conditional -> conditional . EQUAL conditional
    (28) conditional -> conditional . NOT_EQUAL conditional
    (29) conditional -> conditional . GREATER conditional
    (30) conditional -> conditional . LESS conditional
    (31) conditional -> conditional . GREATER_EQUAL conditional
    (32) conditional -> conditional . LESS_EQUAL conditional
    (33) conditional -> conditional . AND conditional
    (34) conditional -> conditional . OR conditional

  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    R_PAREN         reduce using rule 27 (conditional -> conditional EQUAL conditional .)
    SEMICOLON       reduce using rule 27 (conditional -> conditional EQUAL conditional .)
    EQUAL           shift and go to state 65
    NOT_EQUAL       shift and go to state 66
    GREATER         shift and go to state 67
    LESS            shift and go to state 68
    GREATER_EQUAL   shift and go to state 69
    LESS_EQUAL      shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72

  ! EQUAL           [ reduce using rule 27 (conditional -> conditional EQUAL conditional .) ]
  ! NOT_EQUAL       [ reduce using rule 27 (conditional -> conditional EQUAL conditional .) ]
  ! GREATER         [ reduce using rule 27 (conditional -> conditional EQUAL conditional .) ]
  ! LESS            [ reduce using rule 27 (conditional -> conditional EQUAL conditional .) ]
  ! GREATER_EQUAL   [ reduce using rule 27 (conditional -> conditional EQUAL conditional .) ]
  ! LESS_EQUAL      [ reduce using rule 27 (conditional -> conditional EQUAL conditional .) ]
  ! AND             [ reduce using rule 27 (conditional -> conditional EQUAL conditional .) ]
  ! OR              [ reduce using rule 27 (conditional -> conditional EQUAL conditional .) ]


state 86

    (28) conditional -> conditional NOT_EQUAL conditional .
    (27) conditional -> conditional . EQUAL conditional
    (28) conditional -> conditional . NOT_EQUAL conditional
    (29) conditional -> conditional . GREATER conditional
    (30) conditional -> conditional . LESS conditional
    (31) conditional -> conditional . GREATER_EQUAL conditional
    (32) conditional -> conditional . LESS_EQUAL conditional
    (33) conditional -> conditional . AND conditional
    (34) conditional -> conditional . OR conditional

  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    R_PAREN         reduce using rule 28 (conditional -> conditional NOT_EQUAL conditional .)
    SEMICOLON       reduce using rule 28 (conditional -> conditional NOT_EQUAL conditional .)
    EQUAL           shift and go to state 65
    NOT_EQUAL       shift and go to state 66
    GREATER         shift and go to state 67
    LESS            shift and go to state 68
    GREATER_EQUAL   shift and go to state 69
    LESS_EQUAL      shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72

  ! EQUAL           [ reduce using rule 28 (conditional -> conditional NOT_EQUAL conditional .) ]
  ! NOT_EQUAL       [ reduce using rule 28 (conditional -> conditional NOT_EQUAL conditional .) ]
  ! GREATER         [ reduce using rule 28 (conditional -> conditional NOT_EQUAL conditional .) ]
  ! LESS            [ reduce using rule 28 (conditional -> conditional NOT_EQUAL conditional .) ]
  ! GREATER_EQUAL   [ reduce using rule 28 (conditional -> conditional NOT_EQUAL conditional .) ]
  ! LESS_EQUAL      [ reduce using rule 28 (conditional -> conditional NOT_EQUAL conditional .) ]
  ! AND             [ reduce using rule 28 (conditional -> conditional NOT_EQUAL conditional .) ]
  ! OR              [ reduce using rule 28 (conditional -> conditional NOT_EQUAL conditional .) ]


state 87

    (29) conditional -> conditional GREATER conditional .
    (27) conditional -> conditional . EQUAL conditional
    (28) conditional -> conditional . NOT_EQUAL conditional
    (29) conditional -> conditional . GREATER conditional
    (30) conditional -> conditional . LESS conditional
    (31) conditional -> conditional . GREATER_EQUAL conditional
    (32) conditional -> conditional . LESS_EQUAL conditional
    (33) conditional -> conditional . AND conditional
    (34) conditional -> conditional . OR conditional

  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    R_PAREN         reduce using rule 29 (conditional -> conditional GREATER conditional .)
    SEMICOLON       reduce using rule 29 (conditional -> conditional GREATER conditional .)
    EQUAL           shift and go to state 65
    NOT_EQUAL       shift and go to state 66
    GREATER         shift and go to state 67
    LESS            shift and go to state 68
    GREATER_EQUAL   shift and go to state 69
    LESS_EQUAL      shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72

  ! EQUAL           [ reduce using rule 29 (conditional -> conditional GREATER conditional .) ]
  ! NOT_EQUAL       [ reduce using rule 29 (conditional -> conditional GREATER conditional .) ]
  ! GREATER         [ reduce using rule 29 (conditional -> conditional GREATER conditional .) ]
  ! LESS            [ reduce using rule 29 (conditional -> conditional GREATER conditional .) ]
  ! GREATER_EQUAL   [ reduce using rule 29 (conditional -> conditional GREATER conditional .) ]
  ! LESS_EQUAL      [ reduce using rule 29 (conditional -> conditional GREATER conditional .) ]
  ! AND             [ reduce using rule 29 (conditional -> conditional GREATER conditional .) ]
  ! OR              [ reduce using rule 29 (conditional -> conditional GREATER conditional .) ]


state 88

    (30) conditional -> conditional LESS conditional .
    (27) conditional -> conditional . EQUAL conditional
    (28) conditional -> conditional . NOT_EQUAL conditional
    (29) conditional -> conditional . GREATER conditional
    (30) conditional -> conditional . LESS conditional
    (31) conditional -> conditional . GREATER_EQUAL conditional
    (32) conditional -> conditional . LESS_EQUAL conditional
    (33) conditional -> conditional . AND conditional
    (34) conditional -> conditional . OR conditional

  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    R_PAREN         reduce using rule 30 (conditional -> conditional LESS conditional .)
    SEMICOLON       reduce using rule 30 (conditional -> conditional LESS conditional .)
    EQUAL           shift and go to state 65
    NOT_EQUAL       shift and go to state 66
    GREATER         shift and go to state 67
    LESS            shift and go to state 68
    GREATER_EQUAL   shift and go to state 69
    LESS_EQUAL      shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72

  ! EQUAL           [ reduce using rule 30 (conditional -> conditional LESS conditional .) ]
  ! NOT_EQUAL       [ reduce using rule 30 (conditional -> conditional LESS conditional .) ]
  ! GREATER         [ reduce using rule 30 (conditional -> conditional LESS conditional .) ]
  ! LESS            [ reduce using rule 30 (conditional -> conditional LESS conditional .) ]
  ! GREATER_EQUAL   [ reduce using rule 30 (conditional -> conditional LESS conditional .) ]
  ! LESS_EQUAL      [ reduce using rule 30 (conditional -> conditional LESS conditional .) ]
  ! AND             [ reduce using rule 30 (conditional -> conditional LESS conditional .) ]
  ! OR              [ reduce using rule 30 (conditional -> conditional LESS conditional .) ]


state 89

    (31) conditional -> conditional GREATER_EQUAL conditional .
    (27) conditional -> conditional . EQUAL conditional
    (28) conditional -> conditional . NOT_EQUAL conditional
    (29) conditional -> conditional . GREATER conditional
    (30) conditional -> conditional . LESS conditional
    (31) conditional -> conditional . GREATER_EQUAL conditional
    (32) conditional -> conditional . LESS_EQUAL conditional
    (33) conditional -> conditional . AND conditional
    (34) conditional -> conditional . OR conditional

  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    R_PAREN         reduce using rule 31 (conditional -> conditional GREATER_EQUAL conditional .)
    SEMICOLON       reduce using rule 31 (conditional -> conditional GREATER_EQUAL conditional .)
    EQUAL           shift and go to state 65
    NOT_EQUAL       shift and go to state 66
    GREATER         shift and go to state 67
    LESS            shift and go to state 68
    GREATER_EQUAL   shift and go to state 69
    LESS_EQUAL      shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72

  ! EQUAL           [ reduce using rule 31 (conditional -> conditional GREATER_EQUAL conditional .) ]
  ! NOT_EQUAL       [ reduce using rule 31 (conditional -> conditional GREATER_EQUAL conditional .) ]
  ! GREATER         [ reduce using rule 31 (conditional -> conditional GREATER_EQUAL conditional .) ]
  ! LESS            [ reduce using rule 31 (conditional -> conditional GREATER_EQUAL conditional .) ]
  ! GREATER_EQUAL   [ reduce using rule 31 (conditional -> conditional GREATER_EQUAL conditional .) ]
  ! LESS_EQUAL      [ reduce using rule 31 (conditional -> conditional GREATER_EQUAL conditional .) ]
  ! AND             [ reduce using rule 31 (conditional -> conditional GREATER_EQUAL conditional .) ]
  ! OR              [ reduce using rule 31 (conditional -> conditional GREATER_EQUAL conditional .) ]


state 90

    (32) conditional -> conditional LESS_EQUAL conditional .
    (27) conditional -> conditional . EQUAL conditional
    (28) conditional -> conditional . NOT_EQUAL conditional
    (29) conditional -> conditional . GREATER conditional
    (30) conditional -> conditional . LESS conditional
    (31) conditional -> conditional . GREATER_EQUAL conditional
    (32) conditional -> conditional . LESS_EQUAL conditional
    (33) conditional -> conditional . AND conditional
    (34) conditional -> conditional . OR conditional

  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    R_PAREN         reduce using rule 32 (conditional -> conditional LESS_EQUAL conditional .)
    SEMICOLON       reduce using rule 32 (conditional -> conditional LESS_EQUAL conditional .)
    EQUAL           shift and go to state 65
    NOT_EQUAL       shift and go to state 66
    GREATER         shift and go to state 67
    LESS            shift and go to state 68
    GREATER_EQUAL   shift and go to state 69
    LESS_EQUAL      shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72

  ! EQUAL           [ reduce using rule 32 (conditional -> conditional LESS_EQUAL conditional .) ]
  ! NOT_EQUAL       [ reduce using rule 32 (conditional -> conditional LESS_EQUAL conditional .) ]
  ! GREATER         [ reduce using rule 32 (conditional -> conditional LESS_EQUAL conditional .) ]
  ! LESS            [ reduce using rule 32 (conditional -> conditional LESS_EQUAL conditional .) ]
  ! GREATER_EQUAL   [ reduce using rule 32 (conditional -> conditional LESS_EQUAL conditional .) ]
  ! LESS_EQUAL      [ reduce using rule 32 (conditional -> conditional LESS_EQUAL conditional .) ]
  ! AND             [ reduce using rule 32 (conditional -> conditional LESS_EQUAL conditional .) ]
  ! OR              [ reduce using rule 32 (conditional -> conditional LESS_EQUAL conditional .) ]


state 91

    (33) conditional -> conditional AND conditional .
    (27) conditional -> conditional . EQUAL conditional
    (28) conditional -> conditional . NOT_EQUAL conditional
    (29) conditional -> conditional . GREATER conditional
    (30) conditional -> conditional . LESS conditional
    (31) conditional -> conditional . GREATER_EQUAL conditional
    (32) conditional -> conditional . LESS_EQUAL conditional
    (33) conditional -> conditional . AND conditional
    (34) conditional -> conditional . OR conditional

    R_PAREN         reduce using rule 33 (conditional -> conditional AND conditional .)
    EQUAL           reduce using rule 33 (conditional -> conditional AND conditional .)
    NOT_EQUAL       reduce using rule 33 (conditional -> conditional AND conditional .)
    GREATER         reduce using rule 33 (conditional -> conditional AND conditional .)
    LESS            reduce using rule 33 (conditional -> conditional AND conditional .)
    GREATER_EQUAL   reduce using rule 33 (conditional -> conditional AND conditional .)
    LESS_EQUAL      reduce using rule 33 (conditional -> conditional AND conditional .)
    AND             reduce using rule 33 (conditional -> conditional AND conditional .)
    OR              reduce using rule 33 (conditional -> conditional AND conditional .)
    SEMICOLON       reduce using rule 33 (conditional -> conditional AND conditional .)

  ! EQUAL           [ shift and go to state 65 ]
  ! NOT_EQUAL       [ shift and go to state 66 ]
  ! GREATER         [ shift and go to state 67 ]
  ! LESS            [ shift and go to state 68 ]
  ! GREATER_EQUAL   [ shift and go to state 69 ]
  ! LESS_EQUAL      [ shift and go to state 70 ]
  ! AND             [ shift and go to state 71 ]
  ! OR              [ shift and go to state 72 ]


state 92

    (34) conditional -> conditional OR conditional .
    (27) conditional -> conditional . EQUAL conditional
    (28) conditional -> conditional . NOT_EQUAL conditional
    (29) conditional -> conditional . GREATER conditional
    (30) conditional -> conditional . LESS conditional
    (31) conditional -> conditional . GREATER_EQUAL conditional
    (32) conditional -> conditional . LESS_EQUAL conditional
    (33) conditional -> conditional . AND conditional
    (34) conditional -> conditional . OR conditional

    R_PAREN         reduce using rule 34 (conditional -> conditional OR conditional .)
    EQUAL           reduce using rule 34 (conditional -> conditional OR conditional .)
    NOT_EQUAL       reduce using rule 34 (conditional -> conditional OR conditional .)
    GREATER         reduce using rule 34 (conditional -> conditional OR conditional .)
    LESS            reduce using rule 34 (conditional -> conditional OR conditional .)
    GREATER_EQUAL   reduce using rule 34 (conditional -> conditional OR conditional .)
    LESS_EQUAL      reduce using rule 34 (conditional -> conditional OR conditional .)
    AND             reduce using rule 34 (conditional -> conditional OR conditional .)
    OR              reduce using rule 34 (conditional -> conditional OR conditional .)
    SEMICOLON       reduce using rule 34 (conditional -> conditional OR conditional .)

  ! EQUAL           [ shift and go to state 65 ]
  ! NOT_EQUAL       [ shift and go to state 66 ]
  ! GREATER         [ shift and go to state 67 ]
  ! LESS            [ shift and go to state 68 ]
  ! GREATER_EQUAL   [ shift and go to state 69 ]
  ! LESS_EQUAL      [ shift and go to state 70 ]
  ! AND             [ shift and go to state 71 ]
  ! OR              [ shift and go to state 72 ]


state 93

    (13) writeln -> WRITELN L_PAREN statement R_PAREN .

    SEMICOLON       reduce using rule 13 (writeln -> WRITELN L_PAREN statement R_PAREN .)


state 94

    (40) if_else_statement -> IF L_PAREN conditional R_PAREN . L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE
    (41) if_else_statement -> IF L_PAREN conditional R_PAREN . L_BRACE expressions R_BRACE

    L_BRACE         shift and go to state 97


state 95

    (38) for_loop -> FOR L_PAREN var_declaration SEMICOLON . conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE
    (27) conditional -> . conditional EQUAL conditional
    (28) conditional -> . conditional NOT_EQUAL conditional
    (29) conditional -> . conditional GREATER conditional
    (30) conditional -> . conditional LESS conditional
    (31) conditional -> . conditional GREATER_EQUAL conditional
    (32) conditional -> . conditional LESS_EQUAL conditional
    (33) conditional -> . conditional AND conditional
    (34) conditional -> . conditional OR conditional
    (35) conditional -> . TRUE
    (36) conditional -> . FALSE
    (37) conditional -> . statement
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . INT
    (20) statement -> . FLOAT
    (21) statement -> . BOOL
    (22) statement -> . STRING
    (23) statement -> . L_PAREN statement R_PAREN
    (24) statement -> . L_PAREN conditional R_PAREN
    (25) statement -> . IDENTIFIER INCREMENT
    (26) statement -> . IDENTIFIER DECREMENT

    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    IDENTIFIER      shift and go to state 45
    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    BOOL            shift and go to state 48
    STRING          shift and go to state 49
    L_PAREN         shift and go to state 18

    conditional                    shift and go to state 98
    statement                      shift and go to state 75

state 96

    (39) while_loop -> WHILE L_PAREN conditional R_PAREN . L_BRACE expressions R_BRACE

    L_BRACE         shift and go to state 99


state 97

    (40) if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE . expressions R_BRACE ELSE L_BRACE expressions R_BRACE
    (41) if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE . expressions R_BRACE
    (2) expressions -> . expressions expression
    (3) expressions -> . expression
    (4) expression -> . var_declaration SEMICOLON
    (5) expression -> . write SEMICOLON
    (6) expression -> . writeln SEMICOLON
    (7) expression -> . statement SEMICOLON
    (8) expression -> . if_else_statement
    (9) expression -> . for_loop
    (10) expression -> . while_loop
    (11) expression -> . empty
    (42) var_declaration -> . data_type declarations
    (49) var_declaration -> . IDENTIFIER ASSIGN statement
    (12) write -> . WRITE L_PAREN statement R_PAREN
    (13) writeln -> . WRITELN L_PAREN statement R_PAREN
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . INT
    (20) statement -> . FLOAT
    (21) statement -> . BOOL
    (22) statement -> . STRING
    (23) statement -> . L_PAREN statement R_PAREN
    (24) statement -> . L_PAREN conditional R_PAREN
    (25) statement -> . IDENTIFIER INCREMENT
    (26) statement -> . IDENTIFIER DECREMENT
    (40) if_else_statement -> . IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE
    (41) if_else_statement -> . IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE
    (38) for_loop -> . FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE
    (39) while_loop -> . WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE
    (50) empty -> .
    (43) data_type -> . INT
    (44) data_type -> . FLOAT
    (45) data_type -> . BOOL
    (46) data_type -> . STRING

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for L_PAREN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    IDENTIFIER      shift and go to state 16
    WRITE           shift and go to state 17
    WRITELN         shift and go to state 19
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 22
    STRING          shift and go to state 23
    L_PAREN         shift and go to state 18
    IF              shift and go to state 24
    FOR             shift and go to state 25
    WHILE           shift and go to state 26
    R_BRACE         reduce using rule 50 (empty -> .)

  ! IDENTIFIER      [ reduce using rule 50 (empty -> .) ]
  ! WRITE           [ reduce using rule 50 (empty -> .) ]
  ! WRITELN         [ reduce using rule 50 (empty -> .) ]
  ! INT             [ reduce using rule 50 (empty -> .) ]
  ! FLOAT           [ reduce using rule 50 (empty -> .) ]
  ! BOOL            [ reduce using rule 50 (empty -> .) ]
  ! STRING          [ reduce using rule 50 (empty -> .) ]
  ! L_PAREN         [ reduce using rule 50 (empty -> .) ]
  ! IF              [ reduce using rule 50 (empty -> .) ]
  ! FOR             [ reduce using rule 50 (empty -> .) ]
  ! WHILE           [ reduce using rule 50 (empty -> .) ]

    expressions                    shift and go to state 100
    expression                     shift and go to state 6
    var_declaration                shift and go to state 7
    write                          shift and go to state 8
    writeln                        shift and go to state 9
    statement                      shift and go to state 10
    if_else_statement              shift and go to state 11
    for_loop                       shift and go to state 12
    while_loop                     shift and go to state 13
    empty                          shift and go to state 14
    data_type                      shift and go to state 15

state 98

    (38) for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional . SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE
    (27) conditional -> conditional . EQUAL conditional
    (28) conditional -> conditional . NOT_EQUAL conditional
    (29) conditional -> conditional . GREATER conditional
    (30) conditional -> conditional . LESS conditional
    (31) conditional -> conditional . GREATER_EQUAL conditional
    (32) conditional -> conditional . LESS_EQUAL conditional
    (33) conditional -> conditional . AND conditional
    (34) conditional -> conditional . OR conditional

    SEMICOLON       shift and go to state 101
    EQUAL           shift and go to state 65
    NOT_EQUAL       shift and go to state 66
    GREATER         shift and go to state 67
    LESS            shift and go to state 68
    GREATER_EQUAL   shift and go to state 69
    LESS_EQUAL      shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72


state 99

    (39) while_loop -> WHILE L_PAREN conditional R_PAREN L_BRACE . expressions R_BRACE
    (2) expressions -> . expressions expression
    (3) expressions -> . expression
    (4) expression -> . var_declaration SEMICOLON
    (5) expression -> . write SEMICOLON
    (6) expression -> . writeln SEMICOLON
    (7) expression -> . statement SEMICOLON
    (8) expression -> . if_else_statement
    (9) expression -> . for_loop
    (10) expression -> . while_loop
    (11) expression -> . empty
    (42) var_declaration -> . data_type declarations
    (49) var_declaration -> . IDENTIFIER ASSIGN statement
    (12) write -> . WRITE L_PAREN statement R_PAREN
    (13) writeln -> . WRITELN L_PAREN statement R_PAREN
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . INT
    (20) statement -> . FLOAT
    (21) statement -> . BOOL
    (22) statement -> . STRING
    (23) statement -> . L_PAREN statement R_PAREN
    (24) statement -> . L_PAREN conditional R_PAREN
    (25) statement -> . IDENTIFIER INCREMENT
    (26) statement -> . IDENTIFIER DECREMENT
    (40) if_else_statement -> . IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE
    (41) if_else_statement -> . IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE
    (38) for_loop -> . FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE
    (39) while_loop -> . WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE
    (50) empty -> .
    (43) data_type -> . INT
    (44) data_type -> . FLOAT
    (45) data_type -> . BOOL
    (46) data_type -> . STRING

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for L_PAREN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    IDENTIFIER      shift and go to state 16
    WRITE           shift and go to state 17
    WRITELN         shift and go to state 19
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 22
    STRING          shift and go to state 23
    L_PAREN         shift and go to state 18
    IF              shift and go to state 24
    FOR             shift and go to state 25
    WHILE           shift and go to state 26
    R_BRACE         reduce using rule 50 (empty -> .)

  ! IDENTIFIER      [ reduce using rule 50 (empty -> .) ]
  ! WRITE           [ reduce using rule 50 (empty -> .) ]
  ! WRITELN         [ reduce using rule 50 (empty -> .) ]
  ! INT             [ reduce using rule 50 (empty -> .) ]
  ! FLOAT           [ reduce using rule 50 (empty -> .) ]
  ! BOOL            [ reduce using rule 50 (empty -> .) ]
  ! STRING          [ reduce using rule 50 (empty -> .) ]
  ! L_PAREN         [ reduce using rule 50 (empty -> .) ]
  ! IF              [ reduce using rule 50 (empty -> .) ]
  ! FOR             [ reduce using rule 50 (empty -> .) ]
  ! WHILE           [ reduce using rule 50 (empty -> .) ]

    expressions                    shift and go to state 102
    expression                     shift and go to state 6
    var_declaration                shift and go to state 7
    write                          shift and go to state 8
    writeln                        shift and go to state 9
    statement                      shift and go to state 10
    if_else_statement              shift and go to state 11
    for_loop                       shift and go to state 12
    while_loop                     shift and go to state 13
    empty                          shift and go to state 14
    data_type                      shift and go to state 15

state 100

    (40) if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions . R_BRACE ELSE L_BRACE expressions R_BRACE
    (41) if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions . R_BRACE
    (2) expressions -> expressions . expression
    (4) expression -> . var_declaration SEMICOLON
    (5) expression -> . write SEMICOLON
    (6) expression -> . writeln SEMICOLON
    (7) expression -> . statement SEMICOLON
    (8) expression -> . if_else_statement
    (9) expression -> . for_loop
    (10) expression -> . while_loop
    (11) expression -> . empty
    (42) var_declaration -> . data_type declarations
    (49) var_declaration -> . IDENTIFIER ASSIGN statement
    (12) write -> . WRITE L_PAREN statement R_PAREN
    (13) writeln -> . WRITELN L_PAREN statement R_PAREN
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . INT
    (20) statement -> . FLOAT
    (21) statement -> . BOOL
    (22) statement -> . STRING
    (23) statement -> . L_PAREN statement R_PAREN
    (24) statement -> . L_PAREN conditional R_PAREN
    (25) statement -> . IDENTIFIER INCREMENT
    (26) statement -> . IDENTIFIER DECREMENT
    (40) if_else_statement -> . IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE
    (41) if_else_statement -> . IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE
    (38) for_loop -> . FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE
    (39) while_loop -> . WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE
    (50) empty -> .
    (43) data_type -> . INT
    (44) data_type -> . FLOAT
    (45) data_type -> . BOOL
    (46) data_type -> . STRING

  ! shift/reduce conflict for R_BRACE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for L_PAREN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_BRACE         shift and go to state 103
    IDENTIFIER      shift and go to state 16
    WRITE           shift and go to state 17
    WRITELN         shift and go to state 19
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 22
    STRING          shift and go to state 23
    L_PAREN         shift and go to state 18
    IF              shift and go to state 24
    FOR             shift and go to state 25
    WHILE           shift and go to state 26

  ! R_BRACE         [ reduce using rule 50 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 50 (empty -> .) ]
  ! WRITE           [ reduce using rule 50 (empty -> .) ]
  ! WRITELN         [ reduce using rule 50 (empty -> .) ]
  ! INT             [ reduce using rule 50 (empty -> .) ]
  ! FLOAT           [ reduce using rule 50 (empty -> .) ]
  ! BOOL            [ reduce using rule 50 (empty -> .) ]
  ! STRING          [ reduce using rule 50 (empty -> .) ]
  ! L_PAREN         [ reduce using rule 50 (empty -> .) ]
  ! IF              [ reduce using rule 50 (empty -> .) ]
  ! FOR             [ reduce using rule 50 (empty -> .) ]
  ! WHILE           [ reduce using rule 50 (empty -> .) ]

    expression                     shift and go to state 28
    var_declaration                shift and go to state 7
    write                          shift and go to state 8
    writeln                        shift and go to state 9
    statement                      shift and go to state 10
    if_else_statement              shift and go to state 11
    for_loop                       shift and go to state 12
    while_loop                     shift and go to state 13
    empty                          shift and go to state 14
    data_type                      shift and go to state 15

state 101

    (38) for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON . statement R_PAREN L_BRACE expressions R_BRACE
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . INT
    (20) statement -> . FLOAT
    (21) statement -> . BOOL
    (22) statement -> . STRING
    (23) statement -> . L_PAREN statement R_PAREN
    (24) statement -> . L_PAREN conditional R_PAREN
    (25) statement -> . IDENTIFIER INCREMENT
    (26) statement -> . IDENTIFIER DECREMENT

    IDENTIFIER      shift and go to state 45
    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    BOOL            shift and go to state 48
    STRING          shift and go to state 49
    L_PAREN         shift and go to state 18

    statement                      shift and go to state 104

state 102

    (39) while_loop -> WHILE L_PAREN conditional R_PAREN L_BRACE expressions . R_BRACE
    (2) expressions -> expressions . expression
    (4) expression -> . var_declaration SEMICOLON
    (5) expression -> . write SEMICOLON
    (6) expression -> . writeln SEMICOLON
    (7) expression -> . statement SEMICOLON
    (8) expression -> . if_else_statement
    (9) expression -> . for_loop
    (10) expression -> . while_loop
    (11) expression -> . empty
    (42) var_declaration -> . data_type declarations
    (49) var_declaration -> . IDENTIFIER ASSIGN statement
    (12) write -> . WRITE L_PAREN statement R_PAREN
    (13) writeln -> . WRITELN L_PAREN statement R_PAREN
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . INT
    (20) statement -> . FLOAT
    (21) statement -> . BOOL
    (22) statement -> . STRING
    (23) statement -> . L_PAREN statement R_PAREN
    (24) statement -> . L_PAREN conditional R_PAREN
    (25) statement -> . IDENTIFIER INCREMENT
    (26) statement -> . IDENTIFIER DECREMENT
    (40) if_else_statement -> . IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE
    (41) if_else_statement -> . IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE
    (38) for_loop -> . FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE
    (39) while_loop -> . WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE
    (50) empty -> .
    (43) data_type -> . INT
    (44) data_type -> . FLOAT
    (45) data_type -> . BOOL
    (46) data_type -> . STRING

  ! shift/reduce conflict for R_BRACE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for L_PAREN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_BRACE         shift and go to state 105
    IDENTIFIER      shift and go to state 16
    WRITE           shift and go to state 17
    WRITELN         shift and go to state 19
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 22
    STRING          shift and go to state 23
    L_PAREN         shift and go to state 18
    IF              shift and go to state 24
    FOR             shift and go to state 25
    WHILE           shift and go to state 26

  ! R_BRACE         [ reduce using rule 50 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 50 (empty -> .) ]
  ! WRITE           [ reduce using rule 50 (empty -> .) ]
  ! WRITELN         [ reduce using rule 50 (empty -> .) ]
  ! INT             [ reduce using rule 50 (empty -> .) ]
  ! FLOAT           [ reduce using rule 50 (empty -> .) ]
  ! BOOL            [ reduce using rule 50 (empty -> .) ]
  ! STRING          [ reduce using rule 50 (empty -> .) ]
  ! L_PAREN         [ reduce using rule 50 (empty -> .) ]
  ! IF              [ reduce using rule 50 (empty -> .) ]
  ! FOR             [ reduce using rule 50 (empty -> .) ]
  ! WHILE           [ reduce using rule 50 (empty -> .) ]

    expression                     shift and go to state 28
    var_declaration                shift and go to state 7
    write                          shift and go to state 8
    writeln                        shift and go to state 9
    statement                      shift and go to state 10
    if_else_statement              shift and go to state 11
    for_loop                       shift and go to state 12
    while_loop                     shift and go to state 13
    empty                          shift and go to state 14
    data_type                      shift and go to state 15

state 103

    (40) if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE . ELSE L_BRACE expressions R_BRACE
    (41) if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .

    ELSE            shift and go to state 106
    R_BRACE         reduce using rule 41 (if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .)
    IDENTIFIER      reduce using rule 41 (if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .)
    WRITE           reduce using rule 41 (if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .)
    WRITELN         reduce using rule 41 (if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .)
    INT             reduce using rule 41 (if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .)
    FLOAT           reduce using rule 41 (if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .)
    BOOL            reduce using rule 41 (if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .)
    STRING          reduce using rule 41 (if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .)
    L_PAREN         reduce using rule 41 (if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .)
    IF              reduce using rule 41 (if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .)
    FOR             reduce using rule 41 (if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .)
    WHILE           reduce using rule 41 (if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .)


state 104

    (38) for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement . R_PAREN L_BRACE expressions R_BRACE
    (15) statement -> statement . PLUS statement
    (16) statement -> statement . MINUS statement
    (17) statement -> statement . TIMES statement
    (18) statement -> statement . DIVIDE statement

    R_PAREN         shift and go to state 107
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36


state 105

    (39) while_loop -> WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .

    R_BRACE         reduce using rule 39 (while_loop -> WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .)
    IDENTIFIER      reduce using rule 39 (while_loop -> WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .)
    WRITE           reduce using rule 39 (while_loop -> WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .)
    WRITELN         reduce using rule 39 (while_loop -> WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .)
    INT             reduce using rule 39 (while_loop -> WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .)
    FLOAT           reduce using rule 39 (while_loop -> WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .)
    BOOL            reduce using rule 39 (while_loop -> WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .)
    STRING          reduce using rule 39 (while_loop -> WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .)
    L_PAREN         reduce using rule 39 (while_loop -> WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .)
    IF              reduce using rule 39 (while_loop -> WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .)
    FOR             reduce using rule 39 (while_loop -> WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .)
    WHILE           reduce using rule 39 (while_loop -> WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE .)


state 106

    (40) if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE . L_BRACE expressions R_BRACE

    L_BRACE         shift and go to state 108


state 107

    (38) for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN . L_BRACE expressions R_BRACE

    L_BRACE         shift and go to state 109


state 108

    (40) if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE . expressions R_BRACE
    (2) expressions -> . expressions expression
    (3) expressions -> . expression
    (4) expression -> . var_declaration SEMICOLON
    (5) expression -> . write SEMICOLON
    (6) expression -> . writeln SEMICOLON
    (7) expression -> . statement SEMICOLON
    (8) expression -> . if_else_statement
    (9) expression -> . for_loop
    (10) expression -> . while_loop
    (11) expression -> . empty
    (42) var_declaration -> . data_type declarations
    (49) var_declaration -> . IDENTIFIER ASSIGN statement
    (12) write -> . WRITE L_PAREN statement R_PAREN
    (13) writeln -> . WRITELN L_PAREN statement R_PAREN
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . INT
    (20) statement -> . FLOAT
    (21) statement -> . BOOL
    (22) statement -> . STRING
    (23) statement -> . L_PAREN statement R_PAREN
    (24) statement -> . L_PAREN conditional R_PAREN
    (25) statement -> . IDENTIFIER INCREMENT
    (26) statement -> . IDENTIFIER DECREMENT
    (40) if_else_statement -> . IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE
    (41) if_else_statement -> . IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE
    (38) for_loop -> . FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE
    (39) while_loop -> . WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE
    (50) empty -> .
    (43) data_type -> . INT
    (44) data_type -> . FLOAT
    (45) data_type -> . BOOL
    (46) data_type -> . STRING

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for L_PAREN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    IDENTIFIER      shift and go to state 16
    WRITE           shift and go to state 17
    WRITELN         shift and go to state 19
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 22
    STRING          shift and go to state 23
    L_PAREN         shift and go to state 18
    IF              shift and go to state 24
    FOR             shift and go to state 25
    WHILE           shift and go to state 26
    R_BRACE         reduce using rule 50 (empty -> .)

  ! IDENTIFIER      [ reduce using rule 50 (empty -> .) ]
  ! WRITE           [ reduce using rule 50 (empty -> .) ]
  ! WRITELN         [ reduce using rule 50 (empty -> .) ]
  ! INT             [ reduce using rule 50 (empty -> .) ]
  ! FLOAT           [ reduce using rule 50 (empty -> .) ]
  ! BOOL            [ reduce using rule 50 (empty -> .) ]
  ! STRING          [ reduce using rule 50 (empty -> .) ]
  ! L_PAREN         [ reduce using rule 50 (empty -> .) ]
  ! IF              [ reduce using rule 50 (empty -> .) ]
  ! FOR             [ reduce using rule 50 (empty -> .) ]
  ! WHILE           [ reduce using rule 50 (empty -> .) ]

    expressions                    shift and go to state 110
    expression                     shift and go to state 6
    var_declaration                shift and go to state 7
    write                          shift and go to state 8
    writeln                        shift and go to state 9
    statement                      shift and go to state 10
    if_else_statement              shift and go to state 11
    for_loop                       shift and go to state 12
    while_loop                     shift and go to state 13
    empty                          shift and go to state 14
    data_type                      shift and go to state 15

state 109

    (38) for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE . expressions R_BRACE
    (2) expressions -> . expressions expression
    (3) expressions -> . expression
    (4) expression -> . var_declaration SEMICOLON
    (5) expression -> . write SEMICOLON
    (6) expression -> . writeln SEMICOLON
    (7) expression -> . statement SEMICOLON
    (8) expression -> . if_else_statement
    (9) expression -> . for_loop
    (10) expression -> . while_loop
    (11) expression -> . empty
    (42) var_declaration -> . data_type declarations
    (49) var_declaration -> . IDENTIFIER ASSIGN statement
    (12) write -> . WRITE L_PAREN statement R_PAREN
    (13) writeln -> . WRITELN L_PAREN statement R_PAREN
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . INT
    (20) statement -> . FLOAT
    (21) statement -> . BOOL
    (22) statement -> . STRING
    (23) statement -> . L_PAREN statement R_PAREN
    (24) statement -> . L_PAREN conditional R_PAREN
    (25) statement -> . IDENTIFIER INCREMENT
    (26) statement -> . IDENTIFIER DECREMENT
    (40) if_else_statement -> . IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE
    (41) if_else_statement -> . IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE
    (38) for_loop -> . FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE
    (39) while_loop -> . WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE
    (50) empty -> .
    (43) data_type -> . INT
    (44) data_type -> . FLOAT
    (45) data_type -> . BOOL
    (46) data_type -> . STRING

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for L_PAREN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    IDENTIFIER      shift and go to state 16
    WRITE           shift and go to state 17
    WRITELN         shift and go to state 19
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 22
    STRING          shift and go to state 23
    L_PAREN         shift and go to state 18
    IF              shift and go to state 24
    FOR             shift and go to state 25
    WHILE           shift and go to state 26
    R_BRACE         reduce using rule 50 (empty -> .)

  ! IDENTIFIER      [ reduce using rule 50 (empty -> .) ]
  ! WRITE           [ reduce using rule 50 (empty -> .) ]
  ! WRITELN         [ reduce using rule 50 (empty -> .) ]
  ! INT             [ reduce using rule 50 (empty -> .) ]
  ! FLOAT           [ reduce using rule 50 (empty -> .) ]
  ! BOOL            [ reduce using rule 50 (empty -> .) ]
  ! STRING          [ reduce using rule 50 (empty -> .) ]
  ! L_PAREN         [ reduce using rule 50 (empty -> .) ]
  ! IF              [ reduce using rule 50 (empty -> .) ]
  ! FOR             [ reduce using rule 50 (empty -> .) ]
  ! WHILE           [ reduce using rule 50 (empty -> .) ]

    var_declaration                shift and go to state 7
    statement                      shift and go to state 10
    expressions                    shift and go to state 111
    expression                     shift and go to state 6
    write                          shift and go to state 8
    writeln                        shift and go to state 9
    if_else_statement              shift and go to state 11
    for_loop                       shift and go to state 12
    while_loop                     shift and go to state 13
    empty                          shift and go to state 14
    data_type                      shift and go to state 15

state 110

    (40) if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions . R_BRACE
    (2) expressions -> expressions . expression
    (4) expression -> . var_declaration SEMICOLON
    (5) expression -> . write SEMICOLON
    (6) expression -> . writeln SEMICOLON
    (7) expression -> . statement SEMICOLON
    (8) expression -> . if_else_statement
    (9) expression -> . for_loop
    (10) expression -> . while_loop
    (11) expression -> . empty
    (42) var_declaration -> . data_type declarations
    (49) var_declaration -> . IDENTIFIER ASSIGN statement
    (12) write -> . WRITE L_PAREN statement R_PAREN
    (13) writeln -> . WRITELN L_PAREN statement R_PAREN
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . INT
    (20) statement -> . FLOAT
    (21) statement -> . BOOL
    (22) statement -> . STRING
    (23) statement -> . L_PAREN statement R_PAREN
    (24) statement -> . L_PAREN conditional R_PAREN
    (25) statement -> . IDENTIFIER INCREMENT
    (26) statement -> . IDENTIFIER DECREMENT
    (40) if_else_statement -> . IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE
    (41) if_else_statement -> . IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE
    (38) for_loop -> . FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE
    (39) while_loop -> . WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE
    (50) empty -> .
    (43) data_type -> . INT
    (44) data_type -> . FLOAT
    (45) data_type -> . BOOL
    (46) data_type -> . STRING

  ! shift/reduce conflict for R_BRACE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for L_PAREN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_BRACE         shift and go to state 112
    IDENTIFIER      shift and go to state 16
    WRITE           shift and go to state 17
    WRITELN         shift and go to state 19
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 22
    STRING          shift and go to state 23
    L_PAREN         shift and go to state 18
    IF              shift and go to state 24
    FOR             shift and go to state 25
    WHILE           shift and go to state 26

  ! R_BRACE         [ reduce using rule 50 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 50 (empty -> .) ]
  ! WRITE           [ reduce using rule 50 (empty -> .) ]
  ! WRITELN         [ reduce using rule 50 (empty -> .) ]
  ! INT             [ reduce using rule 50 (empty -> .) ]
  ! FLOAT           [ reduce using rule 50 (empty -> .) ]
  ! BOOL            [ reduce using rule 50 (empty -> .) ]
  ! STRING          [ reduce using rule 50 (empty -> .) ]
  ! L_PAREN         [ reduce using rule 50 (empty -> .) ]
  ! IF              [ reduce using rule 50 (empty -> .) ]
  ! FOR             [ reduce using rule 50 (empty -> .) ]
  ! WHILE           [ reduce using rule 50 (empty -> .) ]

    expression                     shift and go to state 28
    var_declaration                shift and go to state 7
    write                          shift and go to state 8
    writeln                        shift and go to state 9
    statement                      shift and go to state 10
    if_else_statement              shift and go to state 11
    for_loop                       shift and go to state 12
    while_loop                     shift and go to state 13
    empty                          shift and go to state 14
    data_type                      shift and go to state 15

state 111

    (38) for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions . R_BRACE
    (2) expressions -> expressions . expression
    (4) expression -> . var_declaration SEMICOLON
    (5) expression -> . write SEMICOLON
    (6) expression -> . writeln SEMICOLON
    (7) expression -> . statement SEMICOLON
    (8) expression -> . if_else_statement
    (9) expression -> . for_loop
    (10) expression -> . while_loop
    (11) expression -> . empty
    (42) var_declaration -> . data_type declarations
    (49) var_declaration -> . IDENTIFIER ASSIGN statement
    (12) write -> . WRITE L_PAREN statement R_PAREN
    (13) writeln -> . WRITELN L_PAREN statement R_PAREN
    (14) statement -> . IDENTIFIER
    (15) statement -> . statement PLUS statement
    (16) statement -> . statement MINUS statement
    (17) statement -> . statement TIMES statement
    (18) statement -> . statement DIVIDE statement
    (19) statement -> . INT
    (20) statement -> . FLOAT
    (21) statement -> . BOOL
    (22) statement -> . STRING
    (23) statement -> . L_PAREN statement R_PAREN
    (24) statement -> . L_PAREN conditional R_PAREN
    (25) statement -> . IDENTIFIER INCREMENT
    (26) statement -> . IDENTIFIER DECREMENT
    (40) if_else_statement -> . IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE
    (41) if_else_statement -> . IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE
    (38) for_loop -> . FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE
    (39) while_loop -> . WHILE L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE
    (50) empty -> .
    (43) data_type -> . INT
    (44) data_type -> . FLOAT
    (45) data_type -> . BOOL
    (46) data_type -> . STRING

  ! shift/reduce conflict for R_BRACE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for L_PAREN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_BRACE         shift and go to state 113
    IDENTIFIER      shift and go to state 16
    WRITE           shift and go to state 17
    WRITELN         shift and go to state 19
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 22
    STRING          shift and go to state 23
    L_PAREN         shift and go to state 18
    IF              shift and go to state 24
    FOR             shift and go to state 25
    WHILE           shift and go to state 26

  ! R_BRACE         [ reduce using rule 50 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 50 (empty -> .) ]
  ! WRITE           [ reduce using rule 50 (empty -> .) ]
  ! WRITELN         [ reduce using rule 50 (empty -> .) ]
  ! INT             [ reduce using rule 50 (empty -> .) ]
  ! FLOAT           [ reduce using rule 50 (empty -> .) ]
  ! BOOL            [ reduce using rule 50 (empty -> .) ]
  ! STRING          [ reduce using rule 50 (empty -> .) ]
  ! L_PAREN         [ reduce using rule 50 (empty -> .) ]
  ! IF              [ reduce using rule 50 (empty -> .) ]
  ! FOR             [ reduce using rule 50 (empty -> .) ]
  ! WHILE           [ reduce using rule 50 (empty -> .) ]

    var_declaration                shift and go to state 7
    statement                      shift and go to state 10
    expression                     shift and go to state 28
    write                          shift and go to state 8
    writeln                        shift and go to state 9
    if_else_statement              shift and go to state 11
    for_loop                       shift and go to state 12
    while_loop                     shift and go to state 13
    empty                          shift and go to state 14
    data_type                      shift and go to state 15

state 112

    (40) if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE .

    R_BRACE         reduce using rule 40 (if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE .)
    IDENTIFIER      reduce using rule 40 (if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE .)
    WRITE           reduce using rule 40 (if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE .)
    WRITELN         reduce using rule 40 (if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE .)
    INT             reduce using rule 40 (if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE .)
    FLOAT           reduce using rule 40 (if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE .)
    BOOL            reduce using rule 40 (if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE .)
    STRING          reduce using rule 40 (if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE .)
    L_PAREN         reduce using rule 40 (if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE .)
    IF              reduce using rule 40 (if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE .)
    FOR             reduce using rule 40 (if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE .)
    WHILE           reduce using rule 40 (if_else_statement -> IF L_PAREN conditional R_PAREN L_BRACE expressions R_BRACE ELSE L_BRACE expressions R_BRACE .)


state 113

    (38) for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE .

    R_BRACE         reduce using rule 38 (for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE .)
    IDENTIFIER      reduce using rule 38 (for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE .)
    WRITE           reduce using rule 38 (for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE .)
    WRITELN         reduce using rule 38 (for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE .)
    INT             reduce using rule 38 (for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE .)
    FLOAT           reduce using rule 38 (for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE .)
    BOOL            reduce using rule 38 (for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE .)
    STRING          reduce using rule 38 (for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE .)
    L_PAREN         reduce using rule 38 (for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE .)
    IF              reduce using rule 38 (for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE .)
    FOR             reduce using rule 38 (for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE .)
    WHILE           reduce using rule 38 (for_loop -> FOR L_PAREN var_declaration SEMICOLON conditional SEMICOLON statement R_PAREN L_BRACE expressions R_BRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IDENTIFIER in state 4 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 4 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 4 resolved as shift
WARNING: shift/reduce conflict for INT in state 4 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 4 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 4 resolved as shift
WARNING: shift/reduce conflict for STRING in state 4 resolved as shift
WARNING: shift/reduce conflict for L_PAREN in state 4 resolved as shift
WARNING: shift/reduce conflict for IF in state 4 resolved as shift
WARNING: shift/reduce conflict for FOR in state 4 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 4 resolved as shift
WARNING: shift/reduce conflict for R_BRACE in state 5 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 5 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 5 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 5 resolved as shift
WARNING: shift/reduce conflict for INT in state 5 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 5 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 5 resolved as shift
WARNING: shift/reduce conflict for STRING in state 5 resolved as shift
WARNING: shift/reduce conflict for L_PAREN in state 5 resolved as shift
WARNING: shift/reduce conflict for IF in state 5 resolved as shift
WARNING: shift/reduce conflict for FOR in state 5 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 5 resolved as shift
WARNING: shift/reduce conflict for R_PAREN in state 43 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 85 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 85 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 85 resolved as shift
WARNING: shift/reduce conflict for LESS in state 85 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 85 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 85 resolved as shift
WARNING: shift/reduce conflict for AND in state 85 resolved as shift
WARNING: shift/reduce conflict for OR in state 85 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 86 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 86 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 86 resolved as shift
WARNING: shift/reduce conflict for LESS in state 86 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 86 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 86 resolved as shift
WARNING: shift/reduce conflict for AND in state 86 resolved as shift
WARNING: shift/reduce conflict for OR in state 86 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 87 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 87 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 87 resolved as shift
WARNING: shift/reduce conflict for LESS in state 87 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 87 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 87 resolved as shift
WARNING: shift/reduce conflict for AND in state 87 resolved as shift
WARNING: shift/reduce conflict for OR in state 87 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 88 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 88 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 88 resolved as shift
WARNING: shift/reduce conflict for LESS in state 88 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 88 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 88 resolved as shift
WARNING: shift/reduce conflict for AND in state 88 resolved as shift
WARNING: shift/reduce conflict for OR in state 88 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 89 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 89 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 89 resolved as shift
WARNING: shift/reduce conflict for LESS in state 89 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 89 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 89 resolved as shift
WARNING: shift/reduce conflict for AND in state 89 resolved as shift
WARNING: shift/reduce conflict for OR in state 89 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 90 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 90 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 90 resolved as shift
WARNING: shift/reduce conflict for LESS in state 90 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 90 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 90 resolved as shift
WARNING: shift/reduce conflict for AND in state 90 resolved as shift
WARNING: shift/reduce conflict for OR in state 90 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 97 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 97 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 97 resolved as shift
WARNING: shift/reduce conflict for INT in state 97 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 97 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 97 resolved as shift
WARNING: shift/reduce conflict for STRING in state 97 resolved as shift
WARNING: shift/reduce conflict for L_PAREN in state 97 resolved as shift
WARNING: shift/reduce conflict for IF in state 97 resolved as shift
WARNING: shift/reduce conflict for FOR in state 97 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 97 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 99 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 99 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 99 resolved as shift
WARNING: shift/reduce conflict for INT in state 99 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 99 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 99 resolved as shift
WARNING: shift/reduce conflict for STRING in state 99 resolved as shift
WARNING: shift/reduce conflict for L_PAREN in state 99 resolved as shift
WARNING: shift/reduce conflict for IF in state 99 resolved as shift
WARNING: shift/reduce conflict for FOR in state 99 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 99 resolved as shift
WARNING: shift/reduce conflict for R_BRACE in state 100 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 100 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 100 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 100 resolved as shift
WARNING: shift/reduce conflict for INT in state 100 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 100 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 100 resolved as shift
WARNING: shift/reduce conflict for STRING in state 100 resolved as shift
WARNING: shift/reduce conflict for L_PAREN in state 100 resolved as shift
WARNING: shift/reduce conflict for IF in state 100 resolved as shift
WARNING: shift/reduce conflict for FOR in state 100 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 100 resolved as shift
WARNING: shift/reduce conflict for R_BRACE in state 102 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 102 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 102 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 102 resolved as shift
WARNING: shift/reduce conflict for INT in state 102 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 102 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 102 resolved as shift
WARNING: shift/reduce conflict for STRING in state 102 resolved as shift
WARNING: shift/reduce conflict for L_PAREN in state 102 resolved as shift
WARNING: shift/reduce conflict for IF in state 102 resolved as shift
WARNING: shift/reduce conflict for FOR in state 102 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 102 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 108 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 108 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 108 resolved as shift
WARNING: shift/reduce conflict for INT in state 108 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 108 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 108 resolved as shift
WARNING: shift/reduce conflict for STRING in state 108 resolved as shift
WARNING: shift/reduce conflict for L_PAREN in state 108 resolved as shift
WARNING: shift/reduce conflict for IF in state 108 resolved as shift
WARNING: shift/reduce conflict for FOR in state 108 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 108 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 109 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 109 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 109 resolved as shift
WARNING: shift/reduce conflict for INT in state 109 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 109 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 109 resolved as shift
WARNING: shift/reduce conflict for STRING in state 109 resolved as shift
WARNING: shift/reduce conflict for L_PAREN in state 109 resolved as shift
WARNING: shift/reduce conflict for IF in state 109 resolved as shift
WARNING: shift/reduce conflict for FOR in state 109 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 109 resolved as shift
WARNING: shift/reduce conflict for R_BRACE in state 110 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 110 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 110 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 110 resolved as shift
WARNING: shift/reduce conflict for INT in state 110 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 110 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 110 resolved as shift
WARNING: shift/reduce conflict for STRING in state 110 resolved as shift
WARNING: shift/reduce conflict for L_PAREN in state 110 resolved as shift
WARNING: shift/reduce conflict for IF in state 110 resolved as shift
WARNING: shift/reduce conflict for FOR in state 110 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 110 resolved as shift
WARNING: shift/reduce conflict for R_BRACE in state 111 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 111 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 111 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 111 resolved as shift
WARNING: shift/reduce conflict for INT in state 111 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 111 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 111 resolved as shift
WARNING: shift/reduce conflict for STRING in state 111 resolved as shift
WARNING: shift/reduce conflict for L_PAREN in state 111 resolved as shift
WARNING: shift/reduce conflict for IF in state 111 resolved as shift
WARNING: shift/reduce conflict for FOR in state 111 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 111 resolved as shift
